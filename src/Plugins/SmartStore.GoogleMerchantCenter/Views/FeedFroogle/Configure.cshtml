@model FeedFroogleModel
@using SmartStore.GoogleMerchantCenter;
@using SmartStore.GoogleMerchantCenter.Models;
@using SmartStore.Web.Framework;
@using SmartStore.Web.Framework.Plugins;
@using Telerik.Web.Mvc.UI;
@using SmartStore.Web.Framework.UI;

@{
	Layout = "";

	Html.AddCssFileParts(true,
		"~/Content/x-editable/bootstrap-editable.css",
		"~/Plugins/SmartStore.GoogleMerchantCenter/Content/smartstore.feed.froogle.css");

    Html.AppendScriptParts(true, "~/Content/x-editable/bootstrap-editable.js");
}

<a href="http://www.google.com/merchants/" rel="nofollow" target="_blank" class="pull-right">
	<img src="@Url.Content("~/Plugins/SmartStore.GoogleMerchantCenter/Content/images/mc_logo.png")" alt="Google Merchant Center" class="config-logo" />
</a>

@(Html.SmartStore().TabStrip().Name("googlebase-configure").Items(x => {
	x.Add().Text(T("Plugins.Feed.Froogle.General").Text).Content(@TabGeneral()).Selected(true);
	x.Add().Text(T("Plugins.Feed.Froogle.ProductData").Text).Content(@TabProductData());
}))

@helper TabGeneral()
{
    <script type="text/javascript">
    	$(document).ready(function () {
            $("#@Html.FieldIdFor(m => m.TaskEnabled)").click(toggleTaskEnabled);
            toggleTaskEnabled();
        });

    	function toggleTaskEnabled() {
    		$('#pnlGenerateStaticFileEachMinutes').toggle($('#@Html.FieldIdFor(m => m.TaskEnabled)').is(':checked'));
        }
    </script>
	
	<form method="POST" action="@Url.Action("ConfigurePlugin", "Plugin", new { area = "Admin", systemName = Model.Helper.SystemName })" novalidate="novalidate">
    <table class="adminContent">
    <tr>
        <td colspan="2">
			<div class="alert alert-info">
				<button class="close" data-dismiss="alert">×</button>
				@Html.Raw(@T("Plugins.Feed.Froogle.AdminInstruction"))
			</div>
        </td>
    </tr>
    @if (Model.GeneratedFiles.Count > 0 && !Model.IsRunning)
	{
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(m => m.GeneratedFiles)
			</td>
			<td class="adminData">
				@foreach (var group in Model.GeneratedFiles.GroupBy(x => x.StoreId))
				{
					var firstFile = group.First();
					<p>
						<strong>@(firstFile.StoreName)</strong>:
						@foreach (var file in group)
						{
							<br /><a href="@file.FileUrl" download>@file.FileUrl</a>
						}
						<br /><a href="@firstFile.LogUrl" download>@T("Admin.Configuration.ActivityLog")</a>,
						@T("Common.UpdatedOn"): @(firstFile.LastWriteTime)
					</p>
				}
				<a href="@Model.DeleteFilesUrl" class="btn btn-danger" onclick="return confirm('@T("Admin.Common.AreYouSure")');">
					<i class="fa fa-trash-o"></i>&nbsp;@T("Admin.Common.Delete")
				</a>
			</td>
		</tr>
		<tr class="adminSeparator">
			<td colspan="2">
				<hr />
			</td>
		</tr>
	}

	<tr>
		<td class="adminTitle">
			@Html.SmartLabelFor(m => m.ScheduleTaskId, "Common.Execution")
		</td>
		<td class="adminData">
			@Html.Action("MinimalTask", "ScheduleTask", new { taskId = Model.ScheduleTaskId, returnUrl = Request.RawUrl, cancellable = true, area = "admin" })
		</td>
	</tr>

	<tr class="adminSeparator">
		<td colspan="2">
			<hr />
		</td>
	</tr>	
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.DefaultGoogleCategory)
        </td>
        <td class="adminData">
			<input type="text" id="DefaultGoogleCategory" name="DefaultGoogleCategory" class="text-box single-line valid" style="width:98%;" data-provide="typeahead" data-items="18" autocomplete="off" 
				value="@Model.DefaultGoogleCategory" data-source="@Model.AvailableGoogleCategoriesAsJson" />
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.ProductPictureSize)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.ProductPictureSize)
            @Html.ValidationMessageFor(m => m.ProductPictureSize)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.AdditionalImages)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.AdditionalImages)
            @Html.ValidationMessageFor(m => m.AdditionalImages)
        </td>
    </tr>
    <tr class="adminSeparator">
        <td colspan="2">
            <hr />
        </td>
    </tr>
	<tr>
		<td class="adminTitle">
			@Html.SmartLabelFor(model => model.StoreId)
		</td>
		<td class="adminData">
			@Html.DropDownListFor(model => model.StoreId, Model.AvailableStores)
			@Html.ValidationMessageFor(model => model.StoreId)
		</td>
	</tr>
	<tr>
		<td class="adminTitle">
			@Html.SmartLabelFor(model => model.LanguageId)
		</td>
		<td class="adminData">
			@Html.DropDownListFor(model => model.LanguageId, Model.AvailableLanguages)
			@Html.ValidationMessageFor(model => model.LanguageId)
		</td>
	</tr>
	<tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.BuildDescription)
        </td>
        <td class="adminData">
			@Html.DropDownList("BuildDescription", new List<SelectListItem> {
				new SelectListItem { Text = Model.Helper.GetResource("Automatic"), Value = "" },		
				new SelectListItem { Text = Model.Helper.GetResource("Common.Unspecified"), Value = PluginHelper.NotSpecified },	
				new SelectListItem { Text = Model.Helper.GetResource("DescShort"), Value = "short" },
				new SelectListItem { Text = Model.Helper.GetResource("DescLong"), Value = "long" },
				new SelectListItem { Text = Model.Helper.GetResource("DescTitleAndShort"), Value = "titleAndShort" },
				new SelectListItem { Text = Model.Helper.GetResource("DescTitleAndLong"), Value = "titleAndLong" },
				new SelectListItem { Text = Model.Helper.GetResource("DescManuAndTitleAndShort"), Value = "manuAndTitleAndShort" },
				new SelectListItem { Text = Model.Helper.GetResource("DescManuAndTitleAndLong"), Value = "manuAndTitleAndLong" }
			})
            @Html.ValidationMessageFor(m => m.BuildDescription)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.DescriptionToPlainText)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.DescriptionToPlainText)
            @Html.ValidationMessageFor(m => m.DescriptionToPlainText)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.AppendDescriptionText1)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.AppendDescriptionText1)
            @Html.ValidationMessageFor(m => m.AppendDescriptionText1)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            &nbsp;
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.AppendDescriptionText2)
            @Html.ValidationMessageFor(m => m.AppendDescriptionText2)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            &nbsp;
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.AppendDescriptionText3)
            @Html.ValidationMessageFor(m => m.AppendDescriptionText3)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            &nbsp;
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.AppendDescriptionText4)
            @Html.ValidationMessageFor(m => m.AppendDescriptionText4)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            &nbsp;
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.AppendDescriptionText5)
            @Html.ValidationMessageFor(m => m.AppendDescriptionText5)
        </td>
    </tr>
    <tr class="adminSeparator">
        <td colspan="2">
            <hr />
        </td>
    </tr>
	<tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.Condition)
        </td>
        <td class="adminData">
			@Html.DropDownList("Condition", new List<SelectListItem> {
				new SelectListItem { Text = Model.Helper.GetResource("Automatic"), Value = "" },		
				new SelectListItem { Text = Model.Helper.GetResource("Common.Unspecified"), Value = PluginHelper.NotSpecified },	
				new SelectListItem { Text = Model.Helper.GetResource("ConditionNew"), Value = "new" },
				new SelectListItem { Text = Model.Helper.GetResource("ConditionUsed"), Value = "used" },
				new SelectListItem { Text = Model.Helper.GetResource("ConditionRefurbished"), Value = "refurbished" }
			})
            @Html.ValidationMessageFor(m => m.Condition)
        </td>
    </tr>
	<tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.Availability)
        </td>
        <td class="adminData">
			@Html.DropDownList("Availability", new List<SelectListItem> {
				new SelectListItem { Text = Model.Helper.GetResource("Automatic"), Value = "" },		
				new SelectListItem { Text = Model.Helper.GetResource("Common.Unspecified"), Value = PluginHelper.NotSpecified },	
				new SelectListItem { Text = Model.Helper.GetResource("AvailabilityInStock"), Value = "in stock" },
				new SelectListItem { Text = Model.Helper.GetResource("AvailabilityAvailableForOrder"), Value = "available for order" },
				new SelectListItem { Text = Model.Helper.GetResource("AvailabilityOutOfStock"), Value = "out of stock" },
				new SelectListItem { Text = Model.Helper.GetResource("AvailabilityPreorder"), Value = "preorder" }
			})
            @Html.ValidationMessageFor(m => m.Availability)
        </td>
    </tr>
	<tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.Gender)
        </td>
        <td class="adminData">
			@Html.DropDownList("Gender", new List<SelectListItem> {
				new SelectListItem { Text = Model.Helper.GetResource("Automatic"), Value = "" },	
				new SelectListItem { Text = Model.Helper.GetResource("Common.Unspecified"), Value = PluginHelper.NotSpecified },
				new SelectListItem { Text = Model.Helper.GetResource("GenderMale"), Value = "male" },
				new SelectListItem { Text = Model.Helper.GetResource("GenderFemale"), Value = "female" },
				new SelectListItem { Text = Model.Helper.GetResource("GenderUnisex"), Value = "unisex" }
			})
            @Html.ValidationMessageFor(m => m.Gender)
        </td>
    </tr>
	<tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.AgeGroup)
        </td>
        <td class="adminData">
			@Html.DropDownList("AgeGroup", new List<SelectListItem> {
				new SelectListItem { Text = Model.Helper.GetResource("Automatic"), Value = "" },		
				new SelectListItem { Text = Model.Helper.GetResource("Common.Unspecified"), Value = PluginHelper.NotSpecified },	
				new SelectListItem { Text = Model.Helper.GetResource("AgeGroupAdult"), Value = "adult" },
				new SelectListItem { Text = Model.Helper.GetResource("AgeGroupKids"), Value = "kids" }
			})
            @Html.ValidationMessageFor(m => m.AgeGroup)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.Brand)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.Brand)
            @Html.ValidationMessageFor(m => m.Brand)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.Color)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.Color)
            @Html.ValidationMessageFor(m => m.Color)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.Size)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.Size)
            @Html.ValidationMessageFor(m => m.Size)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.Material)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.Material)
            @Html.ValidationMessageFor(m => m.Material)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.Pattern)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.Pattern)
            @Html.ValidationMessageFor(m => m.Pattern)
        </td>
    </tr>
    <tr class="adminSeparator">
        <td colspan="2">
            <hr />
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.CurrencyId)
        </td>
        <td class="adminData">
            @Html.DropDownListFor(m => m.CurrencyId, Model.AvailableCurrencies)
            @Html.ValidationMessageFor(m => m.CurrencyId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.ExpirationDays)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.ExpirationDays)
            @Html.ValidationMessageFor(m => m.ExpirationDays)
        </td>
    </tr>
	<tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.SpecialPrice)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.SpecialPrice)
            @Html.ValidationMessageFor(m => m.SpecialPrice)
        </td>
    </tr>
	<tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.ExportShipping)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.ExportShipping)
            @Html.ValidationMessageFor(m => m.ExportShipping)
        </td>
    </tr>
	<tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.ExportBasePrice)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.ExportBasePrice)
            @Html.ValidationMessageFor(m => m.ExportBasePrice)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.UseOwnProductNo)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.UseOwnProductNo)
            @Html.ValidationMessageFor(m => m.UseOwnProductNo)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.OnlineOnly)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.OnlineOnly)
            @Html.ValidationMessageFor(m => m.OnlineOnly)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(m => m.ConvertNetToGrossPrices)
        </td>
        <td class="adminData">
            @Html.EditorFor(m => m.ConvertNetToGrossPrices)
            @Html.ValidationMessageFor(m => m.ConvertNetToGrossPrices)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">&nbsp;</td>
        <td class="adminData">
            <button type="submit" name="save" value="save" class="btn btn-primary">
                <i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")
            </button>
        </td>
    </tr>
    </table>
	</form>
}

@helper TabProductData()
{
	<div class="alert alert-info">
		<button class="close" data-dismiss="alert">×</button>
		@Html.Raw(@T("Plugins.Feed.Froogle.GridEditNote"))
	</div>

    <table class="adminContent">
	<tr>
		<td>

			<table class="adminContent google-product-search">
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(m => m.SearchProductName)
				</td>
				<td class="adminData">
					@Html.EditorFor(m => m.SearchProductName)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(m => m.SearchIsTouched)
				</td>
				<td class="adminData">
					@Html.DropDownList("SearchIsTouched", new List<SelectListItem> {
						new SelectListItem { Text = Model.Helper.GetResource("Common.Unspecified"), Value = "" },
						new SelectListItem { Text = Model.Helper.GetResource("Plugins.Feed.Froogle.SearchIsTouched.Touched"), Value = "touched" },
						new SelectListItem { Text = Model.Helper.GetResource("Plugins.Feed.Froogle.SearchIsTouched.Untouched"), Value = "untouched" }
					})
				</td>
			</tr>
			<tr>
				<td class="adminTitle">&nbsp;</td>
				<td class="adminData">
					<button type="submit" id="search-products" value="search-product" class="btn">
						<i class="fa fa-search"></i>&nbsp;@T("Admin.Common.Search")
					</button>
				</td>
			</tr>
			</table>

		</td>
	</tr>
    <tr>
        <td>
            @(Html.Telerik().Grid<GoogleProductModel>()
				.Name("froogleproducts-grid")
				.DataKeys(keys =>
				{
					keys.Add(x => x.ProductId).RouteKey("ProductId");
				})
				.Columns(c =>
				{
					c.Bound(x => x.ProductId).ReadOnly().Visible(false);
					c.Bound(x => x.Name)
						.ReadOnly().Visible(true).Width(420)
						.Template(x => @Html.LabeledProductName(x.ProductId, x.Name, x.ProductTypeName, x.ProductTypeLabelHint))
						.ClientTemplate(@Html.LabeledProductName("ProductId", "Name"));
					c.Bound(x => x.SKU).ReadOnly().Visible(true);
					c.Bound(x => x.Exporting).ClientTemplate(Html.XEditableLink("Exporting", "select2"));
					c.Bound(x => x.Taxonomy).ClientTemplate(Html.XEditableLink("Taxonomy", "typeahead"));
					c.Bound(x => x.Gender).ClientTemplate(Html.XEditableLink("Gender", "select2")).Width(100);
					c.Bound(x => x.AgeGroup).ClientTemplate(Html.XEditableLink("AgeGroup", "select2")).Width(100);
					c.Bound(x => x.Color).ClientTemplate(Html.XEditableLink("Color", "text"));
					c.Bound(x => x.Size).ClientTemplate(Html.XEditableLink("Size", "text"));
					c.Bound(x => x.Material).ClientTemplate(Html.XEditableLink("Material", "text"));
					c.Bound(x => x.Pattern).ClientTemplate(Html.XEditableLink("Pattern", "text"));
				})
				.ClientEvents(e =>
				{
					e.OnDataBound("OnGridDataBound");
					e.OnDataBinding("OnGridDataBinding");
				})
				.DataBinding(dataBinding =>
				{
					dataBinding.Ajax().Select("GoogleProductList", "FeedFroogle");
				})
				.Pageable(settings => settings.PageSize(Model.GridPageSize).Position(GridPagerPosition.Both))
				.PreserveGridState()
				.EnableCustomBinding(true)
			)
        </td>
    </tr>
    </table>
	
    <script type="text/javascript">
    	$(document).ready(function () {
    		$.fn.editable.defaults.mode = 'inline';
    	});

    	$('#ProgressInfoButton').click(function() {
    		$(this).doAjax({
    			callbackSuccess: function (resp) {
    				if (resp.message.length > 0)
    					$('#ProgressInfo').html(resp.message);
    				else
    					location.reload();    					
    			}
    		});
    	});

    	$('#search-products').click(function () {
    		var grid = $('#froogleproducts-grid').data('tGrid');
    		grid.currentPage = 1;
    		grid.ajaxRequest();
    		return false;
    	});

    	function OnGridDataBinding(e) {
    		e.data = {
    			searchProductName: $('#SearchProductName').val(),
				touched: $('#SearchIsTouched').val()
    		};
    	}

    	function OnGridDataBound(e) {
    		var grid = $('#froogleproducts-grid'),
				options = {
					emptytext: '@Model.Helper.GetResource("EmptyGridCell")',
					url: '@Model.GridEditUrl'
				},
    			select2Options = {
    				placeholder: '@Model.Helper.GetResource("EmptyGridCell")',
    				minimumResultsForSearch: 20,
    				allowClear: true
    			};

    		grid.find('a.edit-link-exporting').editable($.extend(options, {
    			select2: {
    				minimumResultsForSearch: 20
    			},
    			source: [
					{ id: 'true', text: '@T("Admin.Common.Yes")' },
    				{ id: 'false', text: '@T("Admin.Common.No")' }
    			]
    		}));

    		grid.find('a.edit-link-taxonomy').editable($.extend(options, {
    			source: @Html.Raw(Model.AvailableGoogleCategoriesAsJson)
    		}));

    		grid.find('a.edit-link-gender').editable($.extend(options, {
    			select2: select2Options,
    			source: [
					{ id: 'male', text: '@Model.Helper.GetResource("GenderMale")' },
					{ id: 'female', text: '@Model.Helper.GetResource("GenderFemale")' },
					{ id: 'unisex', text: '@Model.Helper.GetResource("GenderUnisex")' }
				]
			}));

    		grid.find('a.edit-link-agegroup').editable($.extend(options, {
    			select2: select2Options,
    			source: [
					{ id: 'adult', text: '@Model.Helper.GetResource("AgeGroupAdult")' },
					{ id: 'kids', text: '@Model.Helper.GetResource("AgeGroupKids")' }
    			]
			}));

    		grid.find('a.edit-link-color').editable(options);

    		grid.find('a.edit-link-size').editable(options);

    		grid.find('a.edit-link-material').editable(options);

    		grid.find('a.edit-link-pattern').editable(options);
		}
    </script>
}
