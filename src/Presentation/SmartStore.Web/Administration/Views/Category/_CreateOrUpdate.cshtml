@model CategoryModel

@using Telerik.Web.Mvc.UI;
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.SmartStore().TabStrip().Name("category-edit").Items(x => {
	x.Add().Text(T("Admin.Catalog.Categories.Info").Text).Content(TabInfo()).Selected(true);
	x.Add().Text(T("Admin.Common.SEO").Text).Content(TabSeo());
	x.Add().Text(T("Admin.Catalog.Categories.Products").Text).Content(TabProducts());
	x.Add().Text(T("Admin.Catalog.Categories.Discounts").Text).Content(TabDiscounts());
	x.Add().Text(T("Admin.Catalog.Categories.Acl").Text).Content(TabAcl());
	x.Add().Text(T("Admin.Common.Stores").Text).Content(TabStores());

	//generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "category-edit", this.Html, this.Model));
})
@helper TabInfo() {
        
    @(Html.LocalizedEditor<CategoryModel, CategoryLocalizedModel>("category-info-localized",
				@<table class="adminContent">
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Locales[item].Name)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => Model.Locales[item].Name)
                            @Html.ValidationMessageFor(model => model.Locales[item].Name)
                        </td>
                    </tr>
				 	<tr>
				 		<td class="adminTitle">
				 			@Html.SmartLabelFor(model => model.Locales[item].FullName)
				 		</td>
				 		<td class="adminData">
				 			@Html.EditorFor(model => Model.Locales[item].FullName)
				 			@Html.ValidationMessageFor(model => model.Locales[item].FullName)
						</td>
					</tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Locales[item].Description)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => model.Locales[item].Description, Html.RichEditorFlavor())
                            @Html.ValidationMessageFor(model => model.Locales[item].Description)
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Locales[item].BottomDescription)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => model.Locales[item].BottomDescription, Html.RichEditorFlavor())
                            @Html.ValidationMessageFor(model => model.Locales[item].BottomDescription)
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            @Html.HiddenFor(model => model.Locales[item].LanguageId)
                        </td>
                    </tr>
                </table>
				,
				@<table class="adminContent">
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Name)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => model.Name)
                            @Html.ValidationMessageFor(model => model.Name)
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.FullName)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => model.FullName)
                            @Html.ValidationMessageFor(model => model.FullName)
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Description)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(x => x.Description, Html.RichEditorFlavor())
                            @Html.ValidationMessageFor(model => model.Description)
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.BottomDescription)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(x => x.BottomDescription, Html.RichEditorFlavor())
                            @Html.ValidationMessageFor(model => model.BottomDescription)
                        </td>
                    </tr>
                </table>
			))
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Alias)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Alias)
                @Html.ValidationMessageFor(model => model.Alias)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CategoryTemplateId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.CategoryTemplateId, Model.AvailableCategoryTemplates)
                @Html.ValidationMessageFor(model => model.CategoryTemplateId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DefaultViewMode)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.DefaultViewMode, Model.AvailableDefaultViewModes)
                @Html.ValidationMessageFor(model => model.DefaultViewMode)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PictureId)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.PictureId, new { transientUpload = true })
                @Html.ValidationMessageFor(model => model.PictureId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ParentCategoryId)
            </td>
            <td class="adminData">
                @(Html.HiddenFor(x => x.ParentCategoryId, new
				{
					style = "min-width: 700px",
					placeholder = "[" + T("Common.Unspecified") + "]",
					data_select = true,
					data_select_lazy = true,
					data_select_init_text = Model.ParentCategoryBreadcrumb,
					data_select_url = Url.Action("Allcategories", "Category")
				}))
                @Html.ValidationMessageFor(model => model.ParentCategoryId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PriceRanges)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PriceRanges)
                @Html.ValidationMessageFor(model => model.PriceRanges)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ShowOnHomePage)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.ShowOnHomePage)
                @Html.ValidationMessageFor(model => model.ShowOnHomePage)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Published)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisplayOrder)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </td>
        </tr>
		@if(Model.CreatedOn.HasValue)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CreatedOn)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.CreatedOn)
				</td>
			</tr>
		}
		@if(Model.UpdatedOn.HasValue)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.UpdatedOn)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.UpdatedOn)
				</td>
			</tr>
		}
    </table>
}
@helper TabSeo() {
    @(Html.LocalizedEditor<CategoryModel, CategoryLocalizedModel>("category-seo-localized",
			   @<table class="adminContent">
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaKeywords)
                       </td>
                       <td class="adminData">
                           @Html.TextBoxFor(model => model.Locales[item].MetaKeywords, new { @class = "input-large" })
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaDescription)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].MetaDescription, new { @class = "input-large" })
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaTitle)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].MetaTitle, new { @class = "input-large" })
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].SeName)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].SeName, new { @class = "input-large" })
                           @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                       </td>
                   </tr>
                   <tr>
                       <td colspan="2">
                           @Html.HiddenFor(model => model.Locales[item].LanguageId)
                       </td>
                   </tr>
               </table>
			   ,
			   @<table class="adminContent">
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaKeywords)
                       </td>
                       <td class="adminData">
                           @Html.TextBoxFor(x => x.MetaKeywords, new { @class = "input-large" })
                           @Html.ValidationMessageFor(model => model.MetaKeywords)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaDescription)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.MetaDescription, new { @class = "input-large" })
                           @Html.ValidationMessageFor(model => model.MetaDescription)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaTitle)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.MetaTitle, new { @class = "input-large" })
                           @Html.ValidationMessageFor(model => model.MetaTitle)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.SeName)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.SeName, new { @class = "input-large" })
                           @Html.ValidationMessageFor(model => model.SeName)
                       </td>
                   </tr>
               </table>)) 
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AllowCustomersToSelectPageSize)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.AllowCustomersToSelectPageSize)
                @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
            </td>
        </tr>
        <tr id="pnlPageSize">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PageSize)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PageSize)
                @Html.ValidationMessageFor(model => model.PageSize)
            </td>
        </tr>
        <tr id="pnlPageSizeOptions">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PageSizeOptions)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PageSizeOptions)
                @Html.ValidationMessageFor(model => model.PageSizeOptions)
            </td>
        </tr>
    </table>
}
@helper TabProducts() {
		if (Model.Id > 0) {
			var gridPageSize = EngineContext.Current.Resolve<SmartStore.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
            <table class="adminContent">
                <tr>
                    <td>
            @(Html.Telerik().Grid<CategoryModel.CategoryProductModel>()
				.Name("products-grid")
					.DataKeys(keys => {
						keys.Add(x => x.Id);
					})
					.DataBinding(dataBinding => {
						dataBinding.Ajax()
							.Select("ProductList", "Category", new { categoryId = Model.Id })
							.Update("ProductUpdate", "Category")
							.Delete("ProductDelete", "Category");
					})
					.Columns(columns =>
					{
						columns.Bound(x => x.ProductName)
                            .ReadOnly()
							.Template(x => @Html.LabeledProductName(x.Id, x.ProductName, x.ProductTypeName, x.ProductTypeLabelHint))
							.ClientTemplate(@Html.LabeledProductName("ProductId", "ProductName"));
						columns.Bound(x => x.Sku)
							.ReadOnly();
						columns.Bound(x => x.Published)
							.ReadOnly()
							.Width(100)
							.Template(item => @Html.SymbolForBool(item.Published))
							.ClientTemplate(@Html.SymbolForBool("Published"))
							.Centered();
						columns.Bound(x => x.IsFeaturedProduct)
							.Width(100)
							.Template(item => @Html.SymbolForBool(item.IsFeaturedProduct))
							.ClientTemplate(@Html.SymbolForBool("IsFeaturedProduct"))
							.Centered();
						columns.Bound(x => x.DisplayOrder1)
							.Width(100)
							.Centered();
						columns.Command(commands =>
						{
							commands.Edit().Localize(T);
							commands.Delete().Localize(T);
						})
						.Width(180);
					})
					.Pageable(settings => settings.PageSize(gridPageSize).Position(GridPagerPosition.Both))
					.PreserveGridState()
					.EnableCustomBinding(true))
                    </td>
                </tr>
                <tr>
                    <td width="100%">
						<button type="submit" id="btnAddNewProduct" name="btnAddNewProduct" class="btn" style="margin-top:3px;"
								onclick="javascript:OpenWindow('@(Url.Action("ProductAddPopup", "Category", new { categoryId = Model.Id, btnId = "btnRefreshProducts", formId = "category-form" }))', 1000, 700, true); return false;">
							<i class="fa fa-plus"></i>
							@T("Admin.Catalog.Categories.Products.AddNew")
						</button>
                        <input type="submit" id="btnRefreshProducts" name="btnRefreshProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function () {
                                $('#btnRefreshProducts').click(function () {
                                    //refresh grid
                                    var optionsGrid = $("#products-grid");
                                    optionsGrid.data('tGrid').ajaxRequest();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </td>
                </tr>
            </table>
		}
		else {
            @T("Admin.Catalog.Categories.Products.SaveBeforeEdit")
		}
}

@helper TabDiscounts() {
	if (Model.AvailableDiscounts != null && Model.AvailableDiscounts.Count > 0) {
		foreach (var discount in Model.AvailableDiscounts) {
            <label class="checkbox">
                <input type="checkbox" name="SelectedDiscountIds" value="@discount.Id"
                @if (Model.SelectedDiscountIds != null && Model.SelectedDiscountIds.Contains(discount.Id)) {
                    <text>checked="checked"</text>
				}
                />@discount.Name
            </label>	
		}
	}
	else {
        @T("Admin.Catalog.Categories.Discounts.NoDiscounts")
	}
}

@helper TabAcl() {
    
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.SubjectToAcl)").click(toggleAcl);
            toggleAcl();
        });


        function toggleAcl() {
            if ($('#@Html.FieldIdFor(model => model.SubjectToAcl)').is(':checked')) {
                $('.pnl-acl').show();
            }
            else {
                $('.pnl-acl').hide();
            }
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SubjectToAcl)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SubjectToAcl)
                @Html.ValidationMessageFor(model => model.SubjectToAcl)
            </td>
        </tr>
        <tr class="pnl-acl">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableCustomerRoles)
            </td>
            <td class="adminData">
                @if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0) {
					foreach (var customerRole in Model.AvailableCustomerRoles) {
                    <div>
                        <label class="checkbox">
                            <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
                        </label>
                    </div>
                    }
                }
                else
                {
                    <div>
                        @T("Admin.Configuration.Acl.NoRolesDefined")
                    </div>
                }
            </td>
        </tr>
        <tr class="pnl"><td colspan="2"><hr /></td></tr>
        <tr class="pnl">
            <td class="adminTitle">
                &nbsp;
            </td>
            <td class="adminData">
                <div class="alert alert-danger"  >
                    @T("Admin.Configuration.Category.Acl.AssignToSubCategoriesAndProducts.Hint")
                </div>
                <a href="@Url.Action("InheritAclIntoChildren", "Category", new { categoryId = Model.Id })" name="inherit-acl-into-children" class="btn btn-danger">
                    <i class="fa fa-bolt"></i>&nbsp;
                    @T("Admin.Configuration.Category.Acl.AssignToSubCategoriesAndProducts")
                </a>
            </td>
        </tr>
    </table>
}

@helper TabStores()
{
    <script type="text/javascript">
    	$(document).ready(function () {

    		$("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);
        
        	toggleStoreMapping();
        });


        function toggleStoreMapping() {
        	if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
        		$('.pnl-available-stores').show();
        	}
        	else {
        		$('.pnl-available-stores').hide();
        	}
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LimitedToStores)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LimitedToStores)
                @Html.ValidationMessageFor(model => model.LimitedToStores)
            </td>
        </tr>
        <tr class="pnl-available-stores">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableStores)
            </td>
            <td class="adminData">
                @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                {
                    foreach (var store in Model.AvailableStores)
                    {
					<label class="checkbox">
						<input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />
						<span>@store.Name</span>
					</label>
                    }
                }
                else
                {
                    <div>@T("Admin.Configuration.Stores.NoStoresDefined")</div>
                }
            </td>
        </tr>

        <tr class="pnl"><td colspan="2"><hr /></td></tr>
        <tr class="pnl">
            <td class="adminTitle">
                &nbsp;
            </td>
            <td class="adminData">
                <div class="alert alert-danger">
                    @T("Admin.Configuration.Category.Stores.AssignToSubCategoriesAndProducts.Hint")
                </div>
                <a href="@Url.Action("InheritStoresIntoChildren", "Category", new { categoryId = Model.Id })" name="assign-stores-to-subcats-and-products" class="btn btn-danger">
                    <i class="fa fa-bolt"></i>&nbsp;
                    @T("Admin.Configuration.Category.Stores.AssignToSubCategoriesAndProducts")
                </a>
            </td>
        </tr>
    </table>
}

<script type="text/javascript">
    $(document).ready(function () {
        $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
        togglePageSize();
    });

    function togglePageSize() {
        if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
            $('#pnlPageSize').hide();
            $('#pnlPageSizeOptions').show();
        } else {
            $('#pnlPageSize').show();
            $('#pnlPageSizeOptions').hide();
        }
    }
</script>
