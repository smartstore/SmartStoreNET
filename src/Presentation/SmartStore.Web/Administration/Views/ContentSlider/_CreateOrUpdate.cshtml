@model ContentSliderSlideModel
@using SmartStore.Admin.Models.ContentSlider
@using Telerik.Web.Mvc.UI;
@{
    var cultures = System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes.SpecificCultures).ToList();
}
@Html.HiddenFor(model => model.Id)
@Html.SmartStore().TabStrip().Name("content-slide-edit").Items(x =>
{
	x.Add().Text(T("Admin.Common.General").Text).Content(TabGeneral()).Selected(true);
	x.Add().Text(T("Admin.Common.Stores").Text).Content(TabStores());
    
    //generate an event
	EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "content-slide-edit", this.Html, this.Model));
})

    <script type="text/javascript">
        $(function () {

            $("#@Html.FieldIdFor(model => model.Button1.Published)").click(toggleButton1);
            $("#@Html.FieldIdFor(model => model.Button2.Published)").click(toggleButton2);
            $("#@Html.FieldIdFor(model => model.Button3.Published)").click(toggleButton3);
            
            toggleButton1();
            toggleButton2();
            toggleButton3();
        });

        function toggleButton1() {
            if ($('#@Html.FieldIdFor(model => model.Button1.Published)').is(':checked')) {
                $('.button1-props').show();
            }
            else {
                $('.button1-props').hide();
            }
        }

        function toggleButton2() {
            if ($('#@Html.FieldIdFor(model => model.Button2.Published)').is(':checked')) {
                $('.button2-props').show();
            }
            else {
                $('.button2-props').hide();
            }
        }

        function toggleButton3() {
            if ($('#@Html.FieldIdFor(model => model.Button3.Published)').is(':checked')) {
                $('.button3-props').show();
            }
            else {
                $('.button3-props').hide();
            }
        }
    </script>

@helper TabGeneral()
{
	<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Title)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Title)
				@Html.ValidationMessageFor(model => model.Title)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Text)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.Text, Html.RichEditorFlavor())
				@Html.ValidationMessageFor(model => model.Text)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Published)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Published)
				@Html.ValidationMessageFor(model => model.Published)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.DisplayOrder)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.DisplayOrder)
				@Html.ValidationMessageFor(model => model.DisplayOrder)
			</td>
		</tr>
    
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.LanguageCulture)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.LanguageCulture, new SelectList(ViewBag.AllLanguages, "LanguageCulture", "Name"))
				@Html.ValidationMessageFor(model => model.LanguageCulture)
			</td>
		</tr>

		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.PictureId)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.PictureId, "Picture", new { transientUpload = true })
				@Html.ValidationMessageFor(model => model.PictureId)
			</td>
		</tr>

		<tr>
			<td colspan="2">
				<hr />
			</td>
		</tr>

		<tr>
			<td colspan="2">
				<h4>@T("Admin.Configuration.ContentSlider.Button1")</h4>
			</td>
		</tr>
		<tr>
			<td colspan="2">
				<hr style="border-bottom:none" />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button1.Published)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button1.Published)
				@Html.ValidationMessageFor(model => model.Button1.Published)
			</td>
		</tr>
		<tr class="button1-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button1.Text)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button1.Text)
				@Html.ValidationMessageFor(model => model.Button1.Text)
			</td>
		</tr>
		<tr class="button1-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button1.Type)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button1.Type)
				@Html.ValidationMessageFor(model => model.Button1.Type)
			</td>
		</tr>
		<tr class="button1-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button1.Url)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button1.Url)
				@Html.ValidationMessageFor(model => model.Button1.Url)
			</td>
		</tr>
    

		<tr>
			<td colspan="2">
				<h4>@T("Admin.Configuration.ContentSlider.Button2")</h4>
			</td>
		</tr>
		<tr>
			<td colspan="2">
				<hr style="border-bottom:none" />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button2.Published)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button2.Published)
				@Html.ValidationMessageFor(model => model.Button2.Published)
			</td>
		</tr>
		<tr class="button2-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button2.Text)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button2.Text)
				@Html.ValidationMessageFor(model => model.Button2.Text)
			</td>
		</tr>
		<tr class="button2-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button2.Type)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button2.Type)
				@Html.ValidationMessageFor(model => model.Button2.Type)
			</td>
		</tr>
		<tr class="button2-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button2.Url)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button2.Url)
				@Html.ValidationMessageFor(model => model.Button2.Url)
			</td>
		</tr>


		<tr>
			<td colspan="2">
				<h4>@T("Admin.Configuration.ContentSlider.Button3")</h4>
			</td>
		</tr>
		<tr>
			<td colspan="2">
				<hr style="border-bottom:none" />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button3.Published)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button3.Published)
				@Html.ValidationMessageFor(model => model.Button3.Published)
			</td>
		</tr>
		<tr class="button3-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button3.Text)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button3.Text)
				@Html.ValidationMessageFor(model => model.Button3.Text)
			</td>
		</tr>
		<tr class="button3-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button3.Type)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button3.Type)
				@Html.ValidationMessageFor(model => model.Button3.Type)
			</td>
		</tr>
		<tr class="button3-props">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => Model.Button3.Url)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Button3.Url)
				@Html.ValidationMessageFor(model => model.Button3.Url)
			</td>
		</tr>
	</table>
}

@helper TabStores()
{
    <script type="text/javascript">
    	$(document).ready(function () {

    		$("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

    		toggleStoreMapping();
    	});


    	function toggleStoreMapping() {
    		if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
        		$('#pnl-available-stores').show();
        	}
        	else {
        		$('#pnl-available-stores').hide();
        	}
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LimitedToStores)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LimitedToStores)
                @Html.ValidationMessageFor(model => model.LimitedToStores)
            </td>
        </tr>
        <tr id="pnl-available-stores">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableStores)
            </td>
            <td class="adminData">
                @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                {
                    foreach (var store in Model.AvailableStores)
                    {
					<label class="checkbox">
						<input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />
						<span>@store.Name</span>
					</label>
                    }
                }
                else
                {
                    <div>@T("Admin.Configuration.Stores.NoStoresDefined")</div>
                }</td>
        </tr>
    </table>
}