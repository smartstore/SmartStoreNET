@model CustomerListModel
@using Telerik.Web.Mvc.UI;
@using System.Globalization;
@{
    var gridPageSize = EngineContext.Current.Resolve<SmartStore.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
    
    ViewBag.Title = T("Admin.Customers.Customers").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <i class="fa fa-user"></i>
            @T("Admin.Customers.Customers")
        </div>
        <div class="options">
			@{ Html.RenderWidget("admin_button_toolbar_before"); }

			<a href="@Url.Action("Create")" class="btn btn-primary">
				<i class="fa fa-plus"></i> @T("Admin.Common.AddNew")
			</a>

			@{ Html.RenderWidget("admin_button_toolbar_after"); }
        </div>
    </div>

    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SearchCustomerRoleIds)
            </td>
            <td class="adminData">
                @foreach (var customerRole in Model.AvailableCustomerRoles)
                {
                    <label class="checkbox">
                        <input type="checkbox" name="SearchCustomerRoleIds" value="@customerRole.Id"
                        @if (Model.SearchCustomerRoleIds != null && Model.SearchCustomerRoleIds.Contains(customerRole.Id))
                        {
                            <text>checked="checked"</text>
                        }
                        /> @customerRole.Name
                    </label>
                }
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SearchEmail)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchEmail)
            </td>
        </tr>
        @if (Model.UsernamesEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchUsername)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchUsername)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SearchFirstName)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchFirstName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SearchLastName)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchLastName)
            </td>
        </tr>
        @if (Model.DateOfBirthEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchDayOfBirth)
                </td>
                <td class="adminData">
                    @{
						var monthOfBirthValues = new List<SelectListItem>();
						for (int i = 1; i <= 12; i++)
						{
							monthOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
						}

						var dayOfBirthValues = new List<SelectListItem>();
						for (int i = 1; i <= 31; i++)
						{
							dayOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
						}
                    }
                    @Html.DropDownListFor(model => Model.SearchMonthOfBirth, monthOfBirthValues, T("Admin.Customers.Customers.List.SearchDateOfBirth.Month").Text, new { @class = "autowidth" })
                    @Html.DropDownListFor(model => Model.SearchDayOfBirth, dayOfBirthValues, T("Admin.Customers.Customers.List.SearchDateOfBirth.Day").Text, new { @class = "autowidth" })
                </td>
            </tr>
        }
        
        @if (Model.CompanyEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchCompany)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchCompany)
                </td>
            </tr>
        }        
        @if (Model.PhoneEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchPhone)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchPhone)
                </td>
            </tr>
        }
        @if (Model.ZipPostalCodeEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SearchZipPostalCode)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchZipPostalCode)
                </td>
            </tr>
        } 
        <tr>
			<td class="adminTitle">
				&nbsp;
			</td>
			<td class="adminData">
				<button type="submit" id="search-customers" name="search-customers" class="btn"><i class="fa fa-search"></i>&nbsp;@T("Admin.Common.Search")</button>
            </td>
        </tr>
    </table>

    <p></p>

    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<CustomerModel>(Model.Customers.Data)
                    .Name("customers-grid")
                    .ClientEvents(events => events
                        .OnDataBinding("onDataBinding")
                        .OnDataBound("onDataBound"))
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Id)
							.Template(x => string.Format("<input type='checkbox' name='checkedRecords' value='{0}' class='checkboxGroups'/>", x.Id))
							.ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= Id #>' class='checkboxGroups'/>")
							.Title("<input id='mastercheckbox' type='checkbox'/>")
							.HtmlAttributes(new { style = "text-align:center" })
							.HeaderHtmlAttributes(new { style = "text-align:center" });
                        columns.Bound(x => x.Id);
                        columns.Bound(x => x.Email)
                            .Template(x => Html.ActionLink(x.Email, "Edit", "Customer", new { id = x.Id }, new { }))
                            .ClientTemplate("<a href=\"" + @Url.Content("~/Admin/Customer/Edit/") + "<#= Id #>\"><#= Email #></a>");
                        columns.Bound(x => x.Username)
                            .Visible(Model.UsernamesEnabled);
                        columns.Bound(x => x.FullName);
						columns.Bound(x => x.CustomerRoleNames);
                        columns.Bound(x => x.Company)
                            .Visible(Model.CompanyEnabled);
                        columns.Bound(x => x.Phone)
                            .Visible(Model.PhoneEnabled);
                        columns.Bound(x => x.ZipPostalCode)
                            .Visible(Model.ZipPostalCodeEnabled);
                        columns.Bound(x => x.Active)
                             .Template(item => @Html.SymbolForBool(item.Active))
                             .ClientTemplate(@Html.SymbolForBool("Active"))
                             .Centered();
                        columns.Bound(x => x.CreatedOn);
                        columns.Bound(x => x.LastActivityDate);
                        columns.Bound(x => x.Id)
                            .Centered()
                            .Template(x => Html.ActionLink(T("Admin.Common.Edit").Text, "Edit", new { id = x.Id }))
                            .ClientTemplate("<a href=\"Edit/<#= Id #>\">" + T("Admin.Common.Edit").Text + "</a>")
                            .Title(T("Admin.Common.Edit").Text);
                    })
                    .Pageable(settings => settings.Total(Model.Customers.Total).PageSize(gridPageSize).Position(GridPagerPosition.Both))
                    .DataBinding(dataBinding => dataBinding.Ajax().Select("CustomerList", "Customer"))
					.PreserveGridState()
                    .EnableCustomBinding(true))
            </td>
        </tr>
    </table>
    
    <script type="text/javascript">
		@*used by widget SmartStore.CommonExportProviders::ExportButtonsGeneral.cshtml*@
		var selectedIds = [];

		$(document).ready(function () {

			//search button
			$('#search-customers').click(function () {
				var grid = $('#customers-grid').data('tGrid');
				grid.currentPage = 1; //new search. Set page size to 1
				grid.ajaxRequest();
				return false;
			});

			$("#@Html.FieldIdFor(model => model.SearchEmail)").keydown(function (event) {
				if (event.keyCode == 13) {
					$("#search-customers").click();
					return false;
				}
			});
			$("#@Html.FieldIdFor(model => model.SearchUsername)").keydown(function (event) {
				if (event.keyCode == 13) {
					$("#search-customers").click();
					return false;
				}
			});
			$("#@Html.FieldIdFor(model => model.SearchFirstName)").keydown(function (event) {
				if (event.keyCode == 13) {
					$("#search-customers").click();
					return false;
				}
			});
			$("#@Html.FieldIdFor(model => model.SearchLastName)").keydown(function (event) {
				if (event.keyCode == 13) {
					$("#search-customers").click();
					return false;
				}
			});
			$("#@Html.FieldIdFor(model => model.SearchCompany)").keydown(function (event) {
				if (event.keyCode == 13) {
					$("#search-customers").click();
					return false;
				}
			});
			$("#@Html.FieldIdFor(model => model.SearchPhone)").keydown(function (event) {
				if (event.keyCode == 13) {
					$("#search-customers").click();
					return false;
				}
			});
			$("#@Html.FieldIdFor(model => model.SearchZipPostalCode)").keydown(function (event) {
				if (event.keyCode == 13) {
					$("#search-customers").click();
					return false;
				}
			});

			$('#mastercheckbox').click(function () {
				$('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
			});

			//wire up checkboxes.
			$(document).on('change', '#customers-grid input[type=checkbox][id!=mastercheckbox]', function (e) {
				var $check = $(this);
				if ($check.is(":checked") == true) {
					var checked = jQuery.inArray($check.val(), selectedIds);
					if (checked == -1) {
						//add id to selectedIds.
						selectedIds.push($check.val());
					}
				}
				else {
					var checked = jQuery.inArray($check.val(), selectedIds);
					if (checked > -1) {
						//remove id from selectedIds.
						selectedIds = $.grep(selectedIds, function (item, index) {
							return item != $check.val();
						});
					}
				}
				updateMasterCheckbox();
			});
		});

		function onDataBound(e) {

			$('#customers-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
				var currentId = $(this).val();
				var checked = jQuery.inArray(currentId, selectedIds);
				//set checked based on if current checkbox's value is in selectedIds.
				$(this).attr('checked', checked > -1);
			});

			updateMasterCheckbox();
		}

		function updateMasterCheckbox() {
			var numChkBoxes = $('#customers-grid input[type=checkbox][id!=mastercheckbox]').length;
			var numChkBoxesChecked = $('#customers-grid input[type=checkbox][checked][id!=mastercheckbox]').length;
			$('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
		}

		function onDataBinding(e) {
			var customerRoleIds = [];
			$('[name=SearchCustomerRoleIds]:checked').each(function () {
				customerRoleIds.push($(this).val());
			});

			var searchModel = {
				SearchCustomerRoleIds: customerRoleIds.join(","),
				SearchEmail: $('#@Html.FieldIdFor(model => model.SearchEmail)').val(),
				SearchUsername: $('#@Html.FieldIdFor(model => model.SearchUsername)').val(),
				SearchFirstName: $('#@Html.FieldIdFor(model => model.SearchFirstName)').val(),
				SearchLastName: $('#@Html.FieldIdFor(model => model.SearchLastName)').val(),
				SearchDayOfBirth: $('#@Html.FieldIdFor(model => model.SearchDayOfBirth)').val(),
				SearchMonthOfBirth: $('#@Html.FieldIdFor(model => model.SearchMonthOfBirth)').val(),
				SearchCompany: $('#@Html.FieldIdFor(model => model.SearchCompany)').val(),
				SearchPhone: $('#@Html.FieldIdFor(model => model.SearchPhone)').val(),
				SearchZipPostalCode: $('#@Html.FieldIdFor(model => model.SearchZipPostalCode)').val()
			};
			e.data = searchModel;
		}
    </script>
}