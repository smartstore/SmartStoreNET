@model ManufacturerModel

@using Telerik.Web.Mvc.UI;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.SmartStore().TabStrip().Name("manufacturer-edit").Items(x =>
{
    x.Add().Text(T("Admin.Catalog.Manufacturers.Info").Text).Content(TabInfo()).Selected(true);
    x.Add().Text(T("Admin.Common.SEO").Text).Content(TabSeo());
    x.Add().Text(T("Admin.Catalog.Manufacturers.Products").Text).Content(TabProducts());
	x.Add().Text(T("Admin.Promotions.Discounts").Text).Content(TabDiscounts());
	x.Add().Text(T("Admin.Common.Stores").Text).Content(TabStores());
    
    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "manufacturer-edit", this.Html, this.Model));
})
@helper TabInfo()
{ 
	if (Model.Id != 0)
	{
		<table class="adminContent">
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Id)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.Id)
					@Html.ValidationMessageFor(model => model.Id)
				</td>
			</tr>
		</table>

		<p></p>
	}

    @(Html.LocalizedEditor<ManufacturerModel, ManufacturerLocalizedModel>("manufacturer-info-localized",
                @<table class="adminContent">
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Locales[item].Name)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => Model.Locales[item].Name)
                            @Html.ValidationMessageFor(model => model.Locales[item].Name)
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Locales[item].Description)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => model.Locales[item].Description, Html.RichEditorFlavor())
                            @Html.ValidationMessageFor(model => model.Locales[item].Description)
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            @Html.HiddenFor(model => model.Locales[item].LanguageId)
                        </td>
                    </tr>
                </table>
                ,
                @<table class="adminContent">
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Name)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => model.Name)
                            @Html.ValidationMessageFor(model => model.Name)
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.SmartLabelFor(model => model.Description)
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(x => x.Description, Html.RichEditorFlavor())
                            @Html.ValidationMessageFor(model => model.Description)
                        </td>
                    </tr>
                </table>
))

    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ManufacturerTemplateId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.ManufacturerTemplateId, Model.AvailableManufacturerTemplates)
                @Html.ValidationMessageFor(model => model.ManufacturerTemplateId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PictureId)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.PictureId, new { transientUpload = true })
                @Html.ValidationMessageFor(model => model.PictureId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Published)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisplayOrder)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </td>
        </tr>
		@if(Model.CreatedOn.HasValue)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CreatedOn)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.CreatedOn)
				</td>
			</tr>
		}
		@if(Model.UpdatedOn.HasValue)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.UpdatedOn)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.UpdatedOn)
				</td>
			</tr>
		}
    </table>
}
@helper TabSeo()
    {
    @(Html.LocalizedEditor<ManufacturerModel, ManufacturerLocalizedModel>("manufacturer-seo-localized",
               @<table class="adminContent">
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaKeywords)
                       </td>
                       <td class="adminData">
                           @Html.EditorFor(model => model.Locales[item].MetaKeywords)
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaDescription)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].MetaDescription)
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaTitle)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].MetaTitle)
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].SeName)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].SeName)
                           @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                       </td>
                   </tr>
                   <tr>
                       <td colspan="2">
                           @Html.HiddenFor(model => model.Locales[item].LanguageId)
                       </td>
                   </tr>
               </table>
               ,
               @<table class="adminContent">
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaKeywords)
                       </td>
                       <td class="adminData">
                           @Html.EditorFor(x => x.MetaKeywords)
                           @Html.ValidationMessageFor(model => model.MetaKeywords)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaDescription)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.MetaDescription)
                           @Html.ValidationMessageFor(model => model.MetaDescription)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaTitle)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.MetaTitle)
                           @Html.ValidationMessageFor(model => model.MetaTitle)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.SeName)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.SeName)
							@if (Model.Id != 0)
                            {
                                @Html.Action("NamesPerEntity", "UrlRecord", new { entityName = "Manufacturer", entityId = @Model.Id })
                            }
                           @Html.ValidationMessageFor(model => model.SeName)
                       </td>
                   </tr>
               </table>)) 
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AllowCustomersToSelectPageSize)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.AllowCustomersToSelectPageSize)
                @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
            </td>
        </tr>
        <tr id="pnlPageSize">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PageSize)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PageSize)
                @Html.ValidationMessageFor(model => model.PageSize)
            </td>
        </tr>
        <tr id="pnlPageSizeOptions">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PageSizeOptions)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PageSizeOptions)
                @Html.ValidationMessageFor(model => model.PageSizeOptions)
            </td>
        </tr>
    </table>
}
@helper TabProducts()
{
    if (Model.Id > 0)
    {
        <table class="adminContent">
            <tr>
                <td>
					@(Html.Telerik().Grid<ManufacturerModel.ManufacturerProductModel>()
						.Name("products-grid")
						.DataKeys(keys =>
						{
							keys.Add(x => x.Id);
						})
						.DataBinding(dataBinding =>
						{
							dataBinding.Ajax()
								.Select("ProductList", "Manufacturer", new { manufacturerId = Model.Id })
								.Update("ProductUpdate", "Manufacturer")
								.Delete("ProductDelete", "Manufacturer");
						})
						.Columns(columns =>
						{
							columns.Bound(x => x.ProductName)
								.ReadOnly()
								.Width(520)
								.ClientTemplate(@Html.LabeledProductName("ProductId", "ProductName"));
							columns.Bound(x => x.Sku)
								.ReadOnly();
							columns.Bound(x => x.Published)
								.ReadOnly()
								.ClientTemplate(@Html.SymbolForBool("Published"))
								.Centered();
							columns.Bound(x => x.IsFeaturedProduct)
								.ClientTemplate(@Html.SymbolForBool("IsFeaturedProduct"))
								.Centered();
							columns.Bound(x => x.DisplayOrder1)
								.Centered();
							columns.Command(commands =>
							{
								commands.Edit().Localize(T);
								commands.Delete().Localize(T);
							})
							.Width(220);
						})
						.Pageable(settings => settings.PageSize(Model.GridPageSize).Position(GridPagerPosition.Both))
						.PreserveGridState()
						.EnableCustomBinding(true))
                </td>
            </tr>
            <tr>
                <td>
					<button type="button" id="AddNewProductButton" class="btn btn-warning btn-below" data-loading-text="@(T("Common.Loading"))&hellip;">
						<i class="fa fa-plus"></i>
						@T("Admin.Catalog.Manufacturers.Products.AddNew")
					</button>
                </td>
            </tr>
        </table>
    }
    else
    {
            @T("Admin.Catalog.Manufacturers.Products.SaveBeforeEdit")
    }
}

@helper TabDiscounts()
{
	if (Model.AvailableDiscounts != null && Model.AvailableDiscounts.Any())
	{
		foreach (var discount in Model.AvailableDiscounts)
		{
			<label class="checkbox">
				<input type="checkbox" name="SelectedDiscountIds" value="@discount.Id"
					   @if (Model.SelectedDiscountIds != null && Model.SelectedDiscountIds.Contains(discount.Id)) { <text> checked="checked" </text>  } />@discount.Name
				</label>
		}
	}
	else
	{
		<div class="alert alert-info">
			@T("Admin.Promotions.Discounts.NoDiscountsAvailable")
		</div>
	}
}

@helper TabStores()
{
    <script type="text/javascript">
    	$(document).ready(function () {

    		$("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);
        	toggleStoreMapping();
        });


        function toggleStoreMapping() {
        	if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
        		$('#pnl-available-stores').show();
        	}
        	else {
        		$('#pnl-available-stores').hide();
        	}
        }
    </script>

    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LimitedToStores)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LimitedToStores)
                @Html.ValidationMessageFor(model => model.LimitedToStores)
            </td>
        </tr>
        <tr id="pnl-available-stores">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableStores)
            </td>
            <td class="adminData">
                @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                {
                    foreach (var store in Model.AvailableStores)
                    {
					<label class="checkbox">
						<input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />
						<span>@store.Name</span>
					</label>
                    }
                }
                else
                {
                    <div>@T("Admin.Configuration.Stores.NoStoresDefined")</div>
                }</td>
        </tr>
    </table>
}

<script type="text/javascript">
	$(document).ready(function () {

        $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
		togglePageSize();

		// add new product
		$(document).on('click', '#AddNewProductButton', function () {
			$({}).entityPicker('loadDialog', {
				url: '@Url.Action("EntityPicker", "Common", new { area = "" })',
				caption: '@T("Admin.Catalog.Manufacturers.Products.AddNew")',
				onLoadDialogBefore: function () {
					$('#AddNewProductButton').button('loading').prop('disabled', true);
				},
				onLoadDialogComplete: function () {
					$('#AddNewProductButton').prop('disabled', false).button('reset');
				},
				onOkClicked: function (ids) {
					$({}).doAjax({
						type: 'POST',
						url: '@Url.Action("ProductAdd")',
						data: { "manufacturerId": @Model.Id, "selectedProductIds": ids },
						callbackSuccess: function () {
							$('#products-grid').data('tGrid').ajaxRequest();
						}
					});
					return true;
				}
			});
		});

    });

    function togglePageSize() {
        if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
            $('#pnlPageSize').hide();
            $('#pnlPageSizeOptions').show();
        } else {
            $('#pnlPageSize').show();
            $('#pnlPageSizeOptions').hide();
        }
    }
</script>
