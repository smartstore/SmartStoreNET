@model MessageTemplateModel

@using SmartStore.Web.Framework.UI;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

@Html.SmartStore().TabStrip().Name("template-edit").Style(TabsStyle.Tabs).Position(TabsPosition.Top).Items(x =>
{
	x.Add().Text(T("Admin.Common.Info").Text).Content(TabInfo()).Selected(true);
	x.Add().Text(T("Admin.Common.Stores").Text).Content(TabStores());
    
    // generate an event
	EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "template-edit", this.Html, this.Model));
})

@helper TabInfo()
{  
    <table class="adminContent" style="margin-bottom: 8px">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.TokensTree)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.TokensTree, "TokenSelector")
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Name)
            </td>
            <td class="adminData">
                @Model.Name
                @Html.HiddenFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.IsActive)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive)
            </td>
        </tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SendManually)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.SendManually)
				@Html.ValidationMessageFor(model => model.SendManually)
			</td>
		</tr>
    </table>
	@(Html.LocalizedEditor<MessageTemplateModel, MessageTemplateLocalizedModel>("messagetemplate-localized",
    @<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Locales[item].EmailAccountId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => Model.Locales[item].EmailAccountId, new SelectList(Model.AvailableEmailAccounts, "Id", "DisplayName", Model.Locales[item].EmailAccountId))
				@Html.ValidationMessageFor(model => model.Locales[item].EmailAccountId)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Locales[item].BccEmailAddresses)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.Locales[item].BccEmailAddresses)
                @Html.ValidationMessageFor(model => model.Locales[item].BccEmailAddresses)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Locales[item].Subject)
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.Locales[item].Subject, new { @class = "input-large" })
                @Html.ValidationMessageFor(model => model.Locales[item].Subject)
            </td>
        </tr>
	 	<tr>
	 		<td class="adminTitle">
	 			@Html.SmartLabelFor(model => model.Locales[item].Attachment1FileId)
	 		</td>
	 		<td class="adminData">
	 			@Html.EditorFor(model => Model.Locales[item].Attachment1FileId, "Download", new { minimalMode = true })
	 			@Html.ValidationMessageFor(model => model.Locales[item].Attachment1FileId)
			</td>
		 </tr>
		 <tr>
	 		<td class="adminTitle">
	 			@Html.SmartLabelFor(model => model.Locales[item].Attachment2FileId)
			</td>
			<td class="adminData">
	 			@Html.EditorFor(model => Model.Locales[item].Attachment2FileId, "Download", new { minimalMode = true })
				@Html.ValidationMessageFor(model => model.Locales[item].Attachment2FileId)
			</td>
		 </tr>
		 <tr>
	 		<td class="adminTitle">
	 			@Html.SmartLabelFor(model => model.Locales[item].Attachment3FileId)
			</td>
			<td class="adminData">
	 			@Html.EditorFor(model => Model.Locales[item].Attachment3FileId, "Download", new { minimalMode = true })
				@Html.ValidationMessageFor(model => model.Locales[item].Attachment3FileId)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Locales[item].Body)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.Locales[item].Body, "RichEditor")
                @Html.ValidationMessageFor(model => model.Locales[item].Body)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
    ,
    @<table class="adminContent">
        <tr>
             <td class="adminTitle">
                 @Html.SmartLabelFor(model => model.EmailAccountId)
             </td>
             <td class="adminData">
                 @Html.DropDownListFor(model => model.EmailAccountId, new SelectList(Model.AvailableEmailAccounts, "Id", "DisplayName"))
                 @Html.ValidationMessageFor(model => model.EmailAccountId)
             </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BccEmailAddresses)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BccEmailAddresses)
                @Html.ValidationMessageFor(model => model.BccEmailAddresses)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Subject)
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.Subject, new { @class = "input-large" })
                @Html.ValidationMessageFor(model => model.Subject)
            </td>
        </tr>
	 	<tr>
	 		<td class="adminTitle">
	 			@Html.SmartLabelFor(model => model.Attachment1FileId)
	 		</td>
	 		<td class="adminData">
	 			@Html.EditorFor(model => Model.Attachment1FileId, "Download", new { minimalMode = true })
	 			@Html.ValidationMessageFor(model => model.Attachment1FileId)
			</td>
		</tr>
	 	<tr>
	 		<td class="adminTitle">
	 			@Html.SmartLabelFor(model => model.Attachment2FileId)
	 		</td>
	 		<td class="adminData">
	 			@Html.EditorFor(model => Model.Attachment2FileId, "Download", new { minimalMode = true })
	 			@Html.ValidationMessageFor(model => model.Attachment2FileId)
			</td>
		</tr>
	 	<tr>
	 		<td class="adminTitle">
	 			@Html.SmartLabelFor(model => model.Attachment3FileId)
	 		</td>
	 		<td class="adminData">
	 			@Html.EditorFor(model => Model.Attachment3FileId, "Download", new { minimalMode = true })
	 			@Html.ValidationMessageFor(model => model.Attachment3FileId)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Body)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Body, "RichEditor")
                @Html.ValidationMessageFor(model => model.Body)
            </td>
        </tr>
    </table>
    ))
}

@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

            toggleStoreMapping();
        });

        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            }
            else {
                $('#pnl-available-stores').hide();
            }
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LimitedToStores)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LimitedToStores)
                @Html.ValidationMessageFor(model => model.LimitedToStores)
            </td>
        </tr>
        <tr id="pnl-available-stores">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableStores)
            </td>
            <td class="adminData">
                @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                {
                    foreach (var store in Model.AvailableStores)
                    {
					<label class="checkbox">
						<input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />
						<span>@store.Name</span>
					</label>
                    }
                }
                else
                {
                    <div>@T("Admin.Configuration.Stores.NoStoresDefined")</div>
                }
			</td>
        </tr>
    </table>
}