@using SmartStore.Core.Domain.Catalog;

@model OrderModel.AddOrderProductModel.ProductDetailsModel

@{
    ViewBag.Title = string.Format(T("Admin.Orders.Products.AddNew.Title2").Text, Model.Name, Model.OrderId);
}

<script type="text/javascript">
	$(document).ready(function () {
		$('#ProductAddAttributeContainer').find('select').selectWrapper();
	});
</script>

@*we add enctype = "multipart/form-data" because "File upload" attribute control type requries it*@
@using (Html.BeginForm("AddProductToOrderDetails", "Order",
    new RouteValueDictionary(new { orderId = Model.OrderId, productId = Model.ProductId }),
    FormMethod.Post,
    new Dictionary<string, Object> { { "enctype", "multipart/form-data" } }))
{
    @Html.ValidationSummary(false)
    <div class="section-header">
        <div class="title">
            @string.Format(T("Admin.Orders.Products.AddNew.Title2").Text, Model.Name, Model.OrderId)
            @Html.ActionLink("(" + T("Admin.Orders.Products.AddNew.BackToList") + ")", "AddProductToOrder", new { orderId = Model.OrderId })
        </div>
        <div class="options">
        </div>
    </div>
    <div class="clear">
    </div>
    <div>
        @if (Model.Warnings.Count > 0)
        {
            <div class="alert alert-error fade in">
                @foreach (var warning in Model.Warnings)
                {
                    @warning
                    <br />
                }
            </div>
        }
    </div>
    <div class="clear">
    </div>

    if (Model.ProductType == ProductType.SimpleProduct)
    {
        <div>
		    <table class="adminContent">
		    <tr>
			    <td class="adminTitle">
				    @Html.SmartLabelFor(model => model.UnitPriceInclTax)
			    </td>
			    <td class="adminData">
				    @Html.EditorFor(model => model.UnitPriceInclTax)
			    </td>
		    </tr>
		    <tr>
			    <td class="adminTitle">
				    @Html.SmartLabelFor(model => model.UnitPriceExclTax)
			    </td>
			    <td class="adminData">
				    @Html.EditorFor(model => model.UnitPriceExclTax)
			    </td>
		    </tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.TaxRate)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.TaxRate)
				</td>
			</tr>
		    <tr>
			    <td class="adminTitle">
				    @Html.SmartLabelFor(model => model.Quantity)
			    </td>
			    <td class="adminData">
				    @Html.EditorFor(model => model.Quantity)
			    </td>
		    </tr>
		    <tr>
			    <td class="adminTitle">
				    @Html.SmartLabelFor(model => model.SubTotalInclTax)
			    </td>
			    <td class="adminData">
				    @Html.EditorFor(model => model.SubTotalInclTax)
			    </td>
		    </tr>
		    <tr>
			    <td class="adminTitle">
				    @Html.SmartLabelFor(model => model.SubTotalExclTax)
			    </td>
			    <td class="adminData">
				    @Html.EditorFor(model => model.SubTotalExclTax)
			    </td>
		    </tr>
		    </table>
		        
		    <div class="clear"></div>

            <div id="ProductAddAttributeContainer">
                @{ Html.RenderPartial("_ProductAddAttributes", Model.ProductVariantAttributes); }
            </div>

            <div class="clear"></div>

            @{
                var dataDictGiftCard = new ViewDataDictionary();
                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = "giftcard";
                @Html.Partial("_ProductAddGiftCardInfo", Model.GiftCard, dataDictGiftCard)
            }
            
			<div class="clear"></div>
			<p></p>

			<table class="adminContent">
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.AdjustInventory)
					</td>
					<td class="adminData">
						@Html.EditorFor(model => model.AdjustInventory)
						@Html.ValidationMessageFor(model => model.AdjustInventory)
					</td>
				</tr>
				@if(Model.ShowUpdateTotals)
				{
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.UpdateTotals)
						</td>
						<td class="adminData">
							@Html.EditorFor(model => model.UpdateTotals)
							@Html.ValidationMessageFor(model => model.UpdateTotals)
						</td>
					</tr>
				}
				<tr>
					<td class="adminTitle">&nbsp;</td>
					<td class="adminData">
						<button type="submit" class="btn btn-primary"><i class="fa fa-plus"></i>&nbsp;@T("Admin.Orders.Products.AddNew")</button>
					</td>
				</tr>
			</table>
        </div>
    }
    else if (Model.ProductType == ProductType.GroupedProduct)
    {
        <div>
            Grouped products are not currently supported for adding to an existing order.	@* TODO TBD *@
        </div>
    }
    else if (Model.ProductType == ProductType.BundledProduct)
    {
        <div>
            Bundled products are not currently supported for adding to an existing order.	@* TODO TBD *@
        </div>
    }
    else
    {
        <div>
            This product type (unknown) is not currently supported for adding to an existing order
        </div>
    }
}