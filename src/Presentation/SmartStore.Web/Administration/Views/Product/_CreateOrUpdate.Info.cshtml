@model ProductModel

@using SmartStore.Core.Domain.Catalog;

@{
    var availableTags = Model.AvailableProductTags.Select(x => x.Value).ToArray();
    for (int i = 0; i < availableTags.Length; i++)
    {
        availableTags[i] = availableTags[i].EncodeJsString();
    }
    ViewBag.SerializedTags = String.Join(",", availableTags);
}

<script type="text/javascript">

    $(document).ready(function () {

        $("#@Html.FieldIdFor(model => model.ProductTypeId)").change(toggleProductType);
        $("#@Html.FieldIdFor(model => model.RequireOtherProducts)").click(toggleRequireOtherProducts);
        $("#@Html.FieldIdFor(model => model.IsGiftCard)").click(toggleGiftCard);
        $("#@Html.FieldIdFor(model => model.IsDownload)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.UnlimitedDownloads)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.HasSampleDownload)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.HasUserAgreement)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.IsRecurring)").click(toggleRecurring);
        $("#@Html.FieldIdFor(model => model.IsShipEnabled)").click(toggleShipping);
        $("#@Html.FieldIdFor(model => model.IsTaxExempt)").click(toggleTax);

    	toggleProductType();
        toggleRequireOtherProducts();
        toggleGiftCard();
        toggleDownloadableProduct();
        toggleRecurring();
        toggleShipping();
        toggleTax();
        
    	// show/hide homepage display order
    	$('#ShowOnHomePage').change(function () {
    		$('#pnlHomePageDisplayOrder').toggle($(this).is(':checked'));
        }).trigger('change');
    });

    function toggleProductType() {
        var selectedProductTypeId = $("#@Html.FieldIdFor(model => model.ProductTypeId)").val();
        if (selectedProductTypeId == '@((int)ProductType.SimpleProduct)') {
            $('#group-required-other-products').show();
            $('#group-giftcard').show();
            $('#group-downloads').show();
            $('#group-recurring').show();
            $('#group-shipping').show();
            $('#group-tax').show();
            $('#group-inventory').show();
            $('a[href=#tab-inventory]').parent().removeClass("hide"); // specified in _CreateOrUpdate.cshtml
        }
        else if (selectedProductTypeId == '@((int)ProductType.GroupedProduct)') {
            $('#group-required-other-products').hide();
            $('#group-giftcard').hide();
            $('#group-downloads').hide();
            $('#group-recurring').hide();
            $('#group-shipping').hide();
            $('#group-tax').hide();
            $('#group-inventory').hide();
            $('a[href=#tab-inventory]').parent().addClass("hide"); // specified in _CreateOrUpdate.cshtml
        }
        else if (selectedProductTypeId == '@((int)ProductType.BundledProduct)') {
        	//$('a[href=#tab-inventory]').parent().addClass("hide"); // specified in _CreateOrUpdate.cshtml
        }
    }

    function toggleRequireOtherProducts() {
        if ($('#@Html.FieldIdFor(model => model.RequireOtherProducts)').is(':checked')) {
            $('#pnlRequiredProductIds').show();
            $('#pnlAutomaticallyAddRequiredProducts').show();
        }
        else {
            $('#pnlRequiredProductIds').hide();
            $('#pnlAutomaticallyAddRequiredProducts').hide();
        }
    }

    function toggleGiftCard() {
        if ($('#@Html.FieldIdFor(model => model.IsGiftCard)').is(':checked')) {
            $('#pnlGiftCardType').show();
        }
        else {
            $('#pnlGiftCardType').hide();
        }
    }

    function toggleCustomerEntersPrice() {
        var src = $('#@Html.FieldIdFor(model => model.CustomerEntersPrice)');
        if (src.is(':checked')) {
            $('#pnlMinimumCustomerEnteredPrice').show();
            $('#pnlMaximumCustomerEnteredPrice').show();
        }
        else {
            $('#pnlMinimumCustomerEnteredPrice').hide();
            $('#pnlMaximumCustomerEnteredPrice').hide();
        }
    }

    function toggleDownloadableProduct() {
        if ($('#@Html.FieldIdFor(model => model.IsDownload)').is(':checked')) {

            $('#pnlDownloadFile').show();
            $('#pnlUnlimitedDownloads').show();
            if ($('#@Html.FieldIdFor(model => model.UnlimitedDownloads)').is(':checked')) {
                $('#pnlMaxNumberOfDownloads').hide();
            }
            else {
                $('#pnlMaxNumberOfDownloads').show();
            }
            $('#pnlDownloadExpirationDays').show();
            $('#pnlDownloadActivationType').show();

            $('#pnlHasUserAgreement').show();
            if ($('#@Html.FieldIdFor(model => model.HasUserAgreement)').is(':checked')) {
                $('#pnlUserAgreementText').show();
            }
            else {
                $('#pnlUserAgreementText').hide();
            }

            $('#pnlHasSampleDownload').show();

            if ($('#@Html.FieldIdFor(model => model.HasSampleDownload)').is(':checked')) {
                $('#pnlSampleDownloadFile').show();
            }
            else {
                $('#pnlSampleDownloadFile').hide();
            }
        }
        else {
            $('#pnlDownloadFile').hide();
            $('#pnlUnlimitedDownloads').hide();
            $('#pnlMaxNumberOfDownloads').hide();
            $('#pnlDownloadExpirationDays').hide();
            $('#pnlDownloadActivationType').hide();
            $('#pnlHasUserAgreement').hide();
            $('#pnlUserAgreementText').hide();
            $('#pnlHasSampleDownload').hide();
            $('#pnlSampleDownloadFile').hide();
        }
    }

    function toggleShipping() {
        if ($('#@Html.FieldIdFor(model => model.IsShipEnabled)').is(':checked')) {
            $('#pnlDeliveryTime').show();
            $('#pnlFreeShipping').show();
            $('#pnlAdditionalShippingCharge').show();
            $('#pnlWeight').show();
            $('#pnlLength').show();
            $('#pnlWidth').show();
            $('#pnlHeight').show();
        }
        else {
            $('#pnlDeliveryTime').hide();
            $('#pnlFreeShipping').hide();
            $('#pnlAdditionalShippingCharge').hide();
            $('#pnlWeight').hide();
            $('#pnlLength').hide();
            $('#pnlWidth').hide();
            $('#pnlHeight').hide();
        }
    }

    function toggleRecurring() {
        if ($('#@Html.FieldIdFor(model => model.IsRecurring)').is(':checked')) {
            $('#pnlCycleLength').show();
            $('#pnlCyclePeriod').show();
            $('#pnlTotalCycles').show();
        }
        else {
            $('#pnlCycleLength').hide();
            $('#pnlCyclePeriod').hide();
            $('#pnlTotalCycles').hide();
        }
    }

    function toggleTax() {
        if ($('#@Html.FieldIdFor(model => model.IsTaxExempt)').is(':checked')) {
        	$('#pnlTaxCategory').hide();
        	$('#pnlIsEsd').hide();
        }
        else {
        	$('#pnlTaxCategory').show();
        	$('#pnlIsEsd').show();
        }
    }
</script>

<div style="margin-bottom: 30px; overflow: hidden;">
	<table class="adminContent">
		@if (Model.Id > 0)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Id)
				</td>
				<td class="adminData">
					@Model.Id.ToString()
					@Html.ValidationMessageFor(model => model.Id)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductUrl)
				</td>
				<td class="adminData">
					<a href="@Model.ProductUrl">@Model.ProductUrl</a>
				</td>
			</tr>
		}
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ProductTypeId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.ProductTypeId, ((ProductType)Model.ProductTypeId).ToSelectList())
				@Html.ValidationMessageFor(model => model.ProductTypeId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.VisibleIndividually)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.VisibleIndividually)
				@Html.ValidationMessageFor(model => model.VisibleIndividually)
			</td>
		</tr>
		@if (Model.Id > 0 && Model.AssociatedToProductId > 0)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.AssociatedToProductId)
				</td>
				<td class="adminData">
					@Html.ActionLink(Model.AssociatedToProductName, "Edit", "Product", new { id = Model.AssociatedToProductId }, new { })
				</td>
			</tr>
		}
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ProductTemplateId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.ProductTemplateId, Model.AvailableProductTemplates)
				@Html.ValidationMessageFor(model => model.ProductTemplateId)
			</td>
		</tr>
	</table>

	<p></p>

	@(Html.LocalizedEditor<ProductModel, ProductLocalizedModel>("product-info-localized",
	@<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Locales[item].Name)
			</td>
			<td class="adminData">
				@Html.TextBoxFor(model => Model.Locales[item].Name, new { @class = "input-large" })
				@Html.ValidationMessageFor(model => model.Locales[item].Name)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Locales[item].ShortDescription)
			</td>
			<td class="adminData">
				@Html.TextAreaFor(model => model.Locales[item].ShortDescription, new { @class = "input-large" })
				@Html.ValidationMessageFor(model => model.Locales[item].ShortDescription)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Locales[item].FullDescription)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Locales[item].FullDescription, Html.RichEditorFlavor())
				@Html.ValidationMessageFor(model => model.Locales[item].FullDescription)
			</td>
		</tr>
		<tr>
			<td colspan="2">
				@Html.HiddenFor(model => model.Locales[item].LanguageId)
			</td>
		</tr>
	</table>
    ,
	@<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Name)
			</td>
			<td class="adminData">
				@Html.TextBoxFor(model => model.Name, new { @class = "input-large" })
				@Html.ValidationMessageFor(model => model.Name)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ShortDescription)
			</td>
			<td class="adminData">
				@Html.TextAreaFor(x => x.ShortDescription, new { @class = "input-large" })
				@Html.ValidationMessageFor(model => model.ShortDescription)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.FullDescription)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.FullDescription, Html.RichEditorFlavor())
				@Html.ValidationMessageFor(model => model.FullDescription)
			</td>
		</tr>
	</table>
					))

	<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Sku)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Sku)
				@Html.ValidationMessageFor(model => model.Sku)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ManufacturerPartNumber)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.ManufacturerPartNumber)
				@Html.ValidationMessageFor(model => model.ManufacturerPartNumber)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Gtin)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Gtin)
				@Html.ValidationMessageFor(model => model.Gtin)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AdminComment)
			</td>
			<td class="adminData">
				@Html.TextAreaFor(model => model.AdminComment)
				@Html.ValidationMessageFor(model => model.AdminComment)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ProductTags)
			</td>
			<td class="adminData">
				@Html.HiddenFor(model => model.ProductTags, new { @class = "tag-chooser" })
				@Html.ValidationMessageFor(model => model.ProductTags)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AvailableStartDateTimeUtc)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.AvailableStartDateTimeUtc, new { pickTime = true })
				@Html.ValidationMessageFor(model => model.AvailableStartDateTimeUtc)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AvailableEndDateTimeUtc)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.AvailableEndDateTimeUtc)
				@Html.ValidationMessageFor(model => model.AvailableEndDateTimeUtc)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AllowCustomerReviews)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.AllowCustomerReviews)
				@Html.ValidationMessageFor(model => model.AllowCustomerReviews)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ShowOnHomePage)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.ShowOnHomePage)
				@Html.ValidationMessageFor(model => model.ShowOnHomePage)
			</td>
		</tr>
		<tr id="pnlHomePageDisplayOrder">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.HomePageDisplayOrder)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.HomePageDisplayOrder)
				@Html.ValidationMessageFor(model => model.HomePageDisplayOrder)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Published)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Published)
				@Html.ValidationMessageFor(model => model.Published)
			</td>
		</tr>
		@if(Model.CreatedOn.HasValue)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CreatedOn)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.CreatedOn)
				</td>
			</tr>
		}
		@if(Model.UpdatedOn.HasValue)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.UpdatedOn)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.UpdatedOn)
				</td>
			</tr>
		}
	</table>

	<table class="adminContent" id="group-required-other-products">
		<tr class="adminSeparator">
			<td colspan="2">
				<hr />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.RequireOtherProducts)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.RequireOtherProducts)
				@Html.ValidationMessageFor(model => model.RequireOtherProducts)
			</td>
		</tr>
		<tr id="pnlRequiredProductIds">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.RequiredProductIds)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.RequiredProductIds)
				@Html.ValidationMessageFor(model => model.RequiredProductIds)
			</td>
		</tr>
		<tr id="pnlAutomaticallyAddRequiredProducts">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AutomaticallyAddRequiredProducts)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.AutomaticallyAddRequiredProducts)
				@Html.ValidationMessageFor(model => model.AutomaticallyAddRequiredProducts)
			</td>
		</tr>
	</table>

	<table class="adminContent" id="group-giftcard">
		<tr class="adminSeparator">
			<td colspan="2">
				<hr />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.IsGiftCard)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.IsGiftCard)
				@Html.ValidationMessageFor(model => model.IsGiftCard)
			</td>
		</tr>
		<tr id="pnlGiftCardType">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.GiftCardTypeId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.GiftCardTypeId, ((GiftCardType)Model.GiftCardTypeId).ToSelectList())
				@Html.ValidationMessageFor(model => model.GiftCardTypeId)
			</td>
		</tr>
	</table>

	<table class="adminContent" id="group-downloads">
		<tr class="adminSeparator">
			<td colspan="2">
				<hr />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.IsDownload)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.IsDownload)
				@Html.ValidationMessageFor(model => model.IsDownload)
			</td>
		</tr>
		<tr id="pnlDownloadFile">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.DownloadId)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.DownloadId)
				@Html.ValidationMessageFor(model => model.DownloadId)
			</td>
		</tr>
		<tr id="pnlUnlimitedDownloads">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.UnlimitedDownloads)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.UnlimitedDownloads)
				@Html.ValidationMessageFor(model => model.UnlimitedDownloads)
			</td>
		</tr>
		<tr id="pnlMaxNumberOfDownloads">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.MaxNumberOfDownloads)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.MaxNumberOfDownloads)
				@Html.ValidationMessageFor(model => model.MaxNumberOfDownloads)
			</td>
		</tr>
		<tr id="pnlDownloadExpirationDays">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.DownloadExpirationDays)
			</td>
			<td class="adminData">
				@Html.TextBoxFor(model => model.DownloadExpirationDays)
				@Html.ValidationMessageFor(model => model.DownloadExpirationDays)
			</td>
		</tr>
		<tr id="pnlDownloadActivationType">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.DownloadActivationTypeId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.DownloadActivationTypeId, ((DownloadActivationType)Model.DownloadActivationTypeId).ToSelectList())
				@Html.ValidationMessageFor(model => model.DownloadActivationTypeId)
			</td>
		</tr>
		<tr id="pnlHasUserAgreement">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.HasUserAgreement)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.HasUserAgreement)
				@Html.ValidationMessageFor(model => model.HasUserAgreement)
			</td>
		</tr>
		<tr id="pnlUserAgreementText">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.UserAgreementText)
			</td>
			<td class="adminData">
				@Html.TextAreaFor(model => model.UserAgreementText)
				@Html.ValidationMessageFor(model => model.UserAgreementText)
			</td>
		</tr>
		<tr id="pnlHasSampleDownload">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.HasSampleDownload)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.HasSampleDownload)
				@Html.ValidationMessageFor(model => model.HasSampleDownload)
			</td>
		</tr>
		<tr id="pnlSampleDownloadFile">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SampleDownloadId)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.SampleDownloadId)
				@*@Html.ValidationMessageFor(model => model.SampleDownloadId)*@
			</td>
		</tr>
	</table>

	<table class="adminContent" id="group-recurring">
		<tr class="adminSeparator">
			<td colspan="2">
				<hr />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.IsRecurring)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.IsRecurring)
				@Html.ValidationMessageFor(model => model.IsRecurring)
			</td>
		</tr>
		<tr id="pnlCycleLength">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.RecurringCycleLength)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.RecurringCycleLength)
				@Html.ValidationMessageFor(model => model.RecurringCycleLength)
			</td>
		</tr>
		<tr id="pnlCyclePeriod">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.RecurringCyclePeriodId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.RecurringCyclePeriodId, ((RecurringProductCyclePeriod)Model.RecurringCyclePeriodId).ToSelectList())
				@Html.ValidationMessageFor(model => model.RecurringCyclePeriodId)
			</td>
		</tr>
		<tr id="pnlTotalCycles">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.RecurringTotalCycles)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.RecurringTotalCycles)
				@Html.ValidationMessageFor(model => model.RecurringTotalCycles)
			</td>
		</tr>
	</table>

	<table class="adminContent" id="group-shipping">
		<tr class="adminSeparator">
			<td colspan="2">
				<hr />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.IsShipEnabled)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.IsShipEnabled)
				@Html.ValidationMessageFor(model => model.IsShipEnabled)
			</td>
		</tr>
		<tr id="pnlDeliveryTime">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.DeliveryTimeId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.DeliveryTimeId, Model.AvailableDeliveryTimes, T("Common.Unspecified"))
				@Html.ValidationMessageFor(model => model.DeliveryTimeId)
			</td>
		</tr>
		<tr id="pnlFreeShipping">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.IsFreeShipping)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.IsFreeShipping)
				@Html.ValidationMessageFor(model => model.IsFreeShipping)
			</td>
		</tr>
		<tr id="pnlAdditionalShippingCharge">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AdditionalShippingCharge)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.AdditionalShippingCharge) <span class="muted">@Model.PrimaryStoreCurrencyCode</span>
				@Html.ValidationMessageFor(model => model.AdditionalShippingCharge)
			</td>
		</tr>
        <tr id="pnlQuantityUnit">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.QuantityUnitId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.QuantityUnitId, Model.AvailableQuantityUnits, T("Common.Unspecified"))
                @Html.ValidationMessageFor(model => model.QuantityUnitId)
            </td>
        </tr>
		<tr id="pnlWeight">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Weight)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Weight) <span class="muted">@Model.BaseWeightIn</span>
				@Html.ValidationMessageFor(model => model.Weight)
			</td>
		</tr>
		<tr id="pnlLength">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Length)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Length) <span class="muted">@Model.BaseDimensionIn</span>
				@Html.ValidationMessageFor(model => model.Length)
			</td>
		</tr>
		<tr id="pnlWidth">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Width)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Width) <span class="muted">@Model.BaseDimensionIn</span>
				@Html.ValidationMessageFor(model => model.Width)
			</td>
		</tr>
		<tr id="pnlHeight">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Height)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Height) <span class="muted">@Model.BaseDimensionIn</span>
				@Html.ValidationMessageFor(model => model.Height)
			</td>
		</tr>
	</table>

	<table class="adminContent" id="group-tax">
		<tr class="adminSeparator">
			<td colspan="2">
				<hr />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.IsTaxExempt)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.IsTaxExempt)
				@Html.ValidationMessageFor(model => model.IsTaxExempt)
			</td>
		</tr>
		<tr id="pnlTaxCategory">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.TaxCategoryId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.TaxCategoryId, Model.AvailableTaxCategories, new { placeholder = T("Common.PleaseSelect").Text })
				@Html.ValidationMessageFor(model => model.TaxCategoryId)
			</td>
		</tr>
		<tr id="pnlIsEsd">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.IsEsd)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.IsEsd)
				@Html.ValidationMessageFor(model => model.IsEsd)
			</td>
		</tr>
	</table>

	<script>
		$(function () {
			var tagChooser = $("#@Html.FieldIdFor(x => x.ProductTags)");
			tagChooser.select2({ tags:[@(Html.Raw(ViewBag.SerializedTags))] });
		});
	</script>
</div>