@model ProductModel
@using Telerik.Web.Mvc.UI;

<script>

	var fieldBasePriceMeasureUnit;
	var fieldBasePriceAmount;
	var fieldBasePriceBaseAmount;

	$(function () {
		$("#@Html.FieldIdFor(model => model.CustomerEntersPrice)").click(toggleCustomerEntersPrice);
		$("#@Html.FieldIdFor(model => model.BasePriceEnabled)").click(toggleBasePrice);

		fieldBasePriceMeasureUnit = $("#@Html.FieldIdFor(model => model.BasePriceMeasureUnit)");
		fieldBasePriceAmount = $("#@Html.FieldIdFor(model => model.BasePriceAmount)");
		fieldBasePriceBaseAmount = $("#@Html.FieldIdFor(model => model.BasePriceBaseAmount)");

		fieldBasePriceMeasureUnit.on("change", getCurrentBasePrice);
		fieldBasePriceAmount.on("blur", getCurrentBasePrice);
		fieldBasePriceBaseAmount.on("blur", getCurrentBasePrice);

		toggleCustomerEntersPrice();
		getCurrentBasePrice();
		toggleBasePrice();

		function getCurrentBasePrice() {
			var basePriceAmount = Globalize.parseFloat(fieldBasePriceAmount.val());
			var basePriceBaseAmount = Globalize.parseInt(fieldBasePriceBaseAmount.val());
			if (basePriceAmount > 0 && basePriceBaseAmount > 0) {
				$.ajax({
					cache:false,
					type: "POST",
					url: "@(Url.Action("GetBasePrice", "Product"))",
					data: {
						"productId" : @Model.Id,
						"basePriceMeasureUnit": fieldBasePriceMeasureUnit.val(),
						"basePriceAmount": fieldBasePriceAmount.val(),
						"basePriceBaseAmount": fieldBasePriceBaseAmount.val()
					},
					success: function (data) {
						$("#BasePriceAmountInfo").html(data.BasePrice);
					},
					error: function (xhr, ajaxOptions, thrownError){
						//alert(thrownError);
					}
				});
			}
			return false;
		}

		function toggleBasePrice() {
			if ($('#@Html.FieldIdFor(model => model.BasePriceEnabled)').is(':checked')) {
				$('#pnlBasePriceBaseAmount').show();
				$('#pnlBasePriceAmount').show();
				$('#pnlBasePriceAmountHint').show();
			}
			else {
				$('#pnlBasePriceBaseAmount').hide();
				$('#pnlBasePriceAmount').hide();
				$('#pnlBasePriceAmountHint').hide();
			}
		}

		function toggleCustomerEntersPrice() {
			var src = $('#@Html.FieldIdFor(model => model.CustomerEntersPrice)');
			if (src.is(':checked')) {
				$('#pnlMinimumCustomerEnteredPrice').show();
				$('#pnlMaximumCustomerEnteredPrice').show();
			}
			else {
				$('#pnlMinimumCustomerEnteredPrice').hide();
				$('#pnlMaximumCustomerEnteredPrice').hide();
			}
		}
	})
</script>

<div id="group-prices">
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Price)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Price) <span class="muted">@Model.PrimaryStoreCurrencyCode</span>
                @Html.ValidationMessageFor(model => model.Price)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.OldPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.OldPrice) <span class="muted">@Model.PrimaryStoreCurrencyCode</span>
                @Html.ValidationMessageFor(model => model.OldPrice)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ProductCost)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ProductCost) <span class="muted">@Model.PrimaryStoreCurrencyCode</span>
                @Html.ValidationMessageFor(model => model.ProductCost)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SpecialPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SpecialPrice) <span class="muted">@Model.PrimaryStoreCurrencyCode</span>
                @Html.ValidationMessageFor(model => model.SpecialPrice)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SpecialPriceStartDateTimeUtc)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SpecialPriceStartDateTimeUtc, new { pickTime = true })
                @Html.ValidationMessageFor(model => model.SpecialPriceStartDateTimeUtc)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SpecialPriceEndDateTimeUtc)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SpecialPriceEndDateTimeUtc, new { pickTime = true })
                @Html.ValidationMessageFor(model => model.SpecialPriceEndDateTimeUtc)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisableBuyButton)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisableBuyButton)
                @Html.ValidationMessageFor(model => model.DisableBuyButton)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisableWishlistButton)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisableWishlistButton)
                @Html.ValidationMessageFor(model => model.DisableWishlistButton)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableForPreOrder)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AvailableForPreOrder)
                @Html.ValidationMessageFor(model => model.AvailableForPreOrder)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CallForPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.CallForPrice)
                @Html.ValidationMessageFor(model => model.CallForPrice)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CustomerEntersPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.CustomerEntersPrice)
                @Html.ValidationMessageFor(model => model.CustomerEntersPrice)
            </td>
        </tr>
        <tr id="pnlMinimumCustomerEnteredPrice">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.MinimumCustomerEnteredPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.MinimumCustomerEnteredPrice) <span class="muted">@Model.PrimaryStoreCurrencyCode</span>
                @Html.ValidationMessageFor(model => model.MinimumCustomerEnteredPrice)
            </td>
        </tr>
        <tr id="pnlMaximumCustomerEnteredPrice">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.MaximumCustomerEnteredPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.MaximumCustomerEnteredPrice) <span class="muted">@Model.PrimaryStoreCurrencyCode</span>
                @Html.ValidationMessageFor(model => model.MaximumCustomerEnteredPrice)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <!-- PAnGV -->
        <tr class="base-price">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BasePriceEnabled)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BasePriceEnabled)
                @Html.ValidationMessageFor(model => model.BasePriceEnabled)
            </td>
        </tr>
        <tr id="pnlBasePriceBaseAmount" class="base-price">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BasePriceBaseAmount)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BasePriceBaseAmount, new { small = true })
                @Html.DropDownListFor(model => model.BasePriceMeasureUnit, Model.AvailableMeasureUnits, new { @class = "autowidth", style = "width:100px" })
            </td>
        </tr>
        <tr id="pnlBasePriceAmount" class="base-price">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BasePriceAmount)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BasePriceAmount, new { small = true })
                <span id="BasePriceAmountInfo" class="muted">@*@T("Admin.Catalog.Products.Fields.BasePriceInfo")*@</span>
            </td>
        </tr>
        <tr id="pnlBasePriceAmountHint" class="base-price">
            <td class="adminTitle">
                &nbsp;
            </td>
            <td class="adminData">
                <div class="alert alert-info">
                    @T("Admin.Products.BasePrice.Hint")
                </div>
            </td>
        </tr>
        
    </table>

    <div id="TierPriceContainer" style="margin-top:30px;">
        <h3>@T("Admin.Catalog.Products.TierPrices")</h3>

        @if (Model.Id > 0)
        {
            <script>
				function onTierPriceEdit(e) {
                    $(e.form).find('#Store').select2('val', e.dataItem['StoreId']);
                    $(e.form).find('#CustomerRole').select2('val', e.dataItem['CustomerRoleId']);
                    $(e.form).find('#CalculationMethod').select2('val', e.dataItem['CalculationMethodId']);
                }
            </script>
			
			@(Html.Telerik().Grid<ProductModel.TierPriceModel>()
				.Name("tierprices-grid")
				.DataKeys(keys =>
				{
					keys.Add(x => x.Id);
				})
				.DataBinding(dataBinding =>
				{
					dataBinding.Ajax()
						.Select("TierPriceList", "Product", new { productId = Model.Id })
						.Insert("TierPriceInsert", "Product", new { productId = Model.Id })
						.Update("TierPriceUpdate", "Product")
						.Delete("TierPriceDelete", "Product");
				})
				.Columns(columns =>
				{
					columns.Bound(x => x.Quantity)
						.Centered()
						.Width(120);
					columns.Bound(x => x.Price1)
						.Format("{0:0.00}")
						.Width(120)
						.RightAlign();
					columns.Bound(x => x.CalculationMethod);
					columns.Bound(x => x.Store);
					columns.Bound(x => x.CustomerRole);
					columns.Command(commands =>
					{
						commands.Edit().Localize(T);
						commands.Delete().Localize(T);
					})
					.Width(180);
				})
				.ToolBar(commands => commands.Insert())
				.ClientEvents(events => events.OnEdit("onTierPriceEdit"))
				.EnableCustomBinding(true))
        }
        else
        {
            <div class="alert alert-danger">
                @T("Admin.Catalog.Products.TierPrices.SaveBeforeEdit")
            </div>
        }
    </div>
</div>