@using Telerik.Web.Mvc.UI;
@using SmartStore.Core.Search.Facets;
@model ProductAttributeModel

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.SmartStore().TabStrip().Name("productattribute-edit").Items(x =>
{
	x.Add().Text(T("Common.General").Text).Content(TabInfo()).Selected(true);
	x.Add().Text(T("Admin.Catalog.Attributes.OptionsSets").Text).Content(TabOptionsSets());

	EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "productattribute-edit", this.Html, this.Model));
})

@helper TabInfo()
{
	if (Model.Id != 0)
	{
		<table class="adminContent">
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Id)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.Id)
					@Html.ValidationMessageFor(model => model.Id)
				</td>
			</tr>
		</table>

		<p></p>
	}

	@(Html.LocalizedEditor<ProductAttributeModel, ProductAttributeLocalizedModel>("productattribute-localized",
		@<table class="adminContent">
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Locales[item].Name)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => Model.Locales[item].Name)
					@Html.ValidationMessageFor(model => model.Locales[item].Name)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Locales[item].Alias)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => Model.Locales[item].Alias)
					@Html.ValidationMessageFor(model => model.Locales[item].Alias)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Locales[item].Description)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.Locales[item].Description, Html.RichEditorFlavor())
					@Html.ValidationMessageFor(model => model.Locales[item].Description)
				</td>
			</tr>
			<tr>
				<td colspan="2">
					@Html.HiddenFor(model => model.Locales[item].LanguageId)
				</td>
			</tr>
		</table>
			,
		@<table class="adminContent">
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Name)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.Name)
					@Html.ValidationMessageFor(model => model.Name)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Alias)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.Alias)
					@Html.ValidationMessageFor(model => model.Alias)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Description)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.Description, Html.RichEditorFlavor())
					@Html.ValidationMessageFor(model => model.Description)
				</td>
			</tr>
		</table>
	))

	<table id="ProductAttributeTable" class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.DisplayOrder)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.DisplayOrder)
				@Html.ValidationMessageFor(model => model.DisplayOrder)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AllowFiltering)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.AllowFiltering)
				@Html.ValidationMessageFor(model => model.AllowFiltering)
			</td>
		</tr>
		<tr class="allow-filtering">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.FacetTemplateHint)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(model => model.FacetTemplateHint, 
					Model.FacetTemplateHint.ToSelectList().Where(x => x.Value.ToInt() != (int)FacetTemplateHint.NumericRange).ToList())
				@Html.ValidationMessageFor(model => model.FacetTemplateHint)
			</td>
		</tr>
	</table>

	<script type="text/javascript">
		$(document).ready(function () {

			// allow filtering changed
			$('#@(Html.FieldIdFor(x => x.AllowFiltering))').change(function () {
				$('#ProductAttributeTable').find('.allow-filtering').toggle($(this).is(':checked'));
			}).trigger('change');

		});
	</script>
}

@helper TabOptionsSets()
{
	if (Model.Id > 0)
	{
		<table class="adminContent">
			<tr>
				<td>
					@(Html.Telerik().Grid<ProductAttributeOptionsSetModel>()
						.Name("productattributeoptionsset-grid")
						.DataKeys(keys =>
						{
							keys.Add(x => x.Id);
							keys.Add(x => x.ProductAttributeId).RouteKey("productAttributeId");
						})
						.ToolBar(commands => commands.Insert())
						.Columns(columns =>
						{
							columns.Bound(x => x.Name);
							columns.Command(commands =>
							{
								commands.Edit().Localize(T);
								commands.Delete().Localize(T);
							})
							.Width(120);
						})
						.DataBinding(dataBinding => dataBinding.Ajax()
							.Select("OptionsSetList", "ProductAttribute", new { productAttributeId = Model.Id })
							.Insert("OptionsSetInsert", "ProductAttribute", new { productAttributeId = Model.Id })
							.Update("OptionsSetUpdate", "ProductAttribute")
							.Delete("OptionsSetDelete", "ProductAttribute")
						)
						.EnableCustomBinding(true)
						.DetailView(details => details.ClientTemplate(
							Html.Telerik().Grid<ProductAttributeOptionModel>()
								.Name("productattributeoptions-grid<#= Id #>")
								.DataKeys(keys =>
								{
									keys.Add(x => x.Id);
									keys.Add(x => x.ProductAttributeOptionsSetId).RouteKey("optionsSetId");
								})
								.ToolBar(commands => commands.Custom()
									.Name("insert-option")
									.HtmlAttributes(new { href = "#", @class = "btn btn-link insert-option" })
									.Text("<i class='fa fa-plus'></i>&nbsp;" + @T("Common.Options.Add"))
								)
								.Columns(columns =>
								{
									columns.Bound(x => x.Name)
										.ClientTemplate(@Html.VariantAttributeValueName());
									columns.Bound(x => x.Alias);
									columns.Bound(x => x.LinkedProductName)
										.ClientTemplate(@Html.LabeledProductName("LinkedProductId", "LinkedProductName", "LinkedProductTypeName", "LinkedProductTypeLabelHint"));
									columns.Bound(x => x.PriceAdjustmentString)
										.Centered();
									columns.Bound(x => x.WeightAdjustmentString)
										.Centered();
									columns.Bound(x => x.IsPreSelected)
										.ClientTemplate(@Html.SymbolForBool("IsPreSelected"))
										.Centered();
									columns.Bound(x => x.DisplayOrder)
										.Centered();
									columns.Bound(x => x.Id)
										.Width(220)
										.Centered()
										.Title("")
										.ClientTemplate(
											"<a href='" + @Url.Content("~/Admin/ProductAttribute/OptionEditPopup/") + "<#= Id #>?btnId=btnOptionRefresh' class='t-button edit-option'>" + @T("Admin.Common.Edit") + "</a>" +
											"<a href='" + @Url.Action("OptionDelete", "ProductAttribute") + "/<#= Id #>?btnId=btnOptionRefresh' class='t-button delete-option'>" + @T("Admin.Common.Delete") + "</a>");
								})
								.DataBinding(dataBinding => dataBinding.Ajax()
									.Select("OptionsSetListDetails", "ProductAttribute", new { id = "<#= Id #>" })
								)
								.ClientEvents(events => events.OnDataBound("onDataBoundOptionsGrid"))
								.ToHtmlString()
						)))
				</td>
			</tr>
		</table>

		<input type="button" id="btnOption" name="btnOption" style="display: none" />
		<input type="button" id="btnOptionRefresh" name="btnOptionRefresh" value="" style="display: none" />

		<script type="text/javascript">
			$(document).ready(function () {
				// refresh options set grid
                $('#btnRefresh').click(function () {
                	$('#productattributeoptionsset-grid').data('tGrid').ajaxRequest();
                    return false;
                });

				// refresh options set child grid
                $(document).on('click', 'input[id=btnOptionRefresh]', function () {
                	$('#productattributeoptions-grid' + $(this).val()).data('tGrid').ajaxRequest();
                	return false;
                });

				// add option
                $(document).on('click', 'a.insert-option', function (e) {
                	e.preventDefault();
                	var id = $(this).closest('.t-grid').attr('id').replace('productattributeoptions-grid', '');
					$('#btnOptionRefresh').val(id);
                	openPopup('@Url.Content("~/Admin/ProductAttribute/OptionCreatePopup/")' + id + '?&btnId=btnOptionRefresh');
                	return false;
                });

				// edit option
				$(document).on('click', 'a.edit-option', function (e) {
					e.preventDefault();
					var id = $(this).closest('.t-grid').attr('id').replace('productattributeoptions-grid', '');
					$('#btnOptionRefresh').val(id);
					openPopup($(this).attr('href'));
					return false;
				});

				// delete option
				$(document).on('click', 'a.delete-option', function (e) {
					e.preventDefault();
					var grid = $(this).closest('.t-grid').data('tGrid');
					$(this).doAjax({
						type: 'POST',
						ask: '@T("Admin.Common.AskToProceed")',
						callbackSuccess: function () {
							grid.ajaxRequest();
						}
					});
					return false;
				});
			});

			function onDataBoundOptionsGrid() {
				$('div[id^=productattributeoptions-grid]').find('.btn-link').removeClass('t-button');
			}
		</script>
	}
	else
	{
		<div class="alert alert-warning">
			@T("Admin.SaveBeforeEdit")
		</div>
	}
}
