@model dynamic
@using Telerik.Web.Mvc.UI;
@using System.Linq;
@{
    //page title
    ViewBag.Title = T("Admin.System.ScheduleTasks").Text;

	var runJobUrl = Url.Content("~/Admin/ScheduleTask/RunJob/");
}
<div class="section-header">
    <div class="title">
		<i class="fa fa-clock-o"></i>
        @T("Admin.System.ScheduleTasks")
    </div>
</div>

<div class="alert alert-info fade in">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    @T("Admin.System.ScheduleTasks.RestartApplication")
</div>

<table class="adminContent">
    <tr>
        <td>
            @(Html.Telerik().Grid<ScheduleTaskModel>()
                    .Name("schedule-tasks-grid")
                    .DataKeys(x =>
                    {
                        x.Add(y => y.Id).RouteKey("Id");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Name).ClientTemplate("<strong><#= Name #></strong>");
                        columns.Bound(x => x.Seconds);
                        columns.Bound(x => x.Enabled)
                            .ClientTemplate(@Html.SymbolForBool("Enabled"))
                            .Centered()
                            .Width(100);
                        columns.Bound(x => x.StopOnError)
                            .ClientTemplate(@Html.SymbolForBool("StopOnError"))
                            .Centered()
                            .Width(100);
						//columns.Bound(x => x.LastStartUtc).ReadOnly();
						//columns.Bound(x => x.LastEndUtc).ReadOnly();
						//columns.Bound(x => x.LastSuccessUtc).ReadOnly();
						columns.Bound(x => x.Id)
							.ClientTemplate("<# if (LastStartUtc.length) {#><div><span>" + @T("Admin.System.ScheduleTasks.LastStart") + ":</span> <span class='muted'><#= LastStartUtc #></span></div><# } #>" +
											"<# if (!LastEndUtc && !IsRunning) {#><div><span>" + @T("Admin.System.ScheduleTasks.LastStart") + ":</span> <span class='muted'>" + @T("Common.Never") + "</span></div><# } #>" +
											"<# if (Duration.length) {#><div><span>" + @T("Common.Duration") + ":</span> <span class='muted'><#= Duration #></span></div><# } #>" +
											"<# if (LastError.length) {#><div class='text-error'><strong>" + @T("Common.Error") + ":</strong> <span><#= LastError #></span></div><# } #>" +								
											"<# if (LastSuccessUtc != LastEndUtc) {#><div><span>" + @T("Admin.System.ScheduleTasks.LastSuccess") + ":</span> <span class='muted'><#= LastSuccessUtc #></span></div><# } #>" +
											"<# if (!IsRunning) {#><a href='" + @runJobUrl + "<#= Id #>' class='btn btn-success' style='margin-top: 12px'><i class='fa fa-play'></i> " + @T("Admin.System.ScheduleTasks.RunNow") + "</a><# } #>" +
											"<# if (IsRunning) {#><div style='margin-top: 12px'><i class='fa fa-refresh fa-spin'></i> " + @T("Admin.System.ScheduleTasks.RunNow.IsRunning") + "</div><# } #>")
							.Title(T("Common.Execution").Text)
							.ReadOnly();
                        columns.Command(commands =>
                        {
                            commands.Edit().Text(T("Admin.Common.Edit").Text);
                        }).Width(180).Title(T("Admin.Common.Edit").Text);

                    })
                    .Editable(x =>
                    {
                        x.Mode(GridEditMode.InLine);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax().Select("List", "ScheduleTask")
                            .Update("TaskUpdate", "ScheduleTask");
                    })
                    .ClientEvents(x => x.OnError("grid_onError"))
                    .EnableCustomBinding(true))
            <script type="text/javascript">
                function grid_onError(e) {
                    alert(e.XMLHttpRequest.responseText);
                    e.preventDefault();
                }
            </script>
        </td>
    </tr>
</table>

