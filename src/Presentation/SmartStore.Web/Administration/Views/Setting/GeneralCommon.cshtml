@model GeneralCommonSettingsModel
           
@using Telerik.Web.Mvc.UI;
@using SmartStore.Core.Domain.Customers;
@using SmartStore.Core.Domain.Security;
@using SmartStore.Web.Framework.UI;

@{
    ViewBag.Title = T("Admin.Configuration.Settings.GeneralCommon").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <i class="fa fa-cogs"></i>
            @T("Admin.Configuration.Settings.GeneralCommon")
        </div>
        <div class="options">
            <button type="submit" name="save" value="save" class="btn btn-primary"><i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")</button>
        </div>
    </div>
        
    
<script type="text/javascript">
	$(document).ready(function () {

		$("#@Html.FieldIdFor(model => model.StoreInformationSettings.StoreClosed)").click(toggleStoreClosed);
		$("#@Html.FieldIdFor(model => model.CaptchaSettings.Enabled)").change(function () {
			$('#SecuritySettingTable').find('.captcha-setting').toggle($(this).is(':checked'));
		}).trigger('change');
		$("#@Html.FieldIdFor(model => model.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled)").click(toggleSeoLanguageUrls);

		toggleStoreClosed();
		toggleSeoLanguageUrls();

		$("#@Html.FieldIdFor(model => model.SocialSettings.ShowSocialLinksInFooter)").change(function () {
			$('#SocialLinkTable').find('.social-link').toggle($(this).is(':checked'));
		}).trigger('change');

		// test creation of SEO names
		$('#TestSeoNameCreationButton').click(function () {
			$(this).closest('form').doAjax({
				type: 'POST',
				url: '@Url.Action("TestSeoNameCreation")',
				callbackSuccess: function (resp) {
					$('#TestSeoNameCreationResult').text(resp);
				}
			});
		});
	});

	function toggleStoreClosed() {
		if ($('#@Html.FieldIdFor(model => model.StoreInformationSettings.StoreClosed)').is(':checked')) {
			$('#pnlStoreClosedAllowForAdmins').show();
		}
		else {
			$('#pnlStoreClosedAllowForAdmins').hide();
		}
	}

	function toggleSeoLanguageUrls() {
		if ($('#@Html.FieldIdFor(model => model.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled)').is(':checked')) {
			$('#pnlDefaultLanguageRedirectBehaviour').show();
			$('#pnlInvalidLanguageRedirectBehaviour').show();
		}
		else {
			$('#pnlDefaultLanguageRedirectBehaviour').hide();
			$('#pnlInvalidLanguageRedirectBehaviour').hide();
		}
	}
</script>

    Html.RenderAction("StoreScopeConfiguration", "Setting");

    @Html.ValidationSummary(false)
    
    @(Html.SmartStore().TabStrip().Name("generalsettings-edit").Items(x =>
     {
         x.Add().Text(T("Common.General").Text).Content(@TabStoreInformationSettings()).Selected(true);
         x.Add().Text(T("Admin.Configuration.Settings.GeneralCommon.SEOSettings").Text).Content(@TabSEOSettings());
         x.Add().Text(T("Admin.Configuration.Settings.GeneralCommon.SecuritySettings").Text).Content(@TabSecuritySettings());
         x.Add().Text(T("Admin.Configuration.Settings.GeneralCommon.LocalizationSettings").Text).Content(TabLocalizationSettings());
         x.Add().Text(T("Admin.Configuration.Settings.GeneralCommon.PdfSettings").Text).Content(@TabPdfSettings());
         x.Add().Text(T("Admin.Configuration.Settings.GeneralCommon.CompanyInformationSettings").Text).Content(@TabCompanyInformationSettings());
         x.Add().Text(T("Admin.Configuration.Settings.GeneralCommon.ContactDataSettings").Text).Content(@TabContactDataSettings());
         x.Add().Text(T("Admin.Configuration.Settings.GeneralCommon.SocialSettings").Text).Content(@TabSocialSettings());
     }))
}
@helper TabStoreInformationSettings()
    {
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.StoreInformationSettings.StoreClosed)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.StoreInformationSettings.StoreClosed)
                @Html.ValidationMessageFor(model => model.StoreInformationSettings.StoreClosed)
            </td>
        </tr>
        <tr id="pnlStoreClosedAllowForAdmins">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.StoreInformationSettings.StoreClosedAllowForAdmins)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.StoreInformationSettings.StoreClosedAllowForAdmins)
                @Html.ValidationMessageFor(model => model.StoreInformationSettings.StoreClosedAllowForAdmins)
            </td>
        </tr>
    </table>
}
@helper TabSEOSettings()
    {
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SeoSettings.PageTitleSeparator)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SeoSettings.PageTitleSeparator)
                @Html.ValidationMessageFor(model => model.SeoSettings.PageTitleSeparator)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SeoSettings.PageTitleSeoAdjustment)
            </td>
            <td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.SeoSettings.PageTitleSeoAdjustment)
                @Html.DropDownListForEnum(model => model.SeoSettings.PageTitleSeoAdjustment )
                @Html.ValidationMessageFor(model => model.SeoSettings.PageTitleSeoAdjustment)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SeoSettings.DefaultTitle)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SeoSettings.DefaultTitle)
                @Html.ValidationMessageFor(model => model.SeoSettings.DefaultTitle)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SeoSettings.DefaultMetaKeywords)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SeoSettings.DefaultMetaKeywords)
                @Html.ValidationMessageFor(model => model.SeoSettings.DefaultMetaKeywords)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SeoSettings.DefaultMetaDescription)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SeoSettings.DefaultMetaDescription)
                @Html.ValidationMessageFor(model => model.SeoSettings.DefaultMetaDescription)
            </td>
        </tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SeoSettings.MetaRobotsContent)
			</td>
			<td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.SeoSettings.MetaRobotsContent)
				@Html.DropDownListFor(model => model.SeoSettings.MetaRobotsContent, new List<SelectListItem>
				{
					new SelectListItem { Text = "index", Value = "index" },
					new SelectListItem { Text = "noindex", Value = "noindex" },
					new SelectListItem { Text = "index, follow", Value = "index, follow" },
					new SelectListItem { Text = "index, nofollow", Value = "index, nofollow" },
					new SelectListItem { Text = "noindex, follow", Value = "noindex, follow" },
					new SelectListItem { Text = "noindex, nofollow", Value = "noindex, nofollow" }
				}, T("Common.Unspecified"))
				@Html.ValidationMessageFor(model => model.SeoSettings.MetaRobotsContent)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SeoSettings.CanonicalUrlsEnabled)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SeoSettings.CanonicalUrlsEnabled)
                @Html.ValidationMessageFor(model => model.SeoSettings.CanonicalUrlsEnabled)
            </td>
        </tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SeoSettings.CanonicalHostNameRule)
			</td>
			<td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.SeoSettings.CanonicalHostNameRule)
				@Html.DropDownListForEnum(model => model.SeoSettings.CanonicalHostNameRule)
				@Html.ValidationMessageFor(model => model.SeoSettings.CanonicalHostNameRule)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SeoSettings.ExtraRobotsDisallows)
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.SeoSettings.ExtraRobotsDisallows, new { @class = "input-large", style = "height:250px" })
                @Html.ValidationMessageFor(model => model.SeoSettings.ExtraRobotsDisallows)
            </td>
        </tr>
		<tr>
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">@T("Admin.System.SeNames")</div>
				</div>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SeoSettings.ConvertNonWesternChars)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.SeoSettings.ConvertNonWesternChars)
				@Html.ValidationMessageFor(model => model.SeoSettings.ConvertNonWesternChars)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SeoSettings.AllowUnicodeCharsInUrls)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.SeoSettings.AllowUnicodeCharsInUrls)
				@Html.ValidationMessageFor(model => model.SeoSettings.AllowUnicodeCharsInUrls)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SeoSettings.SeoNameCharConversion)
			</td>
			<td class="adminData">
				@Html.TextAreaFor(model => model.SeoSettings.SeoNameCharConversion, new { @class = "input-large", style = "height:250px" })
				@Html.ValidationMessageFor(model => model.SeoSettings.SeoNameCharConversion)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SeoSettings.TestSeoNameCreation)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.SeoSettings.TestSeoNameCreation)

				<button id="TestSeoNameCreationButton" type="button" class="btn">
					<i class="fa fa-refresh"></i>&nbsp;@T("Admin.Common.Check")
				</button>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				&nbsp;
			</td>
			<td id="TestSeoNameCreationResult" class="adminData">
			</td>
		</tr>
    </table>
}
@helper TabSecuritySettings()
    {
		<table id="SecuritySettingTable" class="adminContent">
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.SecuritySettings.EncryptionKey)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.SecuritySettings.EncryptionKey)
					@Html.ValidationMessageFor(model => model.SecuritySettings.EncryptionKey)
					<input type="submit" name="changeencryptionkey" value="@T("Admin.Common.Change")" id="changeencryptionkey" class="btn" />
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.SecuritySettings.AdminAreaAllowedIpAddresses)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.SecuritySettings.AdminAreaAllowedIpAddresses)
					@Html.ValidationMessageFor(model => model.SecuritySettings.AdminAreaAllowedIpAddresses)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.SecuritySettings.HideAdminMenuItemsBasedOnPermissions)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.SecuritySettings.HideAdminMenuItemsBasedOnPermissions)
					@Html.ValidationMessageFor(model => model.SecuritySettings.HideAdminMenuItemsBasedOnPermissions)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.SecuritySettings.ForceSslForAllPages)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.SecuritySettings.ForceSslForAllPages)
					@Html.ValidationMessageFor(model => model.SecuritySettings.ForceSslForAllPages)
				</td>
			</tr>
			<tr>
				<td colspan="2">&nbsp;</td>
			</tr>
			<tr>
				<td colspan="2">
					<div class="alert alert-info">
						@T("Admin.Configuration.Settings.General.Common.Captcha.Hint")
					</div>
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.Enabled)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.Enabled)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.Enabled)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnLoginPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnLoginPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnLoginPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnRegistrationPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnRegistrationPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnRegistrationPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnContactUsPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnContactUsPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnContactUsPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnEmailWishlistToFriendPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnEmailWishlistToFriendPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnEmailWishlistToFriendPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnEmailProductToFriendPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnEmailProductToFriendPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnEmailProductToFriendPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnAskQuestionPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnAskQuestionPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnAskQuestionPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnBlogCommentPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnBlogCommentPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnBlogCommentPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnNewsCommentPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnNewsCommentPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnNewsCommentPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ShowOnProductReviewPage)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ShowOnProductReviewPage)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ShowOnProductReviewPage)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ReCaptchaPublicKey)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ReCaptchaPublicKey)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ReCaptchaPublicKey)
				</td>
			</tr>
			<tr class="captcha-setting">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CaptchaSettings.ReCaptchaPrivateKey)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CaptchaSettings.ReCaptchaPrivateKey)
					@Html.ValidationMessageFor(model => model.CaptchaSettings.ReCaptchaPrivateKey)
				</td>
			</tr>
		</table>
}
@helper TabPdfSettings()
    {
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PdfSettings.Enabled)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.PdfSettings.Enabled)
                @Html.ValidationMessageFor(model => model.PdfSettings.Enabled)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PdfSettings.LetterPageSizeEnabled)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.PdfSettings.LetterPageSizeEnabled)
                @Html.ValidationMessageFor(model => model.PdfSettings.LetterPageSizeEnabled)
            </td>
        </tr>        
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PdfSettings.LogoPictureId)
            </td>
            <td class="adminData" id="pdf-logo-picture">
                @Html.SettingEditorFor(model => model.PdfSettings.LogoPictureId, "#pdf-logo-picture", new { transientUpload = true })
                @Html.ValidationMessageFor(model => model.PdfSettings.LogoPictureId)
            </td>
        </tr>
		<tr>
			<td class="adminSeparator" colspan="2">
				<hr />
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.PdfSettings.AttachOrderPdfToOrderPlacedEmail)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.PdfSettings.AttachOrderPdfToOrderPlacedEmail)
				@Html.ValidationMessageFor(model => model.PdfSettings.AttachOrderPdfToOrderPlacedEmail)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.PdfSettings.AttachOrderPdfToOrderCompletedEmail)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.PdfSettings.AttachOrderPdfToOrderCompletedEmail)
				@Html.ValidationMessageFor(model => model.PdfSettings.AttachOrderPdfToOrderCompletedEmail)
			</td>
		</tr>
    </table>
}
@helper TabLocalizationSettings()
{
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled)
                @Html.ValidationMessageFor(model => model.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled)
            </td>
        </tr>
        <tr id="pnlDefaultLanguageRedirectBehaviour">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LocalizationSettings.DefaultLanguageRedirectBehaviour)
            </td>
            <td class="adminData">
                @Html.DropDownListForEnum(model => model.LocalizationSettings.DefaultLanguageRedirectBehaviour)
                @Html.ValidationMessageFor(model => model.LocalizationSettings.DefaultLanguageRedirectBehaviour)
            </td>
        </tr>
        <tr id="pnlInvalidLanguageRedirectBehaviour">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LocalizationSettings.InvalidLanguageRedirectBehaviour)
            </td>
            <td class="adminData">
                @Html.DropDownListForEnum(model => model.LocalizationSettings.InvalidLanguageRedirectBehaviour)
                @Html.ValidationMessageFor(model => model.LocalizationSettings.InvalidLanguageRedirectBehaviour)
            </td>
        </tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.LocalizationSettings.UseImagesForLanguageSelection)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.LocalizationSettings.UseImagesForLanguageSelection)
				@Html.ValidationMessageFor(model => model.LocalizationSettings.UseImagesForLanguageSelection)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LocalizationSettings.DetectBrowserUserLanguage)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.LocalizationSettings.DetectBrowserUserLanguage)
                @Html.ValidationMessageFor(model => model.LocalizationSettings.DetectBrowserUserLanguage)
            </td>
        </tr>
    </table>
}
@helper TabCompanyInformationSettings()
    {
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.CompanyName)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.CompanyName)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.CompanyName)
            </td>
        </tr>
        <tr>
			<td class="adminSeparator" colspan="2">
				<hr />
			</td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.Salutation)
            </td>
            <td class="adminData">
                @Html.SettingOverrideCheckbox(model => model.CompanyInformationSettings.Salutation)
                @Html.DropDownListFor(model => model.CompanyInformationSettings.Salutation, Model.CompanyInformationSettings.Salutations)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.Salutation)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.Title)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.Title)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.Title)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.Firstname)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.Firstname)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.Firstname)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.Lastname)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.Lastname)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.Lastname)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.CompanyManagementDescription)
            </td>
            <td class="adminData">
                @Html.SettingOverrideCheckbox(model => model.CompanyInformationSettings.CompanyManagementDescription)
                @Html.DropDownListFor(model => model.CompanyInformationSettings.CompanyManagementDescription, Model.CompanyInformationSettings.ManagementDescriptions)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.CompanyManagementDescription)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.CompanyManagement)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.CompanyManagement)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.CompanyManagement)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.Street)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.Street)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.Street)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.Street2)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.Street2)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.Street2)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.ZipCode)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.ZipCode)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.ZipCode)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.City)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.City)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.City)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.CountryId)
            </td>
            <td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.CompanyInformationSettings.CountryId)
                @Html.DropDownListFor(model => model.CompanyInformationSettings.CountryId, Model.CompanyInformationSettings.AvailableCountries, new { style = "min-width:289px" } )
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.CountryId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.Region )
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.Region)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.Region)
            </td>
        </tr>
        <tr>
			<td class="adminSeparator" colspan="2">
				<hr />
			</td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.VatId)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.VatId)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.VatId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.CommercialRegister)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.CommercialRegister)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.CommercialRegister)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CompanyInformationSettings.TaxNumber)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.CompanyInformationSettings.TaxNumber)
                @Html.ValidationMessageFor(model => model.CompanyInformationSettings.TaxNumber)
            </td>
        </tr>
    </table>
}

@helper TabContactDataSettings()
    {
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ContactDataSettings.CompanyTelephoneNumber)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ContactDataSettings.CompanyTelephoneNumber)
                @Html.ValidationMessageFor(model => model.ContactDataSettings.CompanyTelephoneNumber)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ContactDataSettings.HotlineTelephoneNumber)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ContactDataSettings.HotlineTelephoneNumber)
                @Html.ValidationMessageFor(model => model.ContactDataSettings.HotlineTelephoneNumber)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ContactDataSettings.MobileTelephoneNumber)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ContactDataSettings.MobileTelephoneNumber)
                @Html.ValidationMessageFor(model => model.ContactDataSettings.MobileTelephoneNumber)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ContactDataSettings.CompanyFaxNumber)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ContactDataSettings.CompanyFaxNumber)
                @Html.ValidationMessageFor(model => model.ContactDataSettings.CompanyFaxNumber)
            </td>
        </tr>
        <tr>
			<td class="adminSeparator" colspan="2">
				<hr />
			</td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ContactDataSettings.CompanyEmailAddress)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ContactDataSettings.CompanyEmailAddress)
                @Html.ValidationMessageFor(model => model.ContactDataSettings.CompanyEmailAddress)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ContactDataSettings.WebmasterEmailAddress)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ContactDataSettings.WebmasterEmailAddress)
                @Html.ValidationMessageFor(model => model.ContactDataSettings.WebmasterEmailAddress)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ContactDataSettings.SupportEmailAddress)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ContactDataSettings.SupportEmailAddress)
                @Html.ValidationMessageFor(model => model.ContactDataSettings.SupportEmailAddress)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ContactDataSettings.ContactEmailAddress)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ContactDataSettings.ContactEmailAddress)
                @Html.ValidationMessageFor(model => model.ContactDataSettings.ContactEmailAddress)
            </td>
        </tr>
        <tr>
			<td class="adminSeparator" colspan="2">
				<hr />
			</td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BankConnectionSettings.Bankname)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.BankConnectionSettings.Bankname)
                @Html.ValidationMessageFor(model => model.BankConnectionSettings.Bankname)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BankConnectionSettings.Bankcode)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.BankConnectionSettings.Bankcode)
                @Html.ValidationMessageFor(model => model.BankConnectionSettings.Bankcode)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BankConnectionSettings.AccountNumber)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.BankConnectionSettings.AccountNumber)
                @Html.ValidationMessageFor(model => model.BankConnectionSettings.AccountNumber)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BankConnectionSettings.AccountHolder)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.BankConnectionSettings.AccountHolder)
                @Html.ValidationMessageFor(model => model.BankConnectionSettings.AccountHolder)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BankConnectionSettings.Iban)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.BankConnectionSettings.Iban)
                @Html.ValidationMessageFor(model => model.BankConnectionSettings.Iban)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BankConnectionSettings.Bic)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.BankConnectionSettings.Bic)
                @Html.ValidationMessageFor(model => model.BankConnectionSettings.Bic)
            </td>
        </tr>
    </table>
}

@helper TabSocialSettings()
{
    <table id="SocialLinkTable" class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SocialSettings.ShowSocialLinksInFooter)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SocialSettings.ShowSocialLinksInFooter)
                @Html.ValidationMessageFor(model => model.SocialSettings.ShowSocialLinksInFooter)
            </td>
        </tr>
        <tr class="social-link">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SocialSettings.FacebookLink)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SocialSettings.FacebookLink)
                @Html.ValidationMessageFor(model => model.SocialSettings.FacebookLink)
            </td>
        </tr>
        <tr class="social-link">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SocialSettings.GooglePlusLink)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SocialSettings.GooglePlusLink)
                @Html.ValidationMessageFor(model => model.SocialSettings.GooglePlusLink)
            </td>
        </tr>
        <tr class="social-link">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SocialSettings.TwitterLink)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SocialSettings.TwitterLink)
                @Html.ValidationMessageFor(model => model.SocialSettings.TwitterLink)
            </td>
        </tr>
        <tr class="social-link">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SocialSettings.PinterestLink)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SocialSettings.PinterestLink)
                @Html.ValidationMessageFor(model => model.SocialSettings.PinterestLink)
            </td>
        </tr>
        <tr class="social-link">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SocialSettings.YoutubeLink)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.SocialSettings.YoutubeLink)
                @Html.ValidationMessageFor(model => model.SocialSettings.YoutubeLink)
            </td>
        </tr>
    </table>
}