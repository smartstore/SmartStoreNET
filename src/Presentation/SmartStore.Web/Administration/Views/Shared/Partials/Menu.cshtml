@model TreeNode<SmartStore.Web.Framework.UI.MenuItem>

@using SmartStore.Services.Security;
@using SmartStore.Core.Domain.Security;
@using SmartStore.Collections;
@using SmartStore.Web.Framework.UI;

@functions {
    public string GetNodeLink(TreeNode<SmartStore.Web.Framework.UI.MenuItem> node) 
    {
        if (node.HasChildren) 
        {
            return "javascript:void(0)";
        }
        return node.Value.GenerateUrl(this.ViewContext.RequestContext);
    }

    public string GetItemText(TreeNode<SmartStore.Web.Framework.UI.MenuItem> node)
    {
        string result = null;
        
        if (node.Value.ResKey.HasValue())
        {
            result = T(node.Value.ResKey).ToHtmlString();
		}

		if (!result.HasValue() || result.IsCaseInsensitiveEqual(node.Value.ResKey))
        {
            result = node.Value.Text;
        }

        return result;
    }
}

<ul class="navbar-nav nav list-unstyled">
@{
    foreach (var node in Model.Children)
    {
        var item = node.Value;

        if (!item.Visible)
        {
            continue;
        }
        
        var imageUrl = item.ImageUrl;
        if (!imageUrl.HasValue())
        {
            imageUrl = "~/Administration/Content/images/ap-default-white.png";
        }

        string itemText = GetItemText(node);

        if (ViewBag.SelectedMenuItem == itemText)
        {
            //item.Selected = true;
        }

        var itemUrl = GetNodeLink(node);

        <li data-id="@item.Id" @Html.Attr("class", "dropdown", node.HasChildren)>
			<a href="@itemUrl" data-target="#" @Html.Attr("class", "dropdown-toggle", node.HasChildren)>
				@if (item.Icon.HasValue())
				{
					<i class="fa fa-fw fa-@item.Icon"></i>
				}
				else
				{
					<img class="sm-icon" src="@Url.Content(imageUrl)" alt="" />
				}
				<span class="navbar-label">@itemText</span>
			</a>
            @if (node.HasChildren)
            {
                @CreateDropdown(node.Children, true)
            }
        </li>
        
    }   
}

</ul>


@helper CreateDropdown(IEnumerable<TreeNode<SmartStore.Web.Framework.UI.MenuItem>> nodes, bool isRoot)
{
    var isFirst = true;
	var hasIcons = nodes.Any(x => x.Value.Icon.HasValue());
    
    <ul class='dropdown-menu'>
    @foreach (var node in nodes)
    {
        var item = node.Value;

        if (!item.Visible)
        {
            continue;
        }
        
        string itemText = GetItemText(node);

        if (item.IsGroupHeader)
        {
            if (!isFirst)
            {
                <li class="divider"></li>
            }
            if (item.Text.HasValue() && item.Text != "[SKIP]")
            {
                <li data-id="@item.Id" class="nav-header">@itemText</li>
            }
            isFirst = false;
            continue;
        }

        string liClass = null;
        if (isRoot)
        {
			liClass = ""; //"drop-list-item";
            if (node.HasChildren)
            {
                liClass += " dropdown-submenu";
            }
        }
        <li data-id="@item.Id" class='@liClass'>
            <a href="@GetNodeLink(node)">
				@if (hasIcons)
				{
					var iconClass = "fa fa-fw";
					if (node.Value.Icon.HasValue())
					{
						iconClass += " fa-" + node.Value.Icon;
					}
					<i class='@iconClass'></i>
				}
                @itemText
            </a>
            @if (node.HasChildren)
            {
                @CreateDropdown(node.Children, false)
            }
        </li>
        
        isFirst = false;
    }
    </ul>
}

<script type="text/javascript">

    $(function () {
        $('.navbar ul.navbar-nav > li.dropdown').navbar({
    		menuAim: {
    			rowSelector: "li.dropdown-submenu",
    			submenuSelector: "*",
    		}
    	});
    });

</script>

