/*! X-editable - v1.4.1 
* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery
* http://github.com/vitalets/x-editable
* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */
(function (e) { var t = function (t, n) { this.options = e.extend({}, e.fn.editableform.defaults, n), this.$div = e(t), this.options.scope || (this.options.scope = this) }; t.prototype = { constructor: t, initInput: function () { this.input = this.options.input, this.value = this.input.str2value(this.options.value) }, initTemplate: function () { this.$form = e(e.fn.editableform.template) }, initButtons: function () { this.$form.find(".editable-buttons").append(e.fn.editableform.buttons) }, render: function () { this.$loading = e(e.fn.editableform.loading), this.$div.empty().append(this.$loading), this.initTemplate(), this.options.showbuttons ? this.initButtons() : this.$form.find(".editable-buttons").remove(), this.showLoading(), this.$div.triggerHandler("rendering"), this.initInput(), this.input.prerender(), this.$form.find("div.editable-input").append(this.input.$tpl), this.$div.append(this.$form), e.when(this.input.render()).then(e.proxy(function () { this.options.showbuttons || this.input.autosubmit(), this.$form.find(".editable-cancel").click(e.proxy(this.cancel, this)), this.input.error ? (this.error(this.input.error), this.$form.find(".editable-submit").attr("disabled", !0), this.input.$input.attr("disabled", !0), this.$form.submit(function (e) { e.preventDefault() })) : (this.error(!1), this.input.$input.removeAttr("disabled"), this.$form.find(".editable-submit").removeAttr("disabled"), this.input.value2input(this.value), this.$form.submit(e.proxy(this.submit, this))), this.$div.triggerHandler("rendered"), this.showForm(), this.input.postrender && this.input.postrender() }, this)) }, cancel: function () { this.$div.triggerHandler("cancel") }, showLoading: function () { var e, t; this.$form ? (e = this.$form.outerWidth(), t = this.$form.outerHeight(), e && this.$loading.width(e), t && this.$loading.height(t), this.$form.hide()) : (e = this.$loading.parent().width(), e && this.$loading.width(e)), this.$loading.show() }, showForm: function (e) { this.$loading.hide(), this.$form.show(), e !== !1 && this.input.activate(), this.$div.triggerHandler("show") }, error: function (t) { var n = this.$form.find(".control-group"), r = this.$form.find(".editable-error-block"), i; if (t === !1) n.removeClass(e.fn.editableform.errorGroupClass), r.removeClass(e.fn.editableform.errorBlockClass).empty().hide(); else { if (t) { i = t.split("\n"); for (var s = 0; s < i.length; s++) i[s] = e("<div>").text(i[s]).html(); t = i.join("<br>") } n.addClass(e.fn.editableform.errorGroupClass), r.addClass(e.fn.editableform.errorBlockClass).html(t).show() } }, submit: function (t) { t.stopPropagation(), t.preventDefault(); var n, r = this.input.input2value(); if (n = this.validate(r)) { this.error(n), this.showForm(); return } if (!this.options.savenochange && this.input.value2str(r) == this.input.value2str(this.value)) { this.$div.triggerHandler("nochange"); return } e.when(this.save(r)).done(e.proxy(function (e) { var t = typeof this.options.success == "function" ? this.options.success.call(this.options.scope, e, r) : null; if (t === !1) { this.error(!1), this.showForm(!1); return } if (typeof t == "string") { this.error(t), this.showForm(); return } t && typeof t == "object" && t.hasOwnProperty("newValue") && (r = t.newValue), this.error(!1), this.value = r, this.$div.triggerHandler("save", { newValue: r, response: e }) }, this)).fail(e.proxy(function (e) { this.error(typeof e == "string" ? e : e.responseText || e.statusText || "Unknown error!"), this.showForm() }, this)) }, save: function (t) { var n = this.input.value2submit(t); this.options.pk = e.fn.editableutils.tryParseJson(this.options.pk, !0); var r = typeof this.options.pk == "function" ? this.options.pk.call(this.options.scope) : this.options.pk, i = !!(typeof this.options.url == "function" || this.options.url && (this.options.send === "always" || this.options.send === "auto" && r)), s; if (i) return this.showLoading(), s = { name: this.options.name || "", value: n, pk: r }, typeof this.options.params == "function" ? s = this.options.params.call(this.options.scope, s) : (this.options.params = e.fn.editableutils.tryParseJson(this.options.params, !0), e.extend(s, this.options.params)), typeof this.options.url == "function" ? this.options.url.call(this.options.scope, s) : e.ajax(e.extend({ url: this.options.url, data: s, type: "POST" }, this.options.ajaxOptions)) }, validate: function (e) { e === undefined && (e = this.value); if (typeof this.options.validate == "function") return this.options.validate.call(this.options.scope, e) }, option: function (e, t) { e in this.options && (this.options[e] = t), e === "value" && this.setValue(t) }, setValue: function (e, t) { t ? this.value = this.input.str2value(e) : this.value = e, this.$form && this.$form.is(":visible") && this.input.value2input(this.value) } }, e.fn.editableform = function (n) { var r = arguments; return this.each(function () { var i = e(this), s = i.data("editableform"), o = typeof n == "object" && n; s || i.data("editableform", s = new t(this, o)), typeof n == "string" && s[n].apply(s, Array.prototype.slice.call(r, 1)) }) }, e.fn.editableform.Constructor = t, e.fn.editableform.defaults = { type: "text", url: null, params: null, name: null, pk: null, value: null, send: "auto", validate: null, success: null, ajaxOptions: null, showbuttons: !0, scope: null, savenochange: !1 }, e.fn.editableform.template = '<form class="form-inline editableform"><div class="control-group"><div><div class="editable-input"></div><div class="editable-buttons"></div></div><div class="editable-error-block"></div></div></form>', e.fn.editableform.loading = '<div class="editableform-loading"></div>', e.fn.editableform.buttons = '<button type="submit" class="editable-submit">ok</button><button type="button" class="editable-cancel">cancel</button>', e.fn.editableform.errorGroupClass = null, e.fn.editableform.errorBlockClass = "editable-error" })(window.jQuery), function (e) { e.fn.editableutils = { inherit: function (e, t) { var n = function () { }; n.prototype = t.prototype, e.prototype = new n, e.prototype.constructor = e, e.superclass = t.prototype }, setCursorPosition: function (e, t) { if (e.setSelectionRange) e.setSelectionRange(t, t); else if (e.createTextRange) { var n = e.createTextRange(); n.collapse(!0), n.moveEnd("character", t), n.moveStart("character", t), n.select() } }, tryParseJson: function (e, t) { if (typeof e == "string" && e.length && e.match(/^[\{\[].*[\}\]]$/)) if (t) try { e = (new Function("return " + e))() } catch (n) { } finally { return e } else e = (new Function("return " + e))(); return e }, sliceObj: function (t, n, r) { var i, s, o = {}; if (!e.isArray(n) || !n.length) return o; for (var u = 0; u < n.length; u++) { i = n[u], t.hasOwnProperty(i) && (o[i] = t[i]); if (r === !0) continue; s = i.toLowerCase(), t.hasOwnProperty(s) && (o[i] = t[s]) } return o }, getConfigData: function (t) { var n = {}; return e.each(t.data(), function (e, t) { if (typeof t != "object" || t && typeof t == "object" && (t.constructor === Object || t.constructor === Array)) n[e] = t }), n }, objectKeys: function (e) { if (Object.keys) return Object.keys(e); if (e !== Object(e)) throw new TypeError("Object.keys called on a non-object"); var t = [], n; for (n in e) Object.prototype.hasOwnProperty.call(e, n) && t.push(n); return t }, escape: function (t) { return e("<div>").text(t).html() }, itemsByValue: function (t, n, r) { if (!n || t === null) return []; r = r || "value"; var i = e.isArray(t), s = [], o = this; return e.each(n, function (n, u) { u.children ? s = s.concat(o.itemsByValue(t, u.children)) : i ? e.grep(t, function (e) { return e == (u && typeof u === "object" ? u[r] : u) }).length && s.push(u) : t == (u && typeof u === "object" ? u[r] : u) && s.push(u) }), s }, createInput: function (t) { var n, r, i, s = t.type; return s === "date" && (t.mode === "inline" ? e.fn.editabletypes.datefield ? s = "datefield" : e.fn.editabletypes.dateuifield && (s = "dateuifield") : e.fn.editabletypes.date ? s = "date" : e.fn.editabletypes.dateui && (s = "dateui"), s === "date" && !e.fn.editabletypes.date && (s = "combodate")), s === "wysihtml5" && !e.fn.editabletypes[s] && (s = "textarea"), typeof e.fn.editabletypes[s] == "function" ? (n = e.fn.editabletypes[s], r = this.sliceObj(t, this.objectKeys(n.defaults)), i = new n(r), i) : (e.error("Unknown type: " + s), !1) } } }(window.jQuery), function (e) { var t = function (e, t) { this.init(e, t) }, n = function (e, t) { this.init(e, t) }; t.prototype = { containerName: null, innerCss: null, init: function (n, r) { this.$element = e(n), this.options = e.extend({}, e.fn.editableContainer.defaults, r), this.splitOptions(), this.formOptions.scope = this.$element[0], this.initContainer(), this.$element.on("destroyed", e.proxy(function () { this.destroy() }, this)), e(document).data("editable-handlers-attached") || (e(document).on("keyup.editable", function (t) { t.which === 27 && e(".editable-open").editableContainer("hide") }), e(document).on("click.editable", function (n) { var r = e(n.target), i, s = [".editable-container", ".ui-datepicker-header", ".modal-backdrop", ".bootstrap-wysihtml5-insert-image-modal", ".bootstrap-wysihtml5-insert-link-modal"]; for (i = 0; i < s.length; i++) if (r.is(s[i]) || r.parents(s[i]).length) return; t.prototype.closeOthers(n.target) }), e(document).data("editable-handlers-attached", !0)) }, splitOptions: function () { this.containerOptions = {}, this.formOptions = {}; var t = e.fn[this.containerName].defaults; for (var n in this.options) n in t ? this.containerOptions[n] = this.options[n] : this.formOptions[n] = this.options[n] }, tip: function () { return this.container() ? this.container().$tip : null }, container: function () { return this.$element.data(this.containerName) }, call: function () { this.$element[this.containerName].apply(this.$element, arguments) }, initContainer: function () { this.call(this.containerOptions) }, renderForm: function () { this.$form.editableform(this.formOptions).on({ save: e.proxy(this.save, this), nochange: e.proxy(function () { this.hide("nochange") }, this), cancel: e.proxy(function () { this.hide("cancel") }, this), show: e.proxy(this.setPosition, this), rendering: e.proxy(this.setPosition, this), resize: e.proxy(this.setPosition, this), rendered: e.proxy(function () { this.$element.triggerHandler("shown") }, this) }).editableform("render") }, show: function (t) { this.$element.addClass("editable-open"), t !== !1 && this.closeOthers(this.$element[0]), this.innerShow(), this.tip().addClass("editable-container"), this.$form, this.$form = e("<div>"), this.tip().is(this.innerCss) ? this.tip().append(this.$form) : this.tip().find(this.innerCss).append(this.$form), this.renderForm() }, hide: function (e) { if (!this.tip() || !this.tip().is(":visible") || !this.$element.hasClass("editable-open")) return; this.$element.removeClass("editable-open"), this.innerHide(), this.$element.triggerHandler("hidden", e) }, innerShow: function () { }, innerHide: function () { }, toggle: function (e) { this.container() && this.tip() && this.tip().is(":visible") ? this.hide() : this.show(e) }, setPosition: function () { }, save: function (e, t) { this.$element.triggerHandler("save", t), this.hide("save") }, option: function (e, t) { this.options[e] = t, e in this.containerOptions ? (this.containerOptions[e] = t, this.setContainerOption(e, t)) : (this.formOptions[e] = t, this.$form && this.$form.editableform("option", e, t)) }, setContainerOption: function (e, t) { this.call("option", e, t) }, destroy: function () { this.hide(), this.innerDestroy(), this.$element.off("destroyed"), this.$element.removeData("editableContainer") }, innerDestroy: function () { }, closeOthers: function (t) { e(".editable-open").each(function (n, r) { if (r === t || e(r).find(t).length) return; var i = e(r), s = i.data("editableContainer"); if (!s) return; s.options.onblur === "cancel" ? i.data("editableContainer").hide("onblur") : s.options.onblur === "submit" && i.data("editableContainer").tip().find("form").submit() }) }, activate: function () { this.tip && this.tip().is(":visible") && this.$form && this.$form.data("editableform").input.activate() } }, e.fn.editableContainer = function (r) { var i = arguments; return this.each(function () { var s = e(this), o = "editableContainer", u = s.data(o), a = typeof r == "object" && r, f = a.mode === "inline" ? n : t; u || s.data(o, u = new f(this, a)), typeof r == "string" && u[r].apply(u, Array.prototype.slice.call(i, 1)) }) }, e.fn.editableContainer.Popup = t, e.fn.editableContainer.Inline = n, e.fn.editableContainer.defaults = { value: null, placement: "top", autohide: !0, onblur: "cancel", anim: "fast", mode: "popup" }, jQuery.event.special.destroyed = { remove: function (e) { e.handler && e.handler() } } }(window.jQuery), function (e) { e.extend(e.fn.editableContainer.Inline.prototype, e.fn.editableContainer.Popup.prototype, { containerName: "editableform", innerCss: ".editable-inline", initContainer: function () { this.$tip = e("<span></span>").addClass("editable-inline"), this.options.anim || (this.options.anim = 0) }, splitOptions: function () { this.containerOptions = {}, this.formOptions = this.options }, tip: function () { return this.$tip }, innerShow: function () { this.$element.hide(), this.tip().insertAfter(this.$element).show() }, innerHide: function () { this.$tip.hide(this.options.anim, e.proxy(function () { this.$element.show(), this.innerDestroy() }, this)) }, innerDestroy: function () { this.tip() && this.tip().empty().remove() } }) }(window.jQuery), function (e) { var t = function (t, n) { this.$element = e(t), this.options = e.extend({}, e.fn.editable.defaults, n, e.fn.editableutils.getConfigData(this.$element)), this.options.selector ? this.initLive() : this.init() }; t.prototype = { constructor: t, init: function () { var t = !1, n, r; this.options.name = this.options.name || this.$element.attr("id"), this.input = e.fn.editableutils.createInput(this.options); if (!this.input) return; this.options.value === undefined || this.options.value === null ? (this.value = this.input.html2value(e.trim(this.$element.html())), t = !0) : (this.options.value = e.fn.editableutils.tryParseJson(this.options.value, !0), typeof this.options.value == "string" ? this.value = this.input.str2value(this.options.value) : this.value = this.options.value), this.$element.addClass("editable"), this.options.toggle !== "manual" ? (this.$element.addClass("editable-click"), this.$element.on(this.options.toggle + ".editable", e.proxy(function (e) { e.preventDefault(); if (this.options.toggle === "mouseenter") this.show(); else { var t = this.options.toggle !== "click"; this.toggle(t) } }, this))) : this.$element.attr("tabindex", -1), n = !t && this.value !== null && this.value !== undefined, n &= this.options.autotext === "always" || this.options.autotext === "auto" && !this.$element.text().length, e.when(n ? this.render() : !0).then(e.proxy(function () { this.options.disabled ? this.disable() : this.enable(), this.$element.triggerHandler("init", this) }, this)) }, initLive: function () { var t = this.options.selector; this.options.selector = !1, this.options.autotext = "never", this.$element.on(this.options.toggle + ".editable", t, e.proxy(function (t) { var n = e(t.target); n.data("editable") || n.editable(this.options).trigger(t) }, this)) }, render: function (e) { if (this.options.display === !1) return; return this.input.value2htmlFinal ? this.input.value2html(this.value, this.$element[0], this.options.display, e) : typeof this.options.display == "function" ? this.options.display.call(this.$element[0], this.value, e) : this.input.value2html(this.value, this.$element[0]) }, enable: function () { this.options.disabled = !1, this.$element.removeClass("editable-disabled"), this.handleEmpty(this.isEmpty), this.options.toggle !== "manual" && this.$element.attr("tabindex") === "-1" && this.$element.removeAttr("tabindex") }, disable: function () { this.options.disabled = !0, this.hide(), this.$element.addClass("editable-disabled"), this.handleEmpty(this.isEmpty), this.$element.attr("tabindex", -1) }, toggleDisabled: function () { this.options.disabled ? this.enable() : this.disable() }, option: function (t, n) { if (t && typeof t == "object") { e.each(t, e.proxy(function (t, n) { this.option(e.trim(t), n) }, this)); return } this.options[t] = n; if (t === "disabled") return n ? this.disable() : this.enable(); t === "value" && this.setValue(n), this.container && this.container.option(t, n), this.input.option && this.input.option(t, n) }, handleEmpty: function (t) { if (this.options.display === !1) return; this.isEmpty = t !== undefined ? t : e.trim(this.$element.text()) === "", this.options.disabled ? this.isEmpty && (this.$element.empty(), this.options.emptyclass && this.$element.removeClass(this.options.emptyclass)) : this.isEmpty ? (this.$element.text(this.options.emptytext), this.options.emptyclass && this.$element.addClass(this.options.emptyclass)) : this.options.emptyclass && this.$element.removeClass(this.options.emptyclass) }, show: function (t) { if (this.options.disabled) return; if (!this.container) { var n = e.extend({}, this.options, { value: this.value, input: this.input }); this.$element.editableContainer(n), this.$element.on("save.internal", e.proxy(this.save, this)), this.container = this.$element.data("editableContainer") } else if (this.container.tip().is(":visible")) return; this.container.show(t) }, hide: function () { this.container && this.container.hide() }, toggle: function (e) { this.container && this.container.tip().is(":visible") ? this.hide() : this.show(e) }, save: function (e, t) { if (this.options.unsavedclass) { var n = !1; n = n || typeof this.options.url == "function", n = n || this.options.display === !1, n = n || t.response !== undefined, n = n || this.options.savenochange && this.input.value2str(this.value) !== this.input.value2str(t.newValue), n ? this.$element.removeClass(this.options.unsavedclass) : this.$element.addClass(this.options.unsavedclass) } this.setValue(t.newValue, !1, t.response) }, validate: function () { if (typeof this.options.validate == "function") return this.options.validate.call(this, this.value) }, setValue: function (t, n, r) { n ? this.value = this.input.str2value(t) : this.value = t, this.container && this.container.option("value", this.value), e.when(this.render(r)).then(e.proxy(function () { this.handleEmpty() }, this)) }, activate: function () { this.container && this.container.activate() }, destroy: function () { this.container && this.container.destroy(), this.options.toggle !== "manual" && (this.$element.removeClass("editable-click"), this.$element.off(this.options.toggle + ".editable")), this.$element.off("save.internal"), this.$element.removeClass("editable"), this.$element.removeClass("editable-open"), this.$element.removeData("editable") } }, e.fn.editable = function (n) { var r = {}, i = arguments, s = "editable"; switch (n) { case "validate": return this.each(function () { var t = e(this), n = t.data(s), i; n && (i = n.validate()) && (r[n.options.name] = i) }), r; case "getValue": return this.each(function () { var t = e(this), n = t.data(s); n && n.value !== undefined && n.value !== null && (r[n.options.name] = n.input.value2submit(n.value)) }), r; case "submit": var o = arguments[1] || {}, u = this, a = this.editable("validate"), f; return e.isEmptyObject(a) ? (f = this.editable("getValue"), o.data && e.extend(f, o.data), e.ajax(e.extend({ url: o.url, data: f, type: "POST" }, o.ajaxOptions)).success(function (e) { typeof o.success == "function" && o.success.call(u, e, o) }).error(function () { typeof o.error == "function" && o.error.apply(u, arguments) })) : typeof o.error == "function" && o.error.call(u, a), this } return this.each(function () { var r = e(this), o = r.data(s), u = typeof n == "object" && n; o || r.data(s, o = new t(this, u)), typeof n == "string" && o[n].apply(o, Array.prototype.slice.call(i, 1)) }) }, e.fn.editable.defaults = { type: "text", disabled: !1, toggle: "click", emptytext: "Empty", autotext: "auto", value: null, display: null, emptyclass: "editable-empty", unsavedclass: "editable-unsaved", selector: null } }(window.jQuery), function (e) { e.fn.editabletypes = {}; var t = function () { }; t.prototype = { init: function (t, n, r) { this.type = t, this.options = e.extend({}, r, n) }, prerender: function () { this.$tpl = e(this.options.tpl), this.$input = this.$tpl, this.$clear = null, this.error = null }, render: function () { }, value2html: function (t, n) { e(n).text(t) }, html2value: function (t) { return e("<div>").html(t).text() }, value2str: function (e) { return e }, str2value: function (e) { return e }, value2submit: function (e) { return e }, value2input: function (e) { this.$input.val(e) }, input2value: function () { return this.$input.val() }, activate: function () { this.$input.is(":visible") && this.$input.focus() }, clear: function () { this.$input.val(null) }, escape: function (t) { return e("<div>").text(t).html() }, autosubmit: function () { }, setClass: function () { this.options.inputclass && this.$input.addClass(this.options.inputclass) }, setAttr: function (e) { this.options[e] && this.$input.attr(e, this.options[e]) }, option: function (e, t) { this.options[e] = t } }, t.defaults = { tpl: "", inputclass: "input-medium" }, e.extend(e.fn.editabletypes, { abstractinput: t }) }(window.jQuery), function (e) { var t = function (e) { }; e.fn.editableutils.inherit(t, e.fn.editabletypes.abstractinput), e.extend(t.prototype, { render: function () { var t = e.Deferred(); return this.error = null, this.onSourceReady(function () { this.renderList(), t.resolve() }, function () { this.error = this.options.sourceError, t.resolve() }), t.promise() }, html2value: function (e) { return null }, value2html: function (t, n, r, i) { var s = e.Deferred(), o = function () { typeof r == "function" ? r.call(n, t, this.sourceData, i) : this.value2htmlFinal(t, n), s.resolve() }; return t === null ? o.call(this) : this.onSourceReady(o, function () { s.resolve() }), s.promise() }, onSourceReady: function (t, n) { if (e.isArray(this.sourceData)) { t.call(this); return } try { this.options.source = e.fn.editableutils.tryParseJson(this.options.source, !1) } catch (r) { n.call(this); return } if (typeof this.options.source == "string") { if (this.options.sourceCache) { var i = this.options.source, s; e(document).data(i) || e(document).data(i, {}), s = e(document).data(i); if (s.loading === !1 && s.sourceData) { this.sourceData = s.sourceData, this.doPrepend(), t.call(this); return } if (s.loading === !0) { s.callbacks.push(e.proxy(function () { this.sourceData = s.sourceData, this.doPrepend(), t.call(this) }, this)), s.err_callbacks.push(e.proxy(n, this)); return } s.loading = !0, s.callbacks = [], s.err_callbacks = [] } e.ajax({ url: this.options.source, type: "get", cache: !1, dataType: "json", success: e.proxy(function (r) { s && (s.loading = !1), this.sourceData = this.makeArray(r), e.isArray(this.sourceData) ? (s && (s.sourceData = this.sourceData, e.each(s.callbacks, function () { this.call() })), this.doPrepend(), t.call(this)) : (n.call(this), s && e.each(s.err_callbacks, function () { this.call() })) }, this), error: e.proxy(function () { n.call(this), s && (s.loading = !1, e.each(s.err_callbacks, function () { this.call() })) }, this) }) } else e.isFunction(this.options.source) ? this.sourceData = this.makeArray(this.options.source()) : this.sourceData = this.makeArray(this.options.source), e.isArray(this.sourceData) ? (this.doPrepend(), t.call(this)) : n.call(this) }, doPrepend: function () { if (this.options.prepend === null || this.options.prepend === undefined) return; e.isArray(this.prependData) || (this.options.prepend = e.fn.editableutils.tryParseJson(this.options.prepend, !0), typeof this.options.prepend == "string" && (this.options.prepend = { "": this.options.prepend }), typeof this.options.prepend == "function" ? this.prependData = this.makeArray(this.options.prepend()) : this.prependData = this.makeArray(this.options.prepend)), e.isArray(this.prependData) && e.isArray(this.sourceData) && (this.sourceData = this.prependData.concat(this.sourceData)) }, renderList: function () { }, value2htmlFinal: function (e, t) { }, makeArray: function (t) { var n, r, i = [], s, o; if (!t || typeof t == "string") return null; if (e.isArray(t)) { o = function (e, t) { r = { value: e, text: t }; if (n++ >= 2) return !1 }; for (var u = 0; u < t.length; u++) s = t[u], typeof s == "object" ? (n = 0, e.each(s, o), n === 1 ? i.push(r) : n > 1 && (s.children && (s.children = this.makeArray(s.children)), i.push(s))) : i.push({ value: s, text: s }) } else e.each(t, function (e, t) { i.push({ value: e, text: t }) }); return i }, option: function (e, t) { this.options[e] = t, e === "source" && (this.sourceData = null), e === "prepend" && (this.prependData = null) } }), t.defaults = e.extend({}, e.fn.editabletypes.abstractinput.defaults, { source: null, prepend: !1, sourceError: "Error when loading list", sourceCache: !0 }), e.fn.editabletypes.list = t }(window.jQuery), function (e) { var t = function (e) { this.init("text", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.abstractinput), e.extend(t.prototype, { render: function () { this.renderClear(), this.setClass(), this.setAttr("placeholder") }, activate: function () { this.$input.is(":visible") && (this.$input.focus(), e.fn.editableutils.setCursorPosition(this.$input.get(0), this.$input.val().length), this.toggleClear && this.toggleClear()) }, renderClear: function () { this.options.clear && (this.$clear = e('<span class="editable-clear-x"></span>'), this.$input.after(this.$clear).css("padding-right", 20).keyup(e.proxy(this.toggleClear, this)).parent().css("position", "relative"), this.$clear.click(e.proxy(this.clear, this))) }, postrender: function () { if (this.$clear) { var e = this.$input.outerHeight() || 20, t = (e - this.$clear.height()) / 2; t < 3 && (t = 3), this.$clear.css({ top: t, right: t }) } }, toggleClear: function () { if (!this.$clear) return; this.$input.val().length ? this.$clear.show() : this.$clear.hide() }, clear: function () { this.$clear.hide(), this.$input.val("").focus() } }), t.defaults = e.extend({}, e.fn.editabletypes.abstractinput.defaults, { tpl: '<input type="text">', placeholder: null, clear: !0 }), e.fn.editabletypes.text = t }(window.jQuery), function (e) { var t = function (e) { this.init("textarea", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.abstractinput), e.extend(t.prototype, { render: function () { this.setClass(), this.setAttr("placeholder"), this.setAttr("rows"), this.$input.keydown(function (t) { t.ctrlKey && t.which === 13 && e(this).closest("form").submit() }) }, value2html: function (t, n) { var r = "", i; if (t) { i = t.split("\n"); for (var s = 0; s < i.length; s++) i[s] = e("<div>").text(i[s]).html(); r = i.join("<br>") } e(n).html(r) }, html2value: function (t) { if (!t) return ""; var n = new RegExp(String.fromCharCode(10), "g"), r = t.split(/<br\s*\/?>/i); for (var i = 0; i < r.length; i++) { var s = e("<div>").html(r[i]).text(); s = s.replace(n, ""), r[i] = s } return r.join("\n") }, activate: function () { e.fn.editabletypes.text.prototype.activate.call(this) } }), t.defaults = e.extend({}, e.fn.editabletypes.abstractinput.defaults, { tpl: "<textarea></textarea>", inputclass: "input-large", placeholder: null, rows: 7 }), e.fn.editabletypes.textarea = t }(window.jQuery), function (e) { var t = function (e) { this.init("select", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.list), e.extend(t.prototype, { renderList: function () { this.$input.empty(); var t = function (n, r) { if (e.isArray(r)) for (var i = 0; i < r.length; i++) r[i].children ? n.append(t(e("<optgroup>", { label: r[i].text }), r[i].children)) : n.append(e("<option>", { value: r[i].value }).text(r[i].text)); return n }; t(this.$input, this.sourceData), this.setClass(), this.$input.on("keydown.editable", function (t) { t.which === 13 && e(this).closest("form").submit() }) }, value2htmlFinal: function (t, n) { var r = "", i = e.fn.editableutils.itemsByValue(t, this.sourceData); i.length && (r = i[0].text), e(n).text(r) }, autosubmit: function () { this.$input.off("keydown.editable").on("change.editable", function () { e(this).closest("form").submit() }) } }), t.defaults = e.extend({}, e.fn.editabletypes.list.defaults, { tpl: "<select></select>" }), e.fn.editabletypes.select = t }(window.jQuery), function (e) { var t = function (e) { this.init("checklist", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.list), e.extend(t.prototype, { renderList: function () { var t, n; this.$tpl.empty(); if (!e.isArray(this.sourceData)) return; for (var r = 0; r < this.sourceData.length; r++) t = e("<label>").append(e("<input>", { type: "checkbox", value: this.sourceData[r].value })).append(e("<span>").text(" " + this.sourceData[r].text)), e("<div>").append(t).appendTo(this.$tpl); this.$input = this.$tpl.find('input[type="checkbox"]'), this.setClass() }, value2str: function (t) { return e.isArray(t) ? t.sort().join(e.trim(this.options.separator)) : "" }, str2value: function (t) { var n, r = null; return typeof t == "string" && t.length ? (n = new RegExp("\\s*" + e.trim(this.options.separator) + "\\s*"), r = t.split(n)) : e.isArray(t) && (r = t), r }, value2input: function (t) { this.$input.prop("checked", !1), e.isArray(t) && t.length && this.$input.each(function (n, r) { var i = e(r); e.each(t, function (e, t) { i.val() == t && i.prop("checked", !0) }) }) }, input2value: function () { var t = []; return this.$input.filter(":checked").each(function (n, r) { t.push(e(r).val()) }), t }, value2htmlFinal: function (t, n) { var r = [], i = e.fn.editableutils.itemsByValue(t, this.sourceData); i.length ? (e.each(i, function (t, n) { r.push(e.fn.editableutils.escape(n.text)) }), e(n).html(r.join("<br>"))) : e(n).empty() }, activate: function () { this.$input.first().focus() }, autosubmit: function () { this.$input.on("keydown", function (t) { t.which === 13 && e(this).closest("form").submit() }) } }), t.defaults = e.extend({}, e.fn.editabletypes.list.defaults, { tpl: '<div class="editable-checklist"></div>', inputclass: null, separator: "," }), e.fn.editabletypes.checklist = t }(window.jQuery), function (e) { var t = function (e) { this.init("password", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.text), e.extend(t.prototype, { value2html: function (t, n) { t ? e(n).text("[hidden]") : e(n).empty() }, html2value: function (e) { return null } }), t.defaults = e.extend({}, e.fn.editabletypes.text.defaults, { tpl: '<input type="password">' }), e.fn.editabletypes.password = t }(window.jQuery), function (e) { var t = function (e) { this.init("email", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.text), t.defaults = e.extend({}, e.fn.editabletypes.text.defaults, { tpl: '<input type="email">' }), e.fn.editabletypes.email = t }(window.jQuery), function (e) { var t = function (e) { this.init("url", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.text), t.defaults = e.extend({}, e.fn.editabletypes.text.defaults, { tpl: '<input type="url">' }), e.fn.editabletypes.url = t }(window.jQuery), function (e) { var t = function (e) { this.init("tel", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.text), t.defaults = e.extend({}, e.fn.editabletypes.text.defaults, { tpl: '<input type="tel">' }), e.fn.editabletypes.tel = t }(window.jQuery), function (e) { var t = function (e) { this.init("number", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.text), e.extend(t.prototype, { render: function () { t.superclass.render.call(this), this.setAttr("min"), this.setAttr("max"), this.setAttr("step") } }), t.defaults = e.extend({}, e.fn.editabletypes.text.defaults, { tpl: '<input type="number">', inputclass: "input-mini", min: null, max: null, step: null }), e.fn.editabletypes.number = t }(window.jQuery), function (e) { var t = function (e) { this.init("range", e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.number), e.extend(t.prototype, { render: function () { this.$input = this.$tpl.filter("input"), this.setClass(), this.setAttr("min"), this.setAttr("max"), this.setAttr("step"), this.$input.on("input", function () { e(this).siblings("output").text(e(this).val()) }) }, activate: function () { this.$input.focus() } }), t.defaults = e.extend({}, e.fn.editabletypes.number.defaults, { tpl: '<input type="range"><output style="width: 30px; display: inline-block"></output>', inputclass: "input-medium" }), e.fn.editabletypes.range = t }(window.jQuery), function (e) { var t = function (n) { this.init("select2", n, t.defaults), n.select2 = n.select2 || {}; var r = this, i = { placeholder: n.placeholder }; this.isMultiple = n.select2.tags || n.select2.multiple, n.select2.tags || (n.source && (i.data = n.source), i.initSelection = function (t, n) { var s = r.str2value(t.val()), o = e.fn.editableutils.itemsByValue(s, i.data, "id"); e.isArray(o) && o.length && !r.isMultiple && (o = o[0]), n(o) }), this.options.select2 = e.extend({}, t.defaults.select2, i, n.select2) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.abstractinput), e.extend(t.prototype, { render: function () { this.setClass(), this.$input.select2(this.options.select2), this.isMultiple && this.$input.on("change", function () { e(this).closest("form").parent().triggerHandler("resize") }) }, value2html: function (t, n) { var r = "", i; this.$input ? i = this.$input.select2("data") : this.options.select2.tags ? i = t : this.options.select2.data && (i = e.fn.editableutils.itemsByValue(t, this.options.select2.data, "id")), e.isArray(i) ? (r = [], e.each(i, function (e, t) { r.push(t && typeof t == "object" ? t.text : t) })) : i && (r = i.text), r = e.isArray(r) ? r.join(this.options.viewseparator) : r, e(n).text(r) }, html2value: function (e) { return this.options.select2.tags ? this.str2value(e, this.options.viewseparator) : null }, value2input: function (e) { this.$input.val(e).trigger("change") }, input2value: function () { return this.$input.select2("val") }, str2value: function (t, n) { if (typeof t != "string" || !this.isMultiple) return t; n = n || this.options.select2.separator || e.fn.select2.defaults.separator; var r, i, s; if (t === null || t.length < 1) return null; r = t.split(n); for (i = 0, s = r.length; i < s; i += 1) r[i] = e.trim(r[i]); return r } }), t.defaults = e.extend({}, e.fn.editabletypes.abstractinput.defaults, { tpl: '<input type="hidden">', select2: null, placeholder: null, source: null, viewseparator: ", " }), e.fn.editabletypes.select2 = t }(window.jQuery), function (e) { var t = function (t, n) { this.$element = e(t); if (!this.$element.is("input")) { e.error("Combodate should be applied to INPUT element"); return } this.options = e.extend({}, e.fn.combodate.defaults, n, this.$element.data()), this.init() }; t.prototype = { constructor: t, init: function () { this.map = { day: ["D", "date"], month: ["M", "month"], year: ["Y", "year"], hour: ["[Hh]", "hours"], minute: ["m", "minutes"], second: ["s", "seconds"], ampm: ["[Aa]", ""] }, this.$widget = e('<span class="combodate"></span>').html(this.getTemplate()), this.initCombos(), this.$widget.on("change", "select", e.proxy(function () { this.$element.val(this.getValue()) }, this)), this.$widget.find("select").css("width", "auto"), this.$element.hide().after(this.$widget), this.setValue(this.$element.val() || this.options.value) }, getTemplate: function () { var t = this.options.template; return e.each(this.map, function (e, n) { n = n[0]; var r = new RegExp(n + "+"), i = n.length > 1 ? n.substring(1, 2) : n; t = t.replace(r, "{" + i + "}") }), t = t.replace(/ /g, "&nbsp;"), e.each(this.map, function (e, n) { n = n[0]; var r = n.length > 1 ? n.substring(1, 2) : n; t = t.replace("{" + r + "}", '<select class="' + e + '"></select>') }), t }, initCombos: function () { var t = this; e.each(this.map, function (e, n) { var r = t.$widget.find("." + e), i, s; r.length && (t["$" + e] = r, i = "fill" + e.charAt(0).toUpperCase() + e.slice(1), s = t[i](), t["$" + e].html(t.renderItems(s))) }) }, initItems: function (e) { var t = []; if (this.options.firstItem === "name") { var n = typeof moment.relativeTime[e] == "function" ? moment.relativeTime[e](1, !0, e, !1) : moment.relativeTime[e]; n = n.split(" ").reverse()[0], t.push(["", n]) } else this.options.firstItem === "empty" && t.push(["", ""]); return t }, renderItems: function (e) { var t = []; for (var n = 0; n < e.length; n++) t.push('<option value="' + e[n][0] + '">' + e[n][1] + "</option>"); return t.join("\n") }, fillDay: function () { var e = this.initItems("d"), t, n, r = this.options.template.indexOf("DD") !== -1; for (n = 1; n <= 31; n++) t = r ? this.leadZero(n) : n, e.push([n, t]); return e }, fillMonth: function () { var e = this.initItems("M"), t, n, r = this.options.template.indexOf("MMMM") !== -1, i = this.options.template.indexOf("MMM") !== -1, s = this.options.template.indexOf("MM") !== -1; for (n = 0; n <= 11; n++) r ? t = moment.months[n] : i ? t = moment.monthsShort[n] : s ? t = this.leadZero(n + 1) : t = n + 1, e.push([n, t]); return e }, fillYear: function () { var e = this.initItems("y"), t, n, r = this.options.template.indexOf("YYYY") !== -1; for (n = this.options.maxYear; n >= this.options.minYear; n--) t = r ? n : (n + "").substring(2), e.push([n, t]); return e }, fillHour: function () { var e = this.initItems("h"), t, n, r = this.options.template.indexOf("h") !== -1, i = this.options.template.indexOf("H") !== -1, s = this.options.template.toLowerCase().indexOf("hh") !== -1, o = r ? 12 : 23; for (n = 0; n <= o; n++) t = s ? this.leadZero(n) : n, e.push([n, t]); return e }, fillMinute: function () { var e = this.initItems("m"), t, n, r = this.options.template.indexOf("mm") !== -1; for (n = 0; n <= 59; n += this.options.minuteStep) t = r ? this.leadZero(n) : n, e.push([n, t]); return e }, fillSecond: function () { var e = this.initItems("s"), t, n, r = this.options.template.indexOf("ss") !== -1; for (n = 0; n <= 59; n += this.options.secondStep) t = r ? this.leadZero(n) : n, e.push([n, t]); return e }, fillAmpm: function () { var e = this.options.template.indexOf("a") !== -1, t = this.options.template.indexOf("A") !== -1, n = [["am", e ? "am" : "AM"], ["pm", e ? "pm" : "PM"]]; return n }, getValue: function (t) { var n, r = {}, i = this, s = !1; return e.each(this.map, function (e, t) { if (e === "ampm") return; var n = e === "day" ? 1 : 0; r[e] = i["$" + e] ? parseInt(i["$" + e].val(), 10) : n; if (isNaN(r[e])) return s = !0, !1 }), s ? "" : (this.$ampm && (r.hour = this.$ampm.val() === "am" ? r.hour : r.hour + 12, r.hour === 24 && (r.hour = 0)), n = moment([r.year, r.month, r.day, r.hour, r.minute, r.second]), this.highlight(n), t = t === undefined ? this.options.format : t, t === null ? n.isValid() ? n : null : n.isValid() ? n.format(t) : "") }, setValue: function (t) { if (!t) return; var n = typeof t == "string" ? moment(t, this.options.format) : moment(t), r = this, i = {}; n.isValid() && (e.each(this.map, function (e, t) { if (e === "ampm") return; i[e] = n[t[1]]() }), this.$ampm && (i.hour > 12 ? (i.hour -= 12, i.ampm = "pm") : i.ampm = "am"), e.each(i, function (e, t) { r["$" + e] && r["$" + e].val(t) }), this.$element.val(n.format(this.options.format))) }, highlight: function (e) { e.isValid() ? this.options.errorClass ? this.$widget.removeClass(this.options.errorClass) : this.$widget.find("select").css("border-color", this.borderColor) : this.options.errorClass ? this.$widget.addClass(this.options.errorClass) : (this.borderColor || (this.borderColor = this.$widget.find("select").css("border-color")), this.$widget.find("select").css("border-color", "red")) }, leadZero: function (e) { return e <= 9 ? "0" + e : e }, destroy: function () { this.$widget.remove(), this.$element.removeData("combodate").show() } }, e.fn.combodate = function (n) { var r, i = Array.apply(null, arguments); return i.shift(), n === "getValue" && this.length && (r = this.eq(0).data("combodate")) ? r.getValue.apply(r, i) : this.each(function () { var r = e(this), s = r.data("combodate"), o = typeof n == "object" && n; s || r.data("combodate", s = new t(this, o)), typeof n == "string" && typeof s[n] == "function" && s[n].apply(s, i) }) }, e.fn.combodate.defaults = { format: "DD-MM-YYYY HH:mm", template: "D / MMM / YYYY   H : mm", value: null, minYear: 1970, maxYear: 2015, minuteStep: 5, secondStep: 1, firstItem: "empty", errorClass: null } }(window.jQuery), function (e) { var t = function (n) { this.init("combodate", n, t.defaults), this.options.viewformat || (this.options.viewformat = this.options.format), this.options.combodate = e.extend({}, t.defaults.combodate, n.combodate, { format: this.options.format, template: this.options.template }) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.abstractinput), e.extend(t.prototype, { render: function () { this.$input.combodate(this.options.combodate) }, value2html: function (t, n) { var r = t ? t.format(this.options.viewformat) : ""; e(n).text(r) }, html2value: function (e) { return e ? moment(e, this.options.viewformat) : null }, value2str: function (e) { return e ? e.format(this.options.format) : "" }, str2value: function (e) { return e ? moment(e, this.options.format) : null }, value2submit: function (e) { return this.value2str(e) }, value2input: function (e) { this.$input.combodate("setValue", e) }, input2value: function () { return this.$input.combodate("getValue", null) }, activate: function () { this.$input.siblings(".combodate").find("select").eq(0).focus() }, autosubmit: function () { } }), t.defaults = e.extend({}, e.fn.editabletypes.abstractinput.defaults, { tpl: '<input type="text">', inputclass: null, format: "YYYY-MM-DD", viewformat: null, template: "D / MMM / YYYY", combodate: null }), e.fn.editabletypes.combodate = t }(window.jQuery), function (e) { e.extend(e.fn.editableform.Constructor.prototype, { initTemplate: function () { this.$form = e(e.fn.editableform.template), this.$form.find(".editable-error-block").addClass("help-block") } }), e.fn.editableform.buttons = '<button type="submit" class="btn btn-primary editable-submit"><i class="fa fa-check"></i></button><button type="button" class="btn editable-cancel"><i class="fa fa-times"></i></button>', e.fn.editableform.errorGroupClass = "error", e.fn.editableform.errorBlockClass = null }(window.jQuery), function (e) { e.extend(e.fn.editableContainer.Popup.prototype, { containerName: "popover", innerCss: e(e.fn.popover.defaults.template).find("p").length ? ".popover-content p" : ".popover-content", initContainer: function () { e.extend(this.containerOptions, { trigger: "manual", selector: !1, content: " ", template: e.fn.popover.defaults.template }); var t; this.$element.data("template") && (t = this.$element.data("template"), this.$element.removeData("template")), this.call(this.containerOptions), t && this.$element.data("template", t) }, innerShow: function () { this.call("show") }, innerHide: function () { this.call("hide") }, innerDestroy: function () { this.call("destroy") }, setContainerOption: function (e, t) { this.container().options[e] = t }, setPosition: function () { (function () { var e = this.tip(), t, n, r, i, s, o; s = typeof this.options.placement == "function" ? this.options.placement.call(this, e[0], this.$element[0]) : this.options.placement, t = /in/.test(s), e.removeClass("top right bottom left").css({ top: 0, left: 0, display: "block" }), n = this.getPosition(t), r = e[0].offsetWidth, i = e[0].offsetHeight; switch (t ? s.split(" ")[1] : s) { case "bottom": o = { top: n.top + n.height, left: n.left + n.width / 2 - r / 2 }; break; case "top": o = { top: n.top - i, left: n.left + n.width / 2 - r / 2 }; break; case "left": o = { top: n.top + n.height / 2 - i / 2, left: n.left - r }; break; case "right": o = { top: n.top + n.height / 2 - i / 2, left: n.left + n.width } } e.offset(o).addClass(s).addClass("in") }).call(this.container()) } }) }(window.jQuery), function (e) { var t = function (e) { this.init("date", e, t.defaults), this.initPicker(e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.abstractinput), e.extend(t.prototype, { initPicker: function (t, n) { this.options.viewformat || (this.options.viewformat = this.options.format), this.options.datepicker = e.extend({}, n.datepicker, t.datepicker, { format: this.options.viewformat }), this.options.datepicker.language = this.options.datepicker.language || "en", this.dpg = e.fn.datepicker.DPGlobal, this.parsedFormat = this.dpg.parseFormat(this.options.format), this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat) }, render: function () { this.$input.datepicker(this.options.datepicker), this.options.clear && (this.$clear = e('<a href="#"></a>').html(this.options.clear).click(e.proxy(function (e) { e.preventDefault(), e.stopPropagation(), this.clear() }, this)), this.$tpl.parent().append(e('<div class="editable-clear">').append(this.$clear))) }, value2html: function (e, n) { var r = e ? this.dpg.formatDate(e, this.parsedViewFormat, this.options.datepicker.language) : ""; t.superclass.value2html(r, n) }, html2value: function (e) { return e ? this.dpg.parseDate(e, this.parsedViewFormat, this.options.datepicker.language) : null }, value2str: function (e) { return e ? this.dpg.formatDate(e, this.parsedFormat, this.options.datepicker.language) : "" }, str2value: function (e) { return e ? this.dpg.parseDate(e, this.parsedFormat, this.options.datepicker.language) : null }, value2submit: function (e) { return this.value2str(e) }, value2input: function (e) { this.$input.datepicker("update", e) }, input2value: function () { return this.$input.data("datepicker").date }, activate: function () { }, clear: function () { this.$input.data("datepicker").date = null, this.$input.find(".active").removeClass("active") }, autosubmit: function () { this.$input.on("changeDate", function (t) { var n = e(this).closest("form"); setTimeout(function () { n.submit() }, 200) }) } }), t.defaults = e.extend({}, e.fn.editabletypes.abstractinput.defaults, { tpl: '<div class="editable-date well"></div>', inputclass: null, format: "yyyy-mm-dd", viewformat: null, datepicker: { weekStart: 0, startView: 0, autoclose: !1 }, clear: "&times; clear" }), e.fn.editabletypes.date = t }(window.jQuery), function (e) { var t = function (e) { this.init("datefield", e, t.defaults), this.initPicker(e, t.defaults) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.date), e.extend(t.prototype, { render: function () { this.$input = this.$tpl.find("input"), this.setClass(), this.setAttr("placeholder"), this.$tpl.datepicker(this.options.datepicker), this.$input.off("focus keydown"), this.$input.keyup(e.proxy(function () { this.$tpl.removeData("date"), this.$tpl.datepicker("update") }, this)) }, value2input: function (e) { this.$input.val(e ? this.dpg.formatDate(e, this.parsedViewFormat, this.options.datepicker.language) : ""), this.$tpl.datepicker("update") }, input2value: function () { return this.html2value(this.$input.val()) }, activate: function () { e.fn.editabletypes.text.prototype.activate.call(this) }, autosubmit: function () { } }), t.defaults = e.extend({}, e.fn.editabletypes.date.defaults, { tpl: '<div class="input-append date"><input type="text"/><span class="add-on"><i class="fa fa-th"></i></span></div>', inputclass: "input-small", datepicker: { weekStart: 0, startView: 0, autoclose: !0 } }), e.fn.editabletypes.datefield = t }(window.jQuery), !function (e) { function t() { return new Date(Date.UTC.apply(Date, arguments)) } function n() { var e = new Date; return t(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate()) } var r = function (t, n) { var r = this; this.element = e(t), this.language = n.language || this.element.data("date-language") || "en", this.language = this.language in i ? this.language : "en", this.isRTL = i[this.language].rtl || !1, this.format = s.parseFormat(n.format || this.element.data("date-format") || "mm/dd/yyyy"), this.isInline = !1, this.isInput = this.element.is("input"), this.component = this.element.is(".date") ? this.element.find(".add-on") : !1, this.hasInput = this.component && this.element.find("input").length, this.component && this.component.length === 0 && (this.component = !1), this._attachEvents(), this.forceParse = !0, "forceParse" in n ? this.forceParse = n.forceParse : "dateForceParse" in this.element.data() && (this.forceParse = this.element.data("date-force-parse")), this.picker = e(s.template).appendTo(this.isInline ? this.element : "body").on({ click: e.proxy(this.click, this), mousedown: e.proxy(this.mousedown, this) }), this.isInline ? this.picker.addClass("datepicker-inline") : this.picker.addClass("datepicker-dropdown dropdown-menu"), this.isRTL && (this.picker.addClass("datepicker-rtl"), this.picker.find(".prev i, .next i").toggleClass("fa-arrow-left fa-arrow-right")), e(document).on("mousedown", function (t) { e(t.target).closest(".datepicker").length === 0 && r.hide() }), this.autoclose = !1, "autoclose" in n ? this.autoclose = n.autoclose : "dateAutoclose" in this.element.data() && (this.autoclose = this.element.data("date-autoclose")), this.keyboardNavigation = !0, "keyboardNavigation" in n ? this.keyboardNavigation = n.keyboardNavigation : "dateKeyboardNavigation" in this.element.data() && (this.keyboardNavigation = this.element.data("date-keyboard-navigation")), this.viewMode = this.startViewMode = 0; switch (n.startView || this.element.data("date-start-view")) { case 2: case "decade": this.viewMode = this.startViewMode = 2; break; case 1: case "year": this.viewMode = this.startViewMode = 1 } this.todayBtn = n.todayBtn || this.element.data("date-today-btn") || !1, this.todayHighlight = n.todayHighlight || this.element.data("date-today-highlight") || !1, this.weekStart = (n.weekStart || this.element.data("date-weekstart") || i[this.language].weekStart || 0) % 7, this.weekEnd = (this.weekStart + 6) % 7, this.startDate = -Infinity, this.endDate = Infinity, this.daysOfWeekDisabled = [], this.setStartDate(n.startDate || this.element.data("date-startdate")), this.setEndDate(n.endDate || this.element.data("date-enddate")), this.setDaysOfWeekDisabled(n.daysOfWeekDisabled || this.element.data("date-days-of-week-disabled")), this.fillDow(), this.fillMonths(), this.update(), this.showMode(), this.isInline && this.show() }; r.prototype = { constructor: r, _events: [], _attachEvents: function () { this._detachEvents(), this.isInput ? this._events = [[this.element, { focus: e.proxy(this.show, this), keyup: e.proxy(this.update, this), keydown: e.proxy(this.keydown, this) }]] : this.component && this.hasInput ? this._events = [[this.element.find("input"), { focus: e.proxy(this.show, this), keyup: e.proxy(this.update, this), keydown: e.proxy(this.keydown, this) }], [this.component, { click: e.proxy(this.show, this) }]] : this.element.is("div") ? this.isInline = !0 : this._events = [[this.element, { click: e.proxy(this.show, this) }]]; for (var t = 0, n, r; t < this._events.length; t++) n = this._events[t][0], r = this._events[t][1], n.on(r) }, _detachEvents: function () { for (var e = 0, t, n; e < this._events.length; e++) t = this._events[e][0], n = this._events[e][1], t.off(n); this._events = [] }, show: function (t) { this.picker.show(), this.height = this.component ? this.component.outerHeight() : this.element.outerHeight(), this.update(), this.place(), e(window).on("resize", e.proxy(this.place, this)), t && (t.stopPropagation(), t.preventDefault()), this.element.trigger({ type: "show", date: this.date }) }, hide: function (t) { if (this.isInline) return; this.picker.hide(), e(window).off("resize", this.place), this.viewMode = this.startViewMode, this.showMode(), this.isInput || e(document).off("mousedown", this.hide), this.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find("input").val()) && this.setValue(), this.element.trigger({ type: "hide", date: this.date }) }, remove: function () { this._detachEvents(), this.picker.remove(), delete this.element.data().datepicker }, getDate: function () { var e = this.getUTCDate(); return new Date(e.getTime() + e.getTimezoneOffset() * 6e4) }, getUTCDate: function () { return this.date }, setDate: function (e) { this.setUTCDate(new Date(e.getTime() - e.getTimezoneOffset() * 6e4)) }, setUTCDate: function (e) { this.date = e, this.setValue() }, setValue: function () { var e = this.getFormattedDate(); this.isInput ? this.element.val(e) : (this.component && this.element.find("input").val(e), this.element.data("date", e)) }, getFormattedDate: function (e) { return e === undefined && (e = this.format), s.formatDate(this.date, e, this.language) }, setStartDate: function (e) { this.startDate = e || -Infinity, this.startDate !== -Infinity && (this.startDate = s.parseDate(this.startDate, this.format, this.language)), this.update(), this.updateNavArrows() }, setEndDate: function (e) { this.endDate = e || Infinity, this.endDate !== Infinity && (this.endDate = s.parseDate(this.endDate, this.format, this.language)), this.update(), this.updateNavArrows() }, setDaysOfWeekDisabled: function (t) { this.daysOfWeekDisabled = t || [], e.isArray(this.daysOfWeekDisabled) || (this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/)), this.daysOfWeekDisabled = e.map(this.daysOfWeekDisabled, function (e) { return parseInt(e, 10) }), this.update(), this.updateNavArrows() }, place: function () { if (this.isInline) return; var t = parseInt(this.element.parents().filter(function () { return e(this).css("z-index") != "auto" }).first().css("z-index")) + 10, n = this.component ? this.component.offset() : this.element.offset(), r = this.component ? this.component.outerHeight(!0) : this.element.outerHeight(!0); this.picker.css({ top: n.top + r, left: n.left, zIndex: t }) }, update: function () { var e, t = !1; arguments && arguments.length && (typeof arguments[0] == "string" || arguments[0] instanceof Date) ? (e = arguments[0], t = !0) : e = this.isInput ? this.element.val() : this.element.data("date") || this.element.find("input").val(), this.date = s.parseDate(e, this.format, this.language), t && this.setValue(); var n = this.viewDate; this.date < this.startDate ? this.viewDate = new Date(this.startDate) : this.date > this.endDate ? this.viewDate = new Date(this.endDate) : this.viewDate = new Date(this.date), n && n.getTime() != this.viewDate.getTime() && this.element.trigger({ type: "changeDate", date: this.viewDate }), this.fill() }, fillDow: function () { var e = this.weekStart, t = "<tr>"; while (e < this.weekStart + 7) t += '<th class="dow">' + i[this.language].daysMin[e++ % 7] + "</th>"; t += "</tr>", this.picker.find(".datepicker-days thead").append(t) }, fillMonths: function () { var e = "", t = 0; while (t < 12) e += '<span class="month">' + i[this.language].monthsShort[t++] + "</span>"; this.picker.find(".datepicker-months td").html(e) }, fill: function () { var n = new Date(this.viewDate), r = n.getUTCFullYear(), o = n.getUTCMonth(), u = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity, a = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity, f = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity, l = this.endDate !== Infinity ? this.endDate.getUTCMonth() : Infinity, c = this.date && this.date.valueOf(), h = new Date; this.picker.find(".datepicker-days thead th:eq(1)").text(i[this.language].months[o] + " " + r), this.picker.find("tfoot th.today").text(i[this.language].today).toggle(this.todayBtn !== !1), this.updateNavArrows(), this.fillMonths(); var p = t(r, o - 1, 28, 0, 0, 0, 0), d = s.getDaysInMonth(p.getUTCFullYear(), p.getUTCMonth()); p.setUTCDate(d), p.setUTCDate(d - (p.getUTCDay() - this.weekStart + 7) % 7); var v = new Date(p); v.setUTCDate(v.getUTCDate() + 42), v = v.valueOf(); var m = [], g; while (p.valueOf() < v) { p.getUTCDay() == this.weekStart && m.push("<tr>"), g = ""; if (p.getUTCFullYear() < r || p.getUTCFullYear() == r && p.getUTCMonth() < o) g += " old"; else if (p.getUTCFullYear() > r || p.getUTCFullYear() == r && p.getUTCMonth() > o) g += " new"; this.todayHighlight && p.getUTCFullYear() == h.getFullYear() && p.getUTCMonth() == h.getMonth() && p.getUTCDate() == h.getDate() && (g += " today"), c && p.valueOf() == c && (g += " active"); if (p.valueOf() < this.startDate || p.valueOf() > this.endDate || e.inArray(p.getUTCDay(), this.daysOfWeekDisabled) !== -1) g += " disabled"; m.push('<td class="day' + g + '">' + p.getUTCDate() + "</td>"), p.getUTCDay() == this.weekEnd && m.push("</tr>"), p.setUTCDate(p.getUTCDate() + 1) } this.picker.find(".datepicker-days tbody").empty().append(m.join("")); var y = this.date && this.date.getUTCFullYear(), b = this.picker.find(".datepicker-months").find("th:eq(1)").text(r).end().find("span").removeClass("active"); y && y == r && b.eq(this.date.getUTCMonth()).addClass("active"), (r < u || r > f) && b.addClass("disabled"), r == u && b.slice(0, a).addClass("disabled"), r == f && b.slice(l + 1).addClass("disabled"), m = "", r = parseInt(r / 10, 10) * 10; var w = this.picker.find(".datepicker-years").find("th:eq(1)").text(r + "-" + (r + 9)).end().find("td"); r -= 1; for (var E = -1; E < 11; E++) m += '<span class="year' + (E == -1 || E == 10 ? " old" : "") + (y == r ? " active" : "") + (r < u || r > f ? " disabled" : "") + '">' + r + "</span>", r += 1; w.html(m) }, updateNavArrows: function () { var e = new Date(this.viewDate), t = e.getUTCFullYear(), n = e.getUTCMonth(); switch (this.viewMode) { case 0: this.startDate !== -Infinity && t <= this.startDate.getUTCFullYear() && n <= this.startDate.getUTCMonth() ? this.picker.find(".prev").css({ visibility: "hidden" }) : this.picker.find(".prev").css({ visibility: "visible" }), this.endDate !== Infinity && t >= this.endDate.getUTCFullYear() && n >= this.endDate.getUTCMonth() ? this.picker.find(".next").css({ visibility: "hidden" }) : this.picker.find(".next").css({ visibility: "visible" }); break; case 1: case 2: this.startDate !== -Infinity && t <= this.startDate.getUTCFullYear() ? this.picker.find(".prev").css({ visibility: "hidden" }) : this.picker.find(".prev").css({ visibility: "visible" }), this.endDate !== Infinity && t >= this.endDate.getUTCFullYear() ? this.picker.find(".next").css({ visibility: "hidden" }) : this.picker.find(".next").css({ visibility: "visible" }) } }, click: function (n) { n.stopPropagation(), n.preventDefault(); var r = e(n.target).closest("span, td, th"); if (r.length == 1) switch (r[0].nodeName.toLowerCase()) { case "th": switch (r[0].className) { case "switch": this.showMode(1); break; case "prev": case "next": var i = s.modes[this.viewMode].navStep * (r[0].className == "prev" ? -1 : 1); switch (this.viewMode) { case 0: this.viewDate = this.moveMonth(this.viewDate, i); break; case 1: case 2: this.viewDate = this.moveYear(this.viewDate, i) } this.fill(); break; case "today": var o = new Date; o = t(o.getFullYear(), o.getMonth(), o.getDate(), 0, 0, 0), this.showMode(-2); var u = this.todayBtn == "linked" ? null : "view"; this._setDate(o, u) } break; case "span": if (!r.is(".disabled")) { this.viewDate.setUTCDate(1); if (r.is(".month")) { var a = r.parent().find("span").index(r); this.viewDate.setUTCMonth(a), this.element.trigger({ type: "changeMonth", date: this.viewDate }) } else { var f = parseInt(r.text(), 10) || 0; this.viewDate.setUTCFullYear(f), this.element.trigger({ type: "changeYear", date: this.viewDate }) } this.showMode(-1), this.fill() } break; case "td": if (r.is(".day") && !r.is(".disabled")) { var l = parseInt(r.text(), 10) || 1, f = this.viewDate.getUTCFullYear(), a = this.viewDate.getUTCMonth(); r.is(".old") ? a === 0 ? (a = 11, f -= 1) : a -= 1 : r.is(".new") && (a == 11 ? (a = 0, f += 1) : a += 1), this._setDate(t(f, a, l, 0, 0, 0, 0)) } } }, _setDate: function (e, t) { if (!t || t == "date") this.date = e; if (!t || t == "view") this.viewDate = e; this.fill(), this.setValue(), this.element.trigger({ type: "changeDate", date: this.date }); var n; this.isInput ? n = this.element : this.component && (n = this.element.find("input")), n && (n.change(), this.autoclose && (!t || t == "date") && this.hide()) }, moveMonth: function (e, t) { if (!t) return e; var n = new Date(e.valueOf()), r = n.getUTCDate(), i = n.getUTCMonth(), s = Math.abs(t), o, u; t = t > 0 ? 1 : -1; if (s == 1) { u = t == -1 ? function () { return n.getUTCMonth() == i } : function () { return n.getUTCMonth() != o }, o = i + t, n.setUTCMonth(o); if (o < 0 || o > 11) o = (o + 12) % 12 } else { for (var a = 0; a < s; a++) n = this.moveMonth(n, t); o = n.getUTCMonth(), n.setUTCDate(r), u = function () { return o != n.getUTCMonth() } } while (u()) n.setUTCDate(--r), n.setUTCMonth(o); return n }, moveYear: function (e, t) { return this.moveMonth(e, t * 12) }, dateWithinRange: function (e) { return e >= this.startDate && e <= this.endDate }, keydown: function (e) { if (this.picker.is(":not(:visible)")) { e.keyCode == 27 && this.show(); return } var t = !1, n, r, i, s, o; switch (e.keyCode) { case 27: this.hide(), e.preventDefault(); break; case 37: case 39: if (!this.keyboardNavigation) break; n = e.keyCode == 37 ? -1 : 1, e.ctrlKey ? (s = this.moveYear(this.date, n), o = this.moveYear(this.viewDate, n)) : e.shiftKey ? (s = this.moveMonth(this.date, n), o = this.moveMonth(this.viewDate, n)) : (s = new Date(this.date), s.setUTCDate(this.date.getUTCDate() + n), o = new Date(this.viewDate), o.setUTCDate(this.viewDate.getUTCDate() + n)), this.dateWithinRange(s) && (this.date = s, this.viewDate = o, this.setValue(), this.update(), e.preventDefault(), t = !0); break; case 38: case 40: if (!this.keyboardNavigation) break; n = e.keyCode == 38 ? -1 : 1, e.ctrlKey ? (s = this.moveYear(this.date, n), o = this.moveYear(this.viewDate, n)) : e.shiftKey ? (s = this.moveMonth(this.date, n), o = this.moveMonth(this.viewDate, n)) : (s = new Date(this.date), s.setUTCDate(this.date.getUTCDate() + n * 7), o = new Date(this.viewDate), o.setUTCDate(this.viewDate.getUTCDate() + n * 7)), this.dateWithinRange(s) && (this.date = s, this.viewDate = o, this.setValue(), this.update(), e.preventDefault(), t = !0); break; case 13: this.hide(), e.preventDefault(); break; case 9: this.hide() } if (t) { this.element.trigger({ type: "changeDate", date: this.date }); var u; this.isInput ? u = this.element : this.component && (u = this.element.find("input")), u && u.change() } }, showMode: function (e) { e && (this.viewMode = Math.max(0, Math.min(2, this.viewMode + e))), this.picker.find(">div").hide().filter(".datepicker-" + s.modes[this.viewMode].clsName).css("display", "block"), this.updateNavArrows() } }, e.fn.datepicker = function (t) { var n = Array.apply(null, arguments); return n.shift(), this.each(function () { var i = e(this), s = i.data("datepicker"), o = typeof t == "object" && t; s || i.data("datepicker", s = new r(this, e.extend({}, e.fn.datepicker.defaults, o))), typeof t == "string" && typeof s[t] == "function" && s[t].apply(s, n) }) }, e.fn.datepicker.defaults = {}, e.fn.datepicker.Constructor = r; var i = e.fn.datepicker.dates = { en: { days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"], months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], today: "Today" } }, s = { modes: [{ clsName: "days", navFnc: "Month", navStep: 1 }, { clsName: "months", navFnc: "FullYear", navStep: 1 }, { clsName: "years", navFnc: "FullYear", navStep: 10 }], isLeapYear: function (e) { return e % 4 === 0 && e % 100 !== 0 || e % 400 === 0 }, getDaysInMonth: function (e, t) { return [31, s.isLeapYear(e) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][t] }, validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g, nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g, parseFormat: function (e) { var t = e.replace(this.validParts, "\0").split("\0"), n = e.match(this.validParts); if (!t || !t.length || !n || n.length === 0) throw new Error("Invalid date format."); return { separators: t, parts: n } }, parseDate: function (n, s, o) { if (n instanceof Date) return n; if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(n)) { var u = /([\-+]\d+)([dmwy])/, a = n.match(/([\-+]\d+)([dmwy])/g), f, l; n = new Date; for (var c = 0; c < a.length; c++) { f = u.exec(a[c]), l = parseInt(f[1]); switch (f[2]) { case "d": n.setUTCDate(n.getUTCDate() + l); break; case "m": n = r.prototype.moveMonth.call(r.prototype, n, l); break; case "w": n.setUTCDate(n.getUTCDate() + l * 7); break; case "y": n = r.prototype.moveYear.call(r.prototype, n, l) } } return t(n.getUTCFullYear(), n.getUTCMonth(), n.getUTCDate(), 0, 0, 0) } var a = n && n.match(this.nonpunctuation) || [], n = new Date, h = {}, p = ["yyyy", "yy", "M", "MM", "m", "mm", "d", "dd"], d = { yyyy: function (e, t) { return e.setUTCFullYear(t) }, yy: function (e, t) { return e.setUTCFullYear(2e3 + t) }, m: function (e, t) { t -= 1; while (t < 0) t += 12; t %= 12, e.setUTCMonth(t); while (e.getUTCMonth() != t) e.setUTCDate(e.getUTCDate() - 1); return e }, d: function (e, t) { return e.setUTCDate(t) } }, v, m, f; d.M = d.MM = d.mm = d.m, d.dd = d.d, n = t(n.getFullYear(), n.getMonth(), n.getDate(), 0, 0, 0); var g = s.parts.slice(); a.length != g.length && (g = e(g).filter(function (t, n) { return e.inArray(n, p) !== -1 }).toArray()); if (a.length == g.length) { for (var c = 0, y = g.length; c < y; c++) { v = parseInt(a[c], 10), f = g[c]; if (isNaN(v)) switch (f) { case "MM": m = e(i[o].months).filter(function () { var e = this.slice(0, a[c].length), t = a[c].slice(0, e.length); return e == t }), v = e.inArray(m[0], i[o].months) + 1; break; case "M": m = e(i[o].monthsShort).filter(function () { var e = this.slice(0, a[c].length), t = a[c].slice(0, e.length); return e == t }), v = e.inArray(m[0], i[o].monthsShort) + 1 } h[f] = v } for (var c = 0, b; c < p.length; c++) b = p[c], b in h && !isNaN(h[b]) && d[b](n, h[b]) } return n }, formatDate: function (t, n, r) { var s = { d: t.getUTCDate(), D: i[r].daysShort[t.getUTCDay()], DD: i[r].days[t.getUTCDay()], m: t.getUTCMonth() + 1, M: i[r].monthsShort[t.getUTCMonth()], MM: i[r].months[t.getUTCMonth()], yy: t.getUTCFullYear().toString().substring(2), yyyy: t.getUTCFullYear() }; s.dd = (s.d < 10 ? "0" : "") + s.d, s.mm = (s.m < 10 ? "0" : "") + s.m; var t = [], o = e.extend([], n.separators); for (var u = 0, a = n.parts.length; u < a; u++) o.length && t.push(o.shift()), t.push(s[n.parts[u]]); return t.join("") }, headTemplate: '<thead><tr><th class="prev"><i class="fa fa-arrow-left"/></th><th colspan="5" class="switch"></th><th class="next"><i class="fa fa-arrow-right"/></th></tr></thead>', contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>', footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>' }; s.template = '<div class="datepicker"><div class="datepicker-days"><table class=" table-condensed">' + s.headTemplate + "<tbody></tbody>" + s.footTemplate + "</table>" + "</div>" + '<div class="datepicker-months">' + '<table class="table-condensed">' + s.headTemplate + s.contTemplate + s.footTemplate + "</table>" + "</div>" + '<div class="datepicker-years">' + '<table class="table-condensed">' + s.headTemplate + s.contTemplate + s.footTemplate + "</table>" + "</div>" + "</div>", e.fn.datepicker.DPGlobal = s }(window.jQuery), function (e) { var t = function (n) { this.init("typeahead", n, t.defaults), this.options.typeahead = e.extend({}, t.defaults.typeahead, { matcher: this.matcher, sorter: this.sorter, highlighter: this.highlighter, updater: this.updater }, n.typeahead) }; e.fn.editableutils.inherit(t, e.fn.editabletypes.list), e.extend(t.prototype, { renderList: function () { this.$input = this.$tpl.is("input") ? this.$tpl : this.$tpl.find('input[type="text"]'), this.options.typeahead.source = this.sourceData, this.$input.typeahead(this.options.typeahead), this.$input.data("typeahead").render = e.proxy(this.typeaheadRender, this.$input.data("typeahead")), this.renderClear(), this.setClass(), this.setAttr("placeholder") }, value2htmlFinal: function (t, n) { if (this.getIsObjects()) { var r = e.fn.editableutils.itemsByValue(t, this.sourceData); e(n).text(r.length ? r[0].text : "") } else e(n).text(t) }, html2value: function (e) { return e ? e : null }, value2input: function (t) { if (this.getIsObjects()) { var n = e.fn.editableutils.itemsByValue(t, this.sourceData); this.$input.data("value", t).val(n.length ? n[0].text : "") } else this.$input.val(t) }, input2value: function () { if (this.getIsObjects()) { var t = this.$input.data("value"), n = e.fn.editableutils.itemsByValue(t, this.sourceData); return n.length && n[0].text.toLowerCase() === this.$input.val().toLowerCase() ? t : null } return this.$input.val() }, getIsObjects: function () { if (this.isObjects === undefined) { this.isObjects = !1; for (var e = 0; e < this.sourceData.length; e++) if (this.sourceData[e].value !== this.sourceData[e].text) { this.isObjects = !0; break } } return this.isObjects }, activate: e.fn.editabletypes.text.prototype.activate, renderClear: e.fn.editabletypes.text.prototype.renderClear, postrender: e.fn.editabletypes.text.prototype.postrender, toggleClear: e.fn.editabletypes.text.prototype.toggleClear, clear: function () { e.fn.editabletypes.text.prototype.clear.call(this), this.$input.data("value", "") }, matcher: function (t) { return e.fn.typeahead.Constructor.prototype.matcher.call(this, t.text) }, sorter: function (e) { var t = [], n = [], r = [], i, s; while (i = e.shift()) s = i.text, s.toLowerCase().indexOf(this.query.toLowerCase()) ? ~s.indexOf(this.query) ? n.push(i) : r.push(i) : t.push(i); return t.concat(n, r) }, highlighter: function (t) { return e.fn.typeahead.Constructor.prototype.highlighter.call(this, t.text) }, updater: function (e) { return e = this.$menu.find(".active").data("item"), this.$element.data("value", e.value), e.text }, typeaheadRender: function (t) { var n = this; return t = e(t).map(function (t, r) { return t = e(n.options.item).data("item", r), t.find("a").html(n.highlighter(r)), t[0] }), t.first().addClass("active"), this.$menu.html(t), this } }), t.defaults = e.extend({}, e.fn.editabletypes.list.defaults, { tpl: '<input type="text">', typeahead: null, clear: !0 }), e.fn.editabletypes.typeahead = t }(window.jQuery);