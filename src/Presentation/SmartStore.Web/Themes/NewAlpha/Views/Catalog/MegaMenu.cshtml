@model NavigationModel
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Services.Catalog;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Collections;

@functions {
	private string GetNodeLink(TreeNode<MenuItem> node)
	{
		return node.Value.GenerateUrl(this.Url);
	}

	private string GetCssClassForNode(TreeNode<MenuItem> node, NodePathState state)
	{
		var liClasses = new List<string>();

		liClasses.Add("nav-item");

		if (node.Depth <= 1 && node.HasChildren)
		{
			liClasses.Add(node.Depth > 0 ? "dropdown-submenu" : "dropdown");
		}

		if ((state & NodePathState.Expanded) == NodePathState.Expanded)
		{
			liClasses.Add("active expanded");
		}

		if ((state & NodePathState.Selected) == NodePathState.Selected)
		{
			liClasses.Add("active");
		}

		return liClasses.Count > 0 ? String.Join(" ", liClasses) : null;
	}

}

@if (!GetThemeVariable<bool>("DisplayNavbar", true))
{
	return;
}

<div class="megamenu">
	<ul class="nav navbar-nav x-nav-smart shrinkable">

		@Html.Widget("megamenu_before_first_item")

		@foreach (var node in Model.Root.Children)
		{
			var item = node.Value;

			if (!item.Visible)
			{
				continue;
			}

			var itemUrl = GetNodeLink(node);
			var itemState = node.GetNodePathState(Model.Path);

			<li class='@(GetCssClassForNode(node, itemState))'>
				@if (node.HasChildren)
				{
					<a href="@itemUrl" class="nav-link dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
						@item.Text
					</a>
					@CreateDrilldownMenu(node.Children, true)
				}
				else
				{
					<a href="@itemUrl" class="nav-link">
						@item.Text
					</a>
				}
			</li>
		}

		@Html.Widget("megamenu_after_last_item")

	</ul>

	<ul class="nav navbar-nav x-nav-smart shrink-menu pull-right">
		<li class="nav-item dropdown">
			<a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" rel="nofollow">
				<i class="fa fa-ellipsis-h"></i>
			</a>
			<div class="dropdown-menu dropdown-menu-right"></div>
		</li>
	</ul>
</div>

@helper CreateDrilldownMenu(IEnumerable<TreeNode<MenuItem>> nodes, bool isRoot)
{
    if (isRoot)
    {
        @Html.Raw("<div class='dropdown-menu'>")
    }
    
    foreach (var node in nodes)
	{
		var item = node.Value;

		if (!item.Visible)
		{
			continue;
		}

		var itemUrl = GetNodeLink(node);
		var itemState = node.GetNodePathState(Model.Path);
		
        <a class='dropdown-item@((itemState & NodePathState.Selected) == NodePathState.Selected ? " active" : "")' href="@itemUrl">@item.Text</a>
    }
    
    if (isRoot)
    {
        @Html.Raw("</div>")
    }
}