@model PagingFilteringModel
@using SmartStore.Web.Models.Catalog;

@helper CreateOptionChooser(IList<ListOptionItem> options, string label = "", string icon = "", bool rightFloat = false)
{
    var selectedOption = options.FirstOrDefault(x => x.Selected);
    var floatClass = rightFloat ? "pull-right" : "pull-left";
    <div class="btn-group m-r-05 @floatClass">
		<button type="button" class="btn btn-secondary dropdown-toggle tooltip-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="@label: @selectedOption.Text">
			@if (icon.HasValue())
			{
				<i class="fa fa-fw fa-@icon"></i>
			}
			@selectedOption.Text
		</button>
        <div class="dropdown-menu">
            @foreach(var opt in options)
			{
				<a class="dropdown-item@(opt.Selected ? " disabled" : "")" href="@opt.Url">@opt.Text</a>
            }
        </div>
    </div>
}

<div class="product-list-options clearfix m-y-1">
    @if (Model.AllowProductViewModeChanging)
    {
        <div class="product-viewmode pull-right">
            <div class="btn-group">
                @foreach (var mode in Model.AvailableViewModes)
                {
					<a href="@mode.Url" class='btn btn-icon btn-secondary@(mode.Selected ? " active" : "") tooltip-toggle' rel="tooltip nofollow" title='@T("Categories.ViewMode"): @mode.Text'>
                        @if ((string)mode.ExtraData == "grid") {
                            <i class="fa fa-th"></i>
                        }
                        else {
                            <i class="fa fa-bars"></i>
                        }
                    </a>
                }
            </div>
        </div>
	}
	@*sorting*@
	@if (Model.AllowProductSorting)
	{
		@CreateOptionChooser(Model.AvailableSortOptions, T("Categories.OrderBy").Text, "sort")
	}
	@*page size *@
	@if (Model.AllowCustomersToSelectPageSize)
	{
		@CreateOptionChooser(Model.PageSizeOptions, T("Categories.PageSize").Text, "sort-amount-asc")
	}
</div>
