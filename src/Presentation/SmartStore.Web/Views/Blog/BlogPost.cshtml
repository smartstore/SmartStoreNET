@model BlogPostModel
@using SmartStore.Web.Models.Blogs;
@{
    Layout = "_ColumnsTwo";

    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

	string avatarSpanning = (Model.AllowCustomersToUploadAvatars ? "padding-left: {0}px; min-height: {0}px;".FormatWith(Model.AvatarPictureSize + 30) : "");
}

@section left {
    @{
        Html.RenderAction("BlogMonths", "Blog");
        Html.RenderAction("BlogTags", "Blog");
    }
}

<article class="page blogpost-page">
    
    <div class="blogpost-date text-muted">
        @Model.CreatedOn.ToString("D")
    </div>

    <h1 class="page-title fs-h3">
        @Model.Title
    </h1>

    <div class="blogpost-body">
		@{ Html.RenderWidget("blogpost_page_before_body"); }
        <div class="blogpost-content">
            @Html.Raw(Model.Body)
        </div>

        @if (Model.Tags.Count > 0)
        {
            <div class="blogpost-tags card-block">
                <i class="fa fa-tags" title='@T("Blog.Tags")'></i>
                @for (int i = 0, length = Model.Tags.Count; i < length; i++)
                {
                    var tag = Model.Tags[i];
                    var isLast = i == length - 1;
                    <a class="blogpost-tag" href="@Url.RouteUrl("BlogByTag", new { tag = tag })">@tag</a>@(!isLast ? ", " : "")
                }
            </div>
        }

		@{ Html.RenderWidget("blogpost_page_before_comments"); }
        @if (Model.AllowComments)
        {
            <div id="new-comment" class="new-comment card">
                <div class="card-block">
                    <h3 class="card-title">@T("Blog.Comments.LeaveYourComment")</h3>
                    @using (Html.BeginForm())
                    {
                        <div class="card-text">
                            @Html.ValidationSummary()
                            <div class="forms-box">
                                <div class="inputs">
                                    @Html.LabelFor(model => model.AddNewComment.CommentText)
                                    <div class="input-box">
                                        @Html.TextAreaFor(model => model.AddNewComment.CommentText, new { @class = "comment-text" })
                                    </div>
                                </div>
                                @if (Model.AddNewComment.DisplayCaptcha)
                                {
                                    <div class="captcha-box">
                                        @Html.Raw(Html.GenerateCaptcha())
                                    </div>
                                }
                            </div>

                            <div class="buttons">
                                <button type="submit" name="add-comment" value="add-comment" class="btn btn-primary blog-post-add-comment-button">
                                    <i class="fa fa-check"></i>
                                    @T("Blog.Comments.SubmitButton")
                                </button>
                            </div>
                        </div>
                    }
                </div>

            </div>
            
            if (Model.Comments.Count > 0)
            {
                <div class="comment-list block">

                    <div class="title block-title">
                        @T("Blog.Comments") (@Model.NumberOfComments)
                    </div>

                    <div class="block-body">
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="comment-item blog-comment clearfix" style="@avatarSpanning">
                            
                            @if (!String.IsNullOrEmpty(comment.CustomerAvatarUrl))
                            {
								<div class="comment-avatar">
									<img src="@(comment.CustomerAvatarUrl)" class="avatar-img img-thumbnail" title="avatar" alt="avatar" />
								</div>
                            }

                            <div class="comment-content">
                                <div class="comment-info">
                                    @if (comment.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" rel="nofollow" class="username">@(comment.CustomerName)</a>
                                    }
                                    else
                                    {
                                        <span class="username">@(comment.CustomerName)</span>
                                    }
                                    <span class="comment-time">
                                        @comment.CreatedOn.ToString("D")
                                    </span>
                                </div>
                                <div class="comment-body">
                                    @Html.Raw(SmartStore.Core.Html.HtmlUtils.FormatText(comment.CommentText, false, true, false, false, false, false))
                                </div>
                            </div>

							@{ Html.RenderWidget("blogpost_page_inside_comment"); }
                        </div>
                    }
                    </div>
                </div>
            }
        }

		@{ Html.RenderWidget("blogpost_page_after_comments"); }
    </div>
</article>
