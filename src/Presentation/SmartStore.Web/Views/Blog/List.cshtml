@model BlogPostListModel
@using SmartStore.Web.Models.Blogs;
@using SmartStore.Web.Framework.UI;
@using System.Globalization;

@{
    Layout = "_Layout";

    var parsedMonth = Model.PagingFilteringContext.GetParsedMonth();

    Html.AddTitleParts(
        parsedMonth != null ?
        T("PageTitle.Blog.Month").Text.FormatWith(parsedMonth.Value.ToNativeString("MMMM", CultureInfo.InvariantCulture) + " " + parsedMonth.Value.Year) :
        T("PageTitle.Blog.Tag").Text.FormatWith(Model.PagingFilteringContext.Tag)
    );
    Html.AddMetaDescriptionParts(
        parsedMonth != null ?
        T("Metadesc.Blog.Month").Text.FormatWith(parsedMonth.Value.ToNativeString("MMMM", CultureInfo.InvariantCulture) + " " + parsedMonth.Value.Year) :
        T("Metadesc.Blog.Tag").Text.FormatWith(Model.PagingFilteringContext.Tag)
    );
}

@section right {
    @{
        Html.RenderAction("BlogMonths", "Blog");
        Html.RenderAction("BlogTags", "Blog");

        <div class="d-none d-lg-block">
            @{ Html.RenderAction("PollBlock", "Poll", new { systemKeyword = "Blog" }); }
        </div>
    }
}

<div class="page blog-page">
    <div class="page-title row">
        <div class="col">
            <div class="heading">
                <h1 class="heading-title">
                    @if (!Model.PagingFilteringContext.Tag.HasValue())
                    {
                        if (Model.PagingFilteringContext.GetParsedMonth().HasValue)
                        {
                            @T("Blog.FilteredByMonth", Model.PagingFilteringContext.GetParsedMonth().Value.Year, Model.PagingFilteringContext.GetParsedMonth().Value.ToNativeString("MMMM"))
                        }
                        else
                        {
                            @T("Blog")
                        }
                    }
                    else
                    {
                        @T("Blog.TaggedWith", Model.PagingFilteringContext.Tag)
                    }
                </h1>
            </div>
        </div>
        <div class="col col-auto text-right">
            <a class="btn btn-warning" href="@Url.RouteUrl("BlogRSS", new { languageId = Model.WorkingLanguageId })" title="@T("Blog.RSS.Hint")">
                <i class="fa fa-rss"></i>
                <span>@T("Blog.RSS")</span>
            </a>
        </div>
    </div>

    <div class="page-body">

        @{ Html.RenderWidget("bloglist_page_before_posts"); }

        <div class="blogposts">
            <div class="card-columns card-cols-sm-1 card-cols-lg-2">

                @foreach (var item in Model.BlogPosts)
                {
                    var imageUrl = item.PreviewPictureModel.ImageUrl;
                    var itemHasImage = item.PreviewPictureModel.ImageUrl.HasValue();
                    var itemHasBgImage = item.HasBgImage && itemHasImage;
                    var articleClass = "card rounded shadow-sm border-0 box-img-top{0}{1}{2}{3}".FormatWith(
                        itemHasBgImage ? " bg-tint-3 has-image-bg" : "",
                        item.SectionBg.HasValue() ? " has-section-bg section-" + item.SectionBg : "",
                        item.Tags.Count > 0 && item.DisplayTagsInPreview ? " has-tags" : "",
                        itemHasImage ? " has-image" : ""
                    );
                    
                    <article class="@articleClass" itemscope itemtype="http://schema.org/BlogPosting">

                        @if (itemHasBgImage)
                        {
                            @RenderTags(item)
                            @RenderComments(item)

                            <div class="box-img-wrapper card-img">
                                <img class="card-img box-scale" src="@imageUrl" alt="@item.PreviewPictureModel.AlternateText" title="@item.PreviewPictureModel.Title" itemprop="image">
                            </div>
                            <div class="bg-overlay bg-@(item.SectionBg) card-img"></div>
                            <div class="bg-overlay bg-shade bg-shade-@(item.SectionBg) card-img h-50"></div>
                        }
                        else if(!item.SectionBg.HasValue() && itemHasImage)
                        {
                            <div class="box-img-wrapper">

                                <a href="@Url.RouteUrl("BlogPost", new { SeName = item.SeName })">
                                    <img class="box-img box-scale" src="@imageUrl" alt="@item.PreviewPictureModel.AlternateText" title="@item.PreviewPictureModel.Title" itemprop="image">
                                </a>
                                
                                @RenderTags(item)
                                @RenderComments(item)
                            </div>
                        }
                        else
                        {
                            @RenderTags(item)
                            @RenderComments(item)
                        }

                        <div class="@(itemHasBgImage ? "card-img-overlay d-flex flex-column justify-content-end" : "box-img-top")">

                            <div class="blogpost-text text-left w-100 p-3">
                                <div class="blogpost-date mb-2 text-muted" itemprop="dateCreated">
                                    @item.CreatedOn.ToNativeString("dd MMMM, yyyy")
                                </div>

                                <h3 class="fs-h4 mb-3 mt-1 font-weight-medium">
                                    <a href="@Url.RouteUrl("BlogPost", new { SeName = item.SeName })" class="blogpost-title fs-h6" itemprop="headline">
                                        @item.Title
                                    </a>
                                </h3>

                                @if (item.Intro.HasValue())
                                {
                                    <div class="py-1 blogpost-intro" itemprop="description">@Html.Raw(item.Intro)</div>
                                }

                                @{ Html.RenderWidget("bloglist_page_inside_post"); }

                            </div>
                        </div>
                        
                    </article>
                }
            </div>
        </div>

        @(Html.SmartStore().Pager(Model.PagingFilteringContext)
                .Name("pagination-bottom")
                .QueryParam("pagenumber")
                .ShowFirst(false)
                .ShowLast(false)
                .Style(PagerStyle.Pagination)
                .MaxPagesToDisplay(6))

        @{ Html.RenderWidget("bloglist_page_after_posts"); }
    </div>
</div>


@helper RenderTags(BlogPostModel item)
{
    if (item.Tags.Count > 0 && item.DisplayTagsInPreview)
    {
        <div class="blogpost-tags-overlay mb-3 mb-md-0 p-2">
            @for (int i = 0, length = item.Tags.Count; i < length; i++)
            {
                var tag = item.Tags[i];
                var tagClasses = "blogpost-tag badge p-1 {0}".FormatWith(item.SectionBg.HasValue() && item.SectionBg.Equals("primary") && !item.HasBgImage ? "badge-secondary" : "badge-primary");

                <a class="@tagClasses" href="@Url.RouteUrl("BlogByTag", new { tag = tag.SeName })">@tag.Name</a>
            }
        </div>
    }
}

@helper RenderComments(BlogPostModel item)
{
    if (item.Comments.AllowComments)
    {
        <div class="comments-overlay">
            <a class="fs-xs m-2 btn btn-secondary btn-circle@(item.Comments.NumberOfComments > 0 ? " vivid" : "")"
                href="@Url.RouteUrl("BlogPost", new { SeName = item.SeName })"
                title="@string.Format(@T("Blog.CommentsLink").Text, item.Comments.NumberOfComments)">
                <span class="blogpost-comments-icon fa fa-comment-alt pr-1"></span>
                <span class="blogpost-comments-count">@item.Comments.NumberOfComments</span>
            </a>
        </div>
    }
}

