@model SearchModel
@using SmartStore.Core.Domain.Forums;
@using SmartStore.Web.Models.Boards;
@using SmartStore.Web.Models.Common;
@using SmartStore.Web.Framework.UI;
@{   
    Layout = "_Layout";
    Html.AddTitleParts(T("Forum.PageTitle.Search").Text);
}

<script type="text/javascript">
    $(function () {
        toggleAdvancedSearch();
        $('#adv').click(function () {
            toggleAdvancedSearch();
        });
    });

    function toggleAdvancedSearch() {
        if ($('#adv').is(':checked')) {
            $('#advanced-search-block').show();
        }
        else {
            $('#advanced-search-block').hide();
        }
    }
</script>

<div class="page forum-search">
    <div class="forum-search-panel">
        <div class="page-title">
            <h1 class="fs-h2">@T("Forum.Search")</h1>
        </div>

        <div class="search-input col-10 push-1 mt-4">
            @using (Html.BeginRouteForm("BoardSearch", FormMethod.Get))
            {
                
                <div class="input-group d-flex">
                    @Html.TextBox("searchterms", null, new { @class = "forum-search-text form-control" })
                    <input type="submit" class="btn btn-primary input-group-addon" value="@T("Forum.SearchButton")" />
                </div>

                <div class="checkbox mt-2">
                    <label class="form-check-label">
                        @Html.CheckBox("adv", Model.ShowAdvancedSearch, new { @class = "check-box form-check-input" })
                        @T("Forum.Search.AdvancedSearch")
                    </label>
                </div>
                
                <div id="advanced-search-block" style="display: none;">
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">@T("Forum.Search.SearchInForum")</label>
                        <div class="col-sm-8">
                            @Html.DropDownList("forumId", new SelectList(Model.ForumList, "Value", "Text", Model.ForumIdSelected), new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">@T("Forum.Search.SearchWithin")</label>
                        <div class="col-sm-8">
                            @Html.DropDownList("within", new SelectList(Model.WithinList, "Value", "Text", Model.WithinSelected), new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">@T("Forum.Search.LimitResultsToPrevious")</label>
                        <div class="col-sm-8">
                            @Html.DropDownList("limitDays", new SelectList(Model.LimitList, "Value", "Text", Model.LimitDaysSelected), new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="search-error">
            @Model.Error
        </div>

        @{
            var searchterms = Model.SearchTerms;
            string adv = null;
            string within = null;
            string limitDays = null;
            string forumId = null;

            if (Model.ShowAdvancedSearch)
            {
                adv = "true";
                within = Model.WithinSelected.ToString();
                limitDays = Model.LimitDaysSelected.ToString();
                forumId = Model.ForumIdSelected.ToString();
            }

            var pager = Html.SmartStore().Pager(Model.TopicPageIndex, Model.TopicPageSize, Model.TopicTotalRecords)
                .Name("paginator")
                .Alignment(PagerAlignment.Right)
                .Route("BoardSearch", new ForumSearchRouteValues { adv = adv, searchterms = searchterms, forumId = forumId, within = within, limitDays = limitDays });
        }

        @pager

        <div class="search-results">
            @if (@Model.NoResultsVisisble == true)
            {
                <span class="result">@T("Forum.SearchNoResultsText")</span>
            }
            <div class="topics-group">
                @if (@Model.SearchResultsVisible == true)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="topic-name" colspan="2">
                                    @T("Forum.TopicTitle")
                                </th>
                                <th class="replies">
                                    @T("Forum.Replies")
                                </th>
                                <th class="views">
                                    @T("Forum.Views")
                                </th>
                                <th class="last-post">
                                    @T("Forum.LatestPost")
                                </th>
                            </tr>
                        </thead>
                        @foreach (var topic in @Model.ForumTopics)
                        {
                            <tr class="topic">
                                <td class="image">
                                    @{
                                        var topicType = "post";
                                        var topicText = String.Empty;
                                        var topicIcon = "fa fa-comment-o";
                                        switch (topic.ForumTopicType)
                                        {
                                            case ForumTopicType.Normal:
                                                topicType = "post";
                                                topicIcon = "fa fa-comment-o";
                                                break;
                                            case ForumTopicType.Sticky:
                                                topicType = "poststicky";
                                                topicIcon = "fa fa-thumb-tack";
                                                topicText = string.Format("<label class='label label-important'>{0}</label>", @T("Forum.Sticky").ToString());
                                                break;
                                            case ForumTopicType.Announcement:
                                                topicType = "post-annoucement";
                                                topicIcon = "fa fa-bullhorn";
                                                topicText = string.Format("<label class='label label-success'>{0}</label>", @T("Forum.Announcement").ToString());
                                                break;
                                            default:
                                                topicType = "post";
                                                topicIcon = "fa fa-comment-o";
                                                break;
                                        }
                                        <div class="@topicType">
                                            <i class="icon @topicIcon"></i>
                                        </div>
                                    }
                                </td>
                                <td class="topic-name">
                                    @if (!String.IsNullOrEmpty(@topicText))
                                    {
                                        <span class="topictype">@Html.Raw(topicText)</span>
                                    }
                                    @Html.RouteLink(topic.Subject, "TopicSlug", new { id = topic.Id, slug = topic.SeName }, new { @class = "topic-title" })
                                    @if (@topic.NumPosts > Model.PostsPageSize)
                                    {
                                        @(Html.SmartStore().Pager(topic.TotalPostPages)
                                            .HtmlAttributes(new { @class = "topics-pager" })
                                            .WithRenderer<ForumTopicPagerRenderer>()
                                            .ShowPrevious(false)
                                            .ShowNext(false)
                                            .ItemTitleFormatString(T("Forum.Topics.GotoPostPager"))
                                            .Alignment(PagerAlignment.Left)
                                            .Size(PagerSize.Mini)
                                            .Route("TopicSlug", new { id = topic.Id, slug = topic.SeName }))
                                    }
                                    <div class="topic-starter">
                                        @if (@topic.CustomerId > 0)
                                        {
                                            if (topic.AllowViewingProfiles && !topic.IsCustomerGuest)
                                            {
                                                @T("Forum.Author")<text>:</text> @Html.RouteLink(topic.CustomerName, "CustomerProfile", new { Id = topic.CustomerId })
                                            }
                                            else
                                            {
                                                @T("Forum.Author")<text>:</text> @topic.CustomerName
                                            }
                                        }
                                    </div>
                                </td>
                                <td class="replies">
                                    @topic.NumReplies
                                </td>
                                <td class="views">
                                    @topic.Views
                                </td>
                                <td class="last-post">
                                    @{ Html.RenderAction("LastPost", new { forumPostId = @topic.LastPostId, showTopic = false }); }
                                </td>
                            </tr>
                        }
                    </table>
                }
            </div>
        </div>

        @pager

    </div>
</div>
