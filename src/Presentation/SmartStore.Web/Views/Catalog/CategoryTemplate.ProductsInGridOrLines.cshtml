@model CategoryModel

@{
	Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
	Html.AddMetaDescriptionParts(Model.MetaDescription);
	Html.AddMetaKeywordParts(Model.MetaKeywords);

	var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
	if (canonicalUrlsEnabled)
	{
		var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Request.Url.Scheme);
		Html.AddCanonicalUrlParts(categoryUrl);
	}

	Layout = "_ColumnsTwo";
}

@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Core.Domain.Seo;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Web.Framework.UI;

@helper SubCategoryList()
{
	<div class="artlist artlist-grid artlist-4-cols artlist-boxed artlist-sub-categories">
		@foreach (var item in Model.SubCategories)
		{
			var picture = item.PictureModel;
			var url = Url.RouteUrl("Category", new { SeName = item.SeName });
			<article class="art" data-id="@item.Id">
				<div class="art-picture-block">
					@if (picture != null && picture.ImageUrl.HasValue())
					{
						<a class="art-picture img-center-container" href="@url" title="@picture.Title">
							<img src="@picture.ImageUrl" alt="@picture.AlternateText" />
						</a>
					}
				</div>
				<div class="art-genericname">
					<a href="@url" title="@item.Name">
						<span>@item.Name</span>
					</a>
				</div>
			</article>
		}
	</div>
}

@if (Model.DisplayCategoryBreadcrumb)
{
    using (Html.BeginZoneContent("teaser", injectMode: ZoneInjectMode.Prepend))
    {
		<ul id="breadcrumb" class="breadcrumb">
			<li>
				<a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")"><i class="fa fa-home"></i></a>
			</li>

			@for (int i = 0; i < Model.CategoryBreadcrumb.Count; i++)
            {
                var menuItem = Model.CategoryBreadcrumb[i];
                var isLastCategory = menuItem.EntityId == Model.Id;
				<li>
					@if (isLastCategory)
                    {
						@menuItem.Text
                    }
                    else
                    {
						<a href="@menuItem.GenerateUrl(this.Url)" title="@menuItem.Text">@menuItem.Text</a>
                    }
				</li>
            }
		</ul>
    }
}

@section left {
	@{ 
		Html.RenderAction("CategoryNavigation", "Catalog", new { currentCategoryId = this.CurrentCategoryId, currentProductId = this.CurrentProductId, area = "" });
		Html.RenderAction("Filters", "Search", new { model = Model });
	}
}

<div class="page category-page">
    <div class="page-title">
        <h1 class="h3">
			@(Model.FullName.HasValue() ? Model.FullName : Model.Name)
		</h1>
    </div>

    <div class="page-body">
        @{ Html.RenderWidget("categorydetails_top");}

        @* Description *@
        @if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description text-body">
                @Html.Raw(Html.CollapsedText(Model.Description))
            </div>
        }

        @* Subcategories *@
        @if (Model.SubCategories.Count > 0 && Model.SubCategoryDisplayType == SubCategoryDisplayType.AboveProductList)
        {
            Html.RenderWidget("categorydetails_before_subcategories");
            @SubCategoryList()
        }

        @* Featured products *@
        @if (Model.FeaturedProducts != null && Model.FeaturedProducts.Items.Count > 0)
        {
            Html.RenderWidget("categorydetails_before_featured_products");

			<div class="featured-product-grid">
                <div class="section-title">
                    @T("Products.FeaturedProducts")
                </div>
				@{ 
                    Html.RenderPartial("Product.List", Model.FeaturedProducts);
				}
            </div>
                    }

        @* Product list *@
        @{ Html.RenderWidget("categorydetails_before_product_list"); }

        <div class="product-list-container">
            @if (Model.Products != null && Model.Products.Items.Count > 0)
            {
                Html.RenderPartial("Product.List", Model.Products);
            }
        </div>

        @if (Model.BottomDescription.HasValue())
        {
            <div class="category-description text-body">
                @Html.Raw(Html.CollapsedText(Model.BottomDescription))
            </div>
        }

        @* Subcategories *@
        @if (Model.SubCategories.Count > 0 && Model.SubCategoryDisplayType == SubCategoryDisplayType.Bottom)
        {
            Html.RenderWidget("categorydetails_before_subcategories");
            @SubCategoryList()
        }

		@* TODO: (mc) find more intelligent way of rendering RecentlyViewedProductsBlock globally *@
		@{ Html.RenderAction("RecentlyViewedProductsBlock", "Catalog", new { area = "" }); }

        @{ Html.RenderWidget("categorydetails_bottom"); }
    </div>
</div>
