@using SmartStore.Core.Domain.Seo;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Web.Framework.UI;

@model ManufacturerModel
@{
	Layout = "_ColumnsTwo";
	Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
	Html.AddMetaDescriptionParts(Model.MetaDescription);
	Html.AddMetaKeywordParts(Model.MetaKeywords);

	var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
	if (canonicalUrlsEnabled)
	{
		var manufacturerUrl = Url.RouteUrl("Manufacturer", new { SeName = Model.SeName }, this.Request.Url.Scheme);
		Html.AddCanonicalUrlParts(manufacturerUrl);
	}

	Layout = Model.SearchResult.Facets.Count > 0 ? "_ColumnsTwo" : "_ColumnsOne";
}

@if (Model.SearchResult.Facets.Count > 0)
{
	@section left {
		@{ Html.RenderAction("Filters", "Search", new { model = Model }); }
	}
}

<div class="page manufacturer-page">
    <div class="page-title">
        <h1 class="h3">@Model.Name</h1>
    </div>

    <div class="page-body">
        @{ Html.RenderWidget("manufacturerdetails_top"); }
        
		@* Description *@
        @if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="manufacturer-description text-body">
                @Html.Raw(Html.CollapsedText(Model.Description))
            </div>
        }

		@* Featured products *@
        @if (Model.FeaturedProducts != null && Model.FeaturedProducts.Items.Count > 0)
        {
            Html.RenderWidget("manufacturerdetails_before_featured_products");

			<div class="featured-product-grid">
				<div class="section-title">
					@T("Products.FeaturedProducts")
				</div>
				@{
                    Html.RenderPartial("Product.List", Model.FeaturedProducts);
				}
			</div>
                    }

		@* Product list *@
		@{ Html.RenderWidget("categorydetails_before_product_list"); }

		<div class="product-list-container">
			@if (Model.Products != null && Model.Products.Items.Count > 0)
            {
                Html.RenderPartial("Product.List", Model.Products);
            }
		</div>

		@* TODO: (mc) find more intelligent way of rendering RecentlyViewedProductsBlock globally *@
		@{ Html.RenderAction("RecentlyViewedProductsBlock", "Catalog", new { area = "" }); }

        @{ Html.RenderWidget("manufacturerdetails_bottom"); }
    </div>
</div>
