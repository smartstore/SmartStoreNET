@model NavigationModel
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Services.Catalog;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Collections;

@functions {
	private string GetNodeLink(TreeNode<MenuItem> node)
	{
		return node.Value.GenerateUrl(this.Url);
	}
	
	private string GetCssClassForNode(TreeNode<MenuItem> node, NodePathState state) 
    {
        var liClasses = new List<string>();

        if (node.Depth == 2)
        {
            liClasses.Add("drop-list-item");
		}

		if (node.Depth <= 2 && node.HasChildren)
		{
			liClasses.Add(node.Depth > 1 ? "dropdown-submenu" : "dropdown");
        }
        
        if ((state & NodePathState.Expanded) == NodePathState.Expanded)
        {
            liClasses.Add("expanded");
        }

        if ((state & NodePathState.Selected) == NodePathState.Selected)
        {
            liClasses.Add("selected");
        }

        return liClasses.Count > 0 ? String.Join(" ", liClasses) : null;
    }
    
}

@if(GetThemeVariable<bool>("DisplayNavbar") )
{ 
<div class="container">
    <div id='megamenu' class='navbar@(GetThemeVariable<bool>("InverseNavbar") ? " navbar-inverse" : "")@(GetThemeVariable<bool>("DisplayNavbar") ? "" : " hide")'>
        <div class="navbar-inner">
            <div class="container">
                <ul class="nav nav-smart shrinkable" style="margin-right: 0;">
                    
                    @Html.Widget("megamenu_before_first_item")

                    @foreach (var node in Model.Root.Children)
                    {
                        var item = node.Value;

                        if (!item.Visible)
                        {
                            continue;
                        }

                        var itemUrl = GetNodeLink(node);
                        var itemState = node.GetNodePathState(Model.Path);

                        <li class='@(GetCssClassForNode(node, itemState))'>
                            <a href="@itemUrl" @Html.Attr("class", "dropdown-toggle", node.HasChildren) data-target="#">
                                @item.Text
                                @if (item.ElementsCount.GetValueOrDefault() > 0)
                                {
                                    <text> (@(item.ElementsCount))</text>
                                }

                                @if (node.HasChildren)
                                {
                                    <i class="fa fa-caret-down chevron"></i>
                                }
                            </a>

                            @if (node.HasChildren)
                            {
                                @CreateDrilldownMenu(node.Children, true)
                            }

                        </li>
                        if (node.Next != null)
                        {
                            <li class="divider-vertical"></li>
                        }
                    }

                    @Html.Widget("megamenu_after_last_item")

                </ul>

                <ul class="nav nav-smart shrink-menu pull-right hide">
                    <li class="dropdown">
                        <a class="dropdown-toggle" href="#" data-target="#" onclick="return false;" rel="nofollow">
                            <sup>...</sup>
                        </a>
                        <div class="dropdown-menu pull-right"></div>
                    </li>
                </ul>

            </div>
        </div>
    </div>
</div>

}

@helper CreateDrilldownMenu(IEnumerable<TreeNode<MenuItem>> nodes, bool isRoot)
{
    if (isRoot)
    {
        @Html.Raw("<div class='dropdown-menu'><div class='dropdown-menu-inner clearfix'>")
    }
    
    <ul class='@(isRoot ? "drop-list" : "dropdown-menu")'>
    @foreach (var node in nodes)
	{
		var item = node.Value;

		if (!item.Visible)
		{
			continue;
		}

		var itemUrl = GetNodeLink(node);
		var itemState = node.GetNodePathState(Model.Path);
		
        <li class='@(GetCssClassForNode(node, itemState))'> 
            <a href="@itemUrl">@item.Text</a>
            @if (node.Depth <= 2 && node.HasChildren)
            {
                @CreateDrilldownMenu(node.Children, false)
            }
        </li>
    }
    </ul>
    
    if (isRoot)
    {
        @Html.Raw("</div></div>")
    }
}