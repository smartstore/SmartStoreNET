@model NavigationModel

@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Collections;

@{ 
	if (Model.SelectedNode.IsRoot || !Model.Root.HasChildren)
	{
		return;
	}

	var selectedNode = Model.SelectedNode;
	var path = Model.Path.Take(Model.Path.Count - 1).ToList();

	var items = selectedNode.Depth == 1
		? Model.SelectedNode.Children
		: Model.SelectedNode.Parent.Children;

	if (!path.Any() && !items.Any())
	{
		return;
	}
}

@functions {
    private string GetCssClassForNode(NodePathState state) 
    {
        var liClasses = new List<string>();

        if ((state & NodePathState.Parent) == NodePathState.Parent)
        {
            liClasses.Add("parent");
        }

        if ((state & NodePathState.Expanded) == NodePathState.Expanded)
        {
            liClasses.Add("expanded");
        }

        if ((state & NodePathState.Selected) == NodePathState.Selected)
        {
            liClasses.Add("selected");
        }

        return liClasses.Count > 0 ? String.Join(" ", liClasses) : null;
    }

    private bool ShouldRenderChildren(NodePathState state)
    {
        if (!((state & NodePathState.Parent) == NodePathState.Parent) || !Model.Path.Any())
            return false;

        if ((state & NodePathState.Expanded) == NodePathState.Expanded || (state & NodePathState.Selected) == NodePathState.Selected)
        {
            return true;
        }
        
        return false;
    }
}

<nav class="block menu category-menu">
	@if (path.Count > 0)
	{
		foreach (var node in path)
		{
			<a class="d-block fw-600 fs-h6 expanded" href="@node.Value.GenerateUrl(this.Url)">@node.Value.Text</a>
		}
		<hr class="m-y-05" />
	}

	@foreach (var node in items)
	{
		var state = node.GetNodePathState(Model.Path);
		var isSelected = (state & NodePathState.Selected) == NodePathState.Selected;
		<a class="d-block has-count fs-h6@(isSelected ? " fw-600" : "")" 
		   href="@node.Value.GenerateUrl(this.Url)" @Html.Attr("data-count", node.Value.ElementsCount.ToString(), node.Value.ElementsCount.HasValue)>@node.Value.Text</a>
	}
</nav>

@helper CreateMenu(IEnumerable<TreeNode<MenuItem>> nodes, string menuSelector) {
    <ul class="@menuSelector">
        @foreach (var node in nodes)
        {
            var state = node.GetNodePathState(Model.Path);
			var url = node.Value.GenerateUrl(this.Url);
            <li class="@GetCssClassForNode(state)">
                <a href="@url">@node.Value.Text
                    @if ((node.Value.ElementsCount ?? 0) > 0)
                    {
                        <text> (@(node.Value.ElementsCount))</text>
                    }
                </a>
                @if (ShouldRenderChildren(state))
                {
                    @CreateMenu(node.Children, "sub-level-" + (node.Depth + 2))
                }
            </li>
        }
    </ul>
}
