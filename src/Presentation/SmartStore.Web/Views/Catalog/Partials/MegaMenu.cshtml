@model NavigationModel
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Services.Catalog;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Collections;

@{
    Layout = "";
    Html.AppendScriptParts(true, Url.Content("~/Themes/Flex/Scripts/smartstore.megamenu.js"));
}

@functions {
	private string GetNodeLink(TreeNode<MenuItem> node)
	{
		return node.Value.GenerateUrl(this.Url);
	}

	private string GetCssClassForNode(TreeNode<MenuItem> node, NodePathState state)
	{
		var liClasses = new List<string>();

		liClasses.Add("nav-item");

		if (node.Depth <= 1 && node.HasChildren)
		{
			liClasses.Add(node.Depth > 0 ? "dropdown-submenu" : "dropdown");
		}

		if ((state & NodePathState.Expanded) == NodePathState.Expanded)
		{
			liClasses.Add("expanded");
		}

		if ((state & NodePathState.Selected) == NodePathState.Selected)
		{
			liClasses.Add("selected");
		}

		return liClasses.Count > 0 ? String.Join(" ", liClasses) : null;
	}
}

@if (!GetThemeVariable<bool>("DisplayNavbar", true))
{
    return;
}

<div class="megamenu simple">

    <div class="megamenu-nav megamenu-nav--prev">
        <a href="#" class="megamenu-nav-btn btn btn-icon"><i class="fa fa-angle-left"></i></a>
    </div>

	<ul class="nav navbar-nav" data-selected-menu-item="@Model.SelectedNode.Value.EntityId">

		@{ Html.RenderWidget("megamenu_before_first_item"); }

		@foreach (var node in Model.Root.Children)
        {
            var item = node.Value;

            if (!item.Visible)
            {
                continue;
            }

            var itemUrl = GetNodeLink(node);
            var itemState = node.GetNodePathState(Model.Path);

			<li class='@(GetCssClassForNode(node, itemState))' id="main-nav-item-@node.Value.EntityId" data-entity-id="@node.Value.EntityId">
				@if (node.HasChildren)
                {
					<a href="@itemUrl" class="nav-link dropdown-toggle" aria-haspopup="true" aria-expanded="false" data-target="#dropdown-menu-@node.Value.EntityId">
						@item.Text
					</a>
                }
                else
                {
					<a href="@itemUrl" class="nav-link">
						@item.Text
					</a>
                }

			</li>
        }

		@{ Html.RenderWidget("megamenu_after_last_item"); }

	</ul>

    <div class="megamenu-nav megamenu-nav--next">
        <a href="#" class="megamenu-nav-btn btn btn-icon"><i class="fa fa-angle-right"></i></a>
    </div>
</div>

<div class="megamenu-dropdown-container simple">
    @foreach (var node in Model.Root.Children)
    {
        var parent = node;
        <div id="dropdown-menu-@parent.Value.EntityId" data-entity-id="@parent.Value.EntityId">
             @CreateDrilldownMenu(node.Children, true)
        </div>
    }
</div>

@helper CreateDrilldownMenu(IEnumerable<TreeNode<MenuItem>> nodes, bool isRoot)
{
    if (isRoot)
    {
        @Html.Raw("<div class='dropdown-menu'>")
    }
    
    foreach (var node in nodes)
	{
		var item = node.Value;

		if (!item.Visible)
		{
			continue;
		}

		var itemUrl = GetNodeLink(node);
		var itemState = node.GetNodePathState(Model.Path);
		
        <a class='dropdown-item@((itemState & NodePathState.Selected) == NodePathState.Selected ? " selected" : "")' 
           href="@itemUrl" id="dropdown-item-@node.Value.EntityId" data-entity-id="@node.Value.EntityId">
            @item.Text
        </a>
    }
    
    if (isRoot)
    {
        @Html.Raw("</div>")
    }
}

<script type="text/javascript">
    $(function () {
        $(".megamenu-container").megaMenu();
    });
</script>    