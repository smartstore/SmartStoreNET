@model CheckoutBillingAddressModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Web.Models.Checkout;
@using SmartStore.Web.Models.Common;
@{
    Layout = "_Checkout";
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
}

@section orderProgress{
    @{ Html.RenderAction("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Address }); }
}

<div class="page billing-address-page">
    <div class="page-title">
        <h1>@T("Checkout.BillingAddress")</h1>
    </div>
    <div class="page-body checkout-data">
        @{ Html.RenderWidget("checkout_billing_address_top"); }

        @if (Model.ExistingAddresses.Count > 0)
        {
            <div class="block">
                <div class="block-title fs-h4 m-b-1 m-t-2">
                    @T("Checkout.SelectBillingAddress")
                </div>
                <div class="card-deck card-cols-sm-1 card-cols-md-2 card-cols-lg-3 block-body address-grid">

                    @foreach (var item in Model.ExistingAddresses)
                    {
                        <div class="item-box card card-block">
                            <div class="address-item">
                            
                                <div class="select-button">
                                    <button class="btn btn-secondary btn-block select-billing-address-button"  onclick="setLocation('@Url.Action("SelectBillingAddress", new { addressId = item.Id })')">
                                        @T("Checkout.BillToThisAddress")
                                    </button>
                                </div>

                                <div class="address-box" data-equalized-part="address-box">
                                    <div class="name">
                                        <strong>@item.FirstName @item.LastName</strong>
                                    </div>
                                    <div class="email">@T("Address.Fields.Email"): @item.Email</div>
                                    @if (item.PhoneEnabled)
                                    {
                                        <div class="phone">
                                            @T("Address.Fields.PhoneNumber"):
                                             @item.PhoneNumber
                                        </div>
                                    }
                                    @if (item.FaxEnabled && !String.IsNullOrEmpty(item.FaxNumber))
                                    {
                                        <div class="fax">
                                            @T("Address.Fields.FaxNumber"):
                                             @item.FaxNumber
                                        </div>
                                    }
                                    @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                    {
                                        <div class="company">
                                            @item.Company
                                        </div>
                                    }
                                    @if (item.StreetAddressEnabled)
                                    {
                                        <div class="address1">
                                            @item.Address1
                                        </div>
                                    }
                                    @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                    {
                                        <div class="address2">
                                            @item.Address2
                                        </div>
                                    }
                                    @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                    {
                                        <div class="city-state-zip">
                                            @if (item.CityEnabled)
                                            {
                                                @item.City
                                            }
                                            @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                            {
                                                <text>,</text>
                                            }
                                            @if (item.StateProvinceEnabled)
                                            {
                                                @item.StateProvinceName
                                            }
                                            @if (item.ZipPostalCodeEnabled)
                                            {
                                                @item.ZipPostalCode
                                            }
                                        </div>
                                    }
                                    @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                    {
                                        <div class="country">
                                            @item.CountryName
                                        </div>
                                    }

                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        }

        @{ Html.RenderWidget("checkout_billing_address_middle"); }

        <div class="block">
            <div class="block-title fs-h4 m-b-1 m-t-2">
                @(Model.ExistingAddresses.Count > 0 ? T("Checkout.OrEnterNewAddress") : T("Checkout.EnterBillingAddress"))
            </div>

            <div class="block-body">
                <div class="enter-address">
                    @using (Html.BeginForm())
                    {
                        <div class="enter-address-body">
                            @{
                                var dataDictAddress = new ViewDataDictionary();
                                //Merge ModelState (required for validation)
                                dataDictAddress.ModelState.Merge(ViewData.ModelState);
                                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                                Html.RenderPartial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress);
                            }
                        </div>
                
                        <div class="buttons clearfix">
                            <a class="btn btn-secondary pull-left" href="@Url.RouteUrl("ShoppingCart")">
                                <i class="fa fa-caret-left"></i>&nbsp;
                                @T("Common.Back")
                            </a>    
                            <input type="submit" id="nextstep" name="nextstep" style="display:none" />

                            <button class="btn btn-warning pull-right new-address-next-step-button" onclick="$('#nextstep').trigger('click');return false;">
								<span>@T("Checkout.NextButton")</span>
                                <i class="fa fa-caret-right"></i>
                            </button>
                        </div>
                    }
                </div>
             </div>
        </div>
        @{ Html.RenderWidget("checkout_billing_address_bottom"); }
    </div>
</div>
