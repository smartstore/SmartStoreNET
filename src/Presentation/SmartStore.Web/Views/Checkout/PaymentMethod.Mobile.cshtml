@model CheckoutPaymentMethodModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Web.Models.Checkout;
@using SmartStore.Web.Models.Common;
@{
    Layout = "~/Views/Shared/_Root.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
}
<div class="page checkout-page">
    <div class="page-title">
        <h1>@T("Checkout.SelectPaymentMethod")</h1>
    </div>
    <div class="page-body checkout-data">
        @*set "data-ajax" attribute to "false"*@
        @using (Html.BeginForm(null, null, FormMethod.Post, new RouteValueDictionary { { "data-ajax", "false" } }))
        {
            @Html.Widget("mobile_checkout_payment_method_top")
            if (Model.DisplayRewardPoints && Model.PaymentMethods.Count > 0)
            {
            <div class="use-reward-points">
                @Html.EditorFor(model => model.UseRewardPoints)
                <label for="@Html.FieldIdFor(model => model.UseRewardPoints)">@string.Format(T("Checkout.UseRewardPoints").Text, Model.RewardPointsBalance, Model.RewardPointsAmount)</label>
            </div>
            }
            <div class="payment-methods">
                @if (Model.PaymentMethods.Count > 0)
                {
                    <div>
                        @for (int i = 0; i < Model.PaymentMethods.Count; i++)
                        {
                            var paymentMethod = Model.PaymentMethods[i];
                            var infoRoute = paymentMethod.PaymentInfoRoute;
                            var paymentMethodName = paymentMethod.Name;
                            if (!String.IsNullOrEmpty(paymentMethod.Fee))
                            {
                                paymentMethodName = string.Format("{0} ({1})", paymentMethodName, paymentMethod.Fee);
                            }
                            <div class="payment-method-item">
                                <div class="option-name">
                                    <input id="paymentmethod_@(i)" type="radio" name="paymentmethod"
                                           data-has-info='@(infoRoute != null ? "true" : "false")'
                                           data-lazy-info='@(paymentMethod.RequiresInteraction ? "true" : "false")'
                                           class="opt-radio"
                                           value="@(paymentMethod.PaymentMethodSystemName)" checked="@paymentMethod.Selected" />
                                    <label for="paymentmethod_@(i)">
										@paymentMethodName
									</label>
									@if (!String.IsNullOrWhiteSpace(paymentMethod.Description))
									{
										<div class="payment-method-desc">
											@Html.Raw(paymentMethod.Description)
										</div>
									}
                                </div>
                                @if (!paymentMethod.RequiresInteraction || (paymentMethod.Selected && infoRoute != null))
                                {
                                    <div class="payment-method-item payment-method-info"
                                         @Html.Attr("data-lazy-info", "true", paymentMethod.RequiresInteraction)
                                         data-system-name="@paymentMethod.PaymentMethodSystemName">
                                        @if (paymentMethod.Selected && !ViewData.ModelState.IsValid)
                                        {
                                            <div id="payment-info-validation-summary">
                                                @Html.ValidationSummary(false)
                                            </div>
                                        }
                                        @Html.Action(infoRoute.Action, infoRoute.Controller, infoRoute.RouteValues)
                                    </div>
                                }
                            </div> 
                        }
                        <div class="select-button">
							<input type="submit" name="nextstep" id="nextstep" value="@T("Checkout.NextButton")" />
                        </div>
                    </div>
                }
                else
                {
                    <div class="message-error">
                        @T("Checkout.NoPaymentMethods")
                    </div>
                }
            </div>
            @Html.Widget("mobile_checkout_payment_method_bottom")
        }
    </div>
</div>

<script>
	$(function () {

		var validationSummary = $('#payment-info-validation-summary');

		if (validationSummary.length) {
			$.scrollTo(validationSummary, 600, { offset: -100 });
		}

		$('.checkout-data .opt-radio').on('change', function (e) {
			var radio = $(this);
			var systemName = radio.val();

			function removeInfoPanels() {
			    $('.checkout-data .payment-method-item').each(function (i, val) {
					var el = $(val);
					if (el.data('system-name') != systemName && el.data('lazy-info')) {
						el.remove();
					}
				});
			}

			$('.checkout-data .payment-method-item').removeClass('selected');

			var item = radio.closest('.payment-method-item');
			item.addClass("selected");

			if (!radio.data("has-info") || !radio.data("lazy-info")) {
				removeInfoPanels();
				return;
			}

			$.ajax({
				type: 'POST',
				cache: false,
				dataType: 'html',
				async: false,
				url: '@Url.Action("PaymentInfoAjax")',
				data: { paymentMethodSystemName: systemName },
				success: function (html) {
					if (!html)
						return;

					var panel = item.find('.payment-method-item');

					if (panel.length == 0) {
					    panel = $('<div class="payment-method-item payment-method-info"></div>')
							.appendTo(item)
							.data('system-name', systemName)
							.data('lazy-info', true);
					}

					panel.html(html);
					panel.trigger('create'); 
				},
				error: function (xhr, ajaxOptions, thrownError) {
					console.error(thrownError);
				},
				complete: function () {
					// remove all other info containers
					removeInfoPanels();
				}
			});
		});
	});
</script>
