@model CheckoutPaymentMethodModel
@using SmartStore.Web.Models.Checkout;
@{
    Layout = "_Checkout";
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    Html.AddBodyCssClass("no-offcanvas-cart");
}

@section orderProgress{
    @{ Html.RenderAction("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Payment }); }
}

<div class="page payment-method-page">
    <div class="page-title">
        <h1 class="h3">@T("Checkout.SelectPaymentMethod")</h1>
    </div>
    <div class="page-body checkout-data">
        @using (Html.BeginForm())
        {
            Html.RenderWidget("checkout_payment_method_top");

			if (Model.PaymentMethods.Count > 0)
			{
				<ul class="list-group opt-list payment-methods">
					@for (int i = 0; i < Model.PaymentMethods.Count; i++)
					{
						var paymentMethod = Model.PaymentMethods[i];
						var infoRoute = paymentMethod.PaymentInfoRoute;

						<li class="list-group-item opt-list-item payment-method-item@(paymentMethod.Selected ? " active" : "")">
							<div class="opt-data">
								<div class="form-check opt-control option-name radio">
									<label class="form-check-label">
										<input id="paymentmethod_@(i)" type="radio" name="paymentmethod"
											   @Html.Attr("checked", "checked", paymentMethod.Selected)
											   data-has-info='@(infoRoute != null ? "true" : "false")'
											   data-lazy-info='@(paymentMethod.RequiresInteraction ? "true" : "false")'
											   class="opt-radio form-check-input"
											   value="@(paymentMethod.PaymentMethodSystemName)" />
										<span class="opt-name">@paymentMethod.Name</span>
									</label>
								</div>
								@if (paymentMethod.Fee.HasValue())
								{
									<small class="opt-fee payment-fee text-danger">@paymentMethod.Fee</small>
								}
							</div>

							@if (paymentMethod.FullDescription.HasValue())
							{
								<div class="opt-info-item payment-method-description">
									@Html.Raw(paymentMethod.FullDescription)
								</div>
							}

							@if (!paymentMethod.RequiresInteraction || (paymentMethod.Selected && infoRoute != null))
							{
								<div class="opt-info payment-method-info"
									 @Html.Attr("data-lazy-info", "true", paymentMethod.RequiresInteraction)
									 data-system-name="@paymentMethod.PaymentMethodSystemName">
									@if (paymentMethod.Selected && !ViewData.ModelState.IsValid)
									{
										<div id="payment-info-validation-summary">
											@Html.ValidationSummary(false)
										</div>
									}
									@if (!(paymentMethod.FullDescription.HasValue() && !paymentMethod.RequiresInteraction))
									{
										Html.RenderAction(infoRoute.Action, infoRoute.Controller, infoRoute.RouteValues);
									}
								</div>
							}
						</li>
					}
				</ul>
			}
			else
			{
				<div class="alert alert-danger">
					@T("Checkout.NoPaymentMethods")
				</div>
			}
			
			if (Model.PaymentMethods.Count > 0)
			{
				<div class="buttons">
					<a class="btn btn-secondary btn-lg" href="@Url.Action("ShippingMethod")">
                        <i class="fa fa-angle-left"></i>
                        <span>@T("Common.Back")</span>
					</a>    
					<input type="submit" name="nextstep" id="nextstep" class="d-none" />

					<button class="btn btn-warning btn-lg payment-method-next-step-button" onclick="$('#nextstep').trigger('click');return false;">
						<span>@T("Checkout.NextButton")</span>
						<i class="fa fa-angle-right"></i>
					</button>
				</div>				
            }

            Html.RenderWidget("checkout_payment_method_bottom");
        }
    </div>
</div>

<script>
	$(function () {

		var validationSummary = $('#payment-info-validation-summary');

		if (validationSummary.length) {
			$.scrollTo(validationSummary, 600, { offset: -100 });
		}

		$('.checkout-data .opt-radio').on('change', function (e) {
			var radio = $(this);
			var systemName = radio.val();

			function removeInfoPanels() {
				$('.checkout-data .opt-info').each(function (i, val) {
					var el = $(val);
					if (el.data('system-name') != systemName && el.data('lazy-info')) {
						el.remove();
					}
				});
			}
			
			$('.checkout-data .opt-list-item').removeClass('active');

			var item = radio.closest('.opt-list-item');
			item.addClass("active");

			if (!radio.data("has-info") || !radio.data("lazy-info")) {
				removeInfoPanels();
				return;
			}

			$.ajax({
				type: 'POST',
				cache: false,
				dataType: 'html',
				async: true,
				url: '@Url.Action("PaymentInfoAjax")',
				data: { paymentMethodSystemName: systemName },
				success: function (html) {
					if (!html)
						return;

					var panel = item.find('.opt-info');

					if (panel.length == 0) {
						panel = $('<div class="opt-info payment-method-info"></div>')
							.appendTo(item)
							.data('system-name', systemName)
							.data('lazy-info', true);
					}

					panel.html(html);
					applyCommonPlugins(panel);
				},
				error: function (xhr, ajaxOptions, thrownError) {
					console.error(thrownError);
				},
				complete: function () {
					// remove all other info containers
					removeInfoPanels();
				}
			});
		});
	});
</script>
