@model CheckoutShippingAddressModel
@using SmartStore.Web.Models.Checkout;
@{
    Layout = "_Checkout";
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    Html.AddBodyCssClass("no-offcanvas-cart");
}

@section orderProgress{
    @{ Html.RenderAction("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Address }); }
}

<div class="page shipping-address-page">
    <div class="page-title">
        <h1 class="h3">@T("Checkout.ShippingAddress")</h1>
    </div>
    <div class="page-body checkout-data">
        
        @{ Html.RenderWidget("checkout_shipping_address_top"); }

        @if (Model.ExistingAddresses.Count > 0)
        {
            <fieldset class="content-group mb-3">
                <legend><span>@T("Checkout.SelectShippingAddress")</span></legend>

                <div class="card-deck card-cols-sm-1 card-cols-md-2 card-cols-lg-3 address-list">
                    @foreach (var item in Model.ExistingAddresses)
                    {
                        <div class="card card-block address-list-item">
                            <div class="address-item">
                                <button class="btn btn-warning btn-block select-shipping-address-button" onclick="setLocation('@Url.Action("SelectShippingAddress", new { addressId = item.Id })')">
                                    <span>@T("Checkout.ShipToThisAddress")</span>
                                    <i class="fa fa-angle-right"></i>
                                </button>
                                
                                <div class="address-data mt-3">
                                    <div class="name pb-2">
                                        <strong>@item.FirstName @item.LastName</strong>
                                    </div>
                                    <div class="email">@T("Address.Fields.Email"): @item.Email</div>
                                    @if (item.PhoneEnabled)
                                    {
                                        <div class="phone">
                                            @T("Address.Fields.PhoneNumber"):
                                            @item.PhoneNumber
                                        </div>
                                    }
                                    @if (item.FaxEnabled && !String.IsNullOrEmpty(item.FaxNumber))
                                    {
                                        <div class="fax">
                                            @T("Address.Fields.FaxNumber"):
                                            @item.FaxNumber
                                        </div>
                                    }
                                    @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                    {
                                        <div class="company">
                                            @item.Company
                                        </div>
                                    }
                                    @if (item.StreetAddressEnabled)
                                    {
                                        <div class="address1">
                                            @item.Address1
                                        </div>
                                    }
                                    @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                    {
                                        <div class="address2">
                                            @item.Address2
                                        </div>
                                    }
                                    @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                    {
                                        <div class="city-state-zip">
                                            @if (item.CityEnabled)
                                            {
                                                @item.City
                                            }
                                            @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                            {
                                                <text>,</text>
                                            }
                                            @if (item.StateProvinceEnabled)
                                            {
                                                @item.StateProvinceName
                                            }
                                            @if (item.ZipPostalCodeEnabled)
                                            {
                                                @item.ZipPostalCode
                                            }
                                        </div>
                                    }
                                    @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                    {
                                        <div class="country">
                                            @item.CountryName
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

            </fieldset>
        }

        @{ Html.RenderWidget("checkout_shipping_address_middle"); }

        <fieldset class="content-group">
            <legend><span>@(Model.ExistingAddresses.Count > 0 ? T("Checkout.OrEnterNewAddress") : T("Checkout.EnterShippingAddress"))</span></legend>

            <div class="enter-address">
                @using (Html.BeginForm())
                {
                    <div class="enter-address-body">
                        @{
                            var dataDictAddress = new ViewDataDictionary();
                            dataDictAddress["breakpoint"] = "sm";
                            //Merge ModelState (required for validation)
                            dataDictAddress.ModelState.Merge(ViewData.ModelState);
                            dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                            Html.RenderPartial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress);
                        }
                    </div>

                    <div class="buttons">
                        <a class="btn btn-secondary btn-lg" href="@Url.Action("BillingAddress")">
                            <i class="fa fa-angle-left"></i>
                            <span>@T("Common.Back")</span>
                        </a>
                        <input type="submit" id="nextstep" name="nextstep" class="d-none" />

                        <button class="btn btn-warning btn-lg new-address-next-step-button" onclick="$('#nextstep').trigger('click');return false;">
                            <span>@T("Checkout.NextButton")</span>
                            <i class="fa fa-angle-right"></i>
                        </button>
                    </div>
                 }
            </div>
        </fieldset>

        @{ Html.RenderWidget("checkout_shipping_address_bottom"); }
    </div>
</div>
