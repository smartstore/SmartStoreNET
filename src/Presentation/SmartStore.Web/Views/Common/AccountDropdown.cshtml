@model AccountDropdownModel
@using SmartStore.Web.Models.Common;
@using SmartStore.Web.Models.Customer;
@using SmartStore.Core;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Core.Infrastructure.DependencyManagement;
@{
    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }    
}

@if (Model.IsAuthenticated)
{
    <ul class="dropdown-menu shopbar-flyout-container">
        <li>
			<a href="@Url.Action("Info", "Customer")" rel="nofollow">
				<i class="fa fa-user"></i>
				@T("Account.MyAccount")
			</a>
        </li>
        @if (Model.DisplayAdminLink)
        {
            <li>
                <a href="@Url.Content("~/admin")" target="_admin" rel="nofollow">
                    <i class="fa fa-cog"></i> 
                    @T("Account.Administration")
                </a>
            </li>
        }
        
        @if (Model.AllowPrivateMessages)
        {
        <li>
			<a href="@Url.RouteUrl("PrivateMessages", new { tab = "inbox" })" rel="nofollow">
				<i class="fa fa-envelope"></i>
				@T("PrivateMessages.Inbox")
				@if (Model.UnreadPrivateMessages != "")
				{
					<span class="badge badge-success">@Model.UnreadPrivateMessages</span>
				}
			</a>

        </li>
        if (!string.IsNullOrEmpty(Model.AlertMessage))
            {
                <script type="text/javascript">
                    $(document).ready(function () {
                        displayNotification('@(Model.AlertMessage)', 'info');
                    });
                </script>
            }
        }
        
        @*<li class="divider"></li>*@

        @if (Model.WishlistEnabled)
        {
            <li>
                <a href="@Url.RouteUrl("Wishlist")">
                    <i class="fa fa-gift"></i>
                    @T("Wishlist") <span class="wishlist-qty badge @(Model.WishlistItems > 0 ? "badge-success" : "")">@Model.WishlistItems</span></a> 
            </li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink">
                <a href="@Url.RouteUrl("ShoppingCart")">
                    <i class="fa fa-shopping-cart"></i>
                    @T("ShoppingCart") <span class="cart-qty badge @(Model.ShoppingCartItems > 0 ? "badge-success" : "")" data-bind-to="TotalProducts">@Model.ShoppingCartItems</span></a>
            </li>
        }
        <li class="divider"></li>
        <li>
            <a href="@Url.RouteUrl("Logout")" rel="nofollow">
                <i class="fa fa-sign-out"></i>
                @T("Account.Logout")</a>
        </li>
    </ul>
} 
else 
{
    
}