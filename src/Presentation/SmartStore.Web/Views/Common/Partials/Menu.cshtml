@model MenuModel
@using SmartStore.Web.Models.Common;

@{
    string accountUrl = Model.IsAuthenticated ? Url.Action("Info", "Customer") : Url.RouteUrl("Login", new { ReturnUrl = Request.RawUrl });
}

@{ Html.RenderWidget("header_menu_before"); }

<nav class="menubar">
    <nav class="menubar-group pull-left m-l-0">
        @{ 
			Html.RenderAction("LanguageSelector", "Common");
			Html.RenderAction("CurrencySelector", "Common");
        }
    </nav>
    <nav class="menubar-group">

        @if (Model.HasContactUsPage)
		{
            <a class="menubar-link" href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a>
		}

        <div class="dropdown service-links">
            <a class="menubar-link" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" href="#">
				<span>@T("Menu.ServiceMenu")</span>
                <i class="fa fa-caret-down"></i>
            </a>

            <div class="dropdown-menu" aria-labelledby="dLabel">
                @{
					Html.RenderAction("ServiceMenu", "Common", new { area = "" });
                } 
            </div>
        </div>

        @*
            TODO?
            PrivateMessages
        *@


        @if (!Model.DisplayAdminLink && Model.DisplayLoginLink)
        {
            <a class="menubar-link" href="@Url.RouteUrl("Login", new { ReturnUrl = Request.RawUrl })" rel="nofollow">
                <i class="fa fa-user"></i>
				<span>@T("Account.Login")</span>
            </a>
        }

        @if (Model.IsCustomerImpersonated)
        {
            <a class="menubar-link" href="@Url.RouteUrl("Logout")" title="@T("Account.ImpersonatedAs.Finish.Hint")" rel="nofollow">
                <i class="fa fa-sign-out"></i>
				<span>@Model.CustomerEmailUsername</span>
            </a>
        }
    </nav>

    <nav class="menubar-group menubar-group--special">
        @if (Model.NewsEnabled)
        {
            <a class="menubar-link" href="@Url.RouteUrl("NewsArchive")">
                @T("News")
            </a>
        }
        @if (Model.BlogEnabled)
        {
            <a class="menubar-link" href="@Url.RouteUrl("Blog")">
                @T("Blog")
            </a>
        }
        @if (Model.ForumEnabled)
        {
            <a class="menubar-link" href="@Url.RouteUrl("Boards")">
                @T("Forum.Forums")
            </a>
        }
    </nav>

    <nav id="menubar-my-account" class="menubar-group">
        <div class="dropdown">
            <a class="menubar-link" @(Model.IsAuthenticated ? "data-toggle=dropdown" : "") aria-haspopup="true" aria-expanded="false" href="@accountUrl" rel="nofollow">

                <i class="fa fa-user"></i>

                @if (Model.IsAuthenticated)
                {
					<span>@T("Account.MyAccount")</span>
                    <i class="fa fa-caret-down"></i>
                }
                else
                {
                    <span>@T("Account.Login")</span>
                }
            </a>

            @if (Model.IsAuthenticated)
			{
				Html.RenderAction("AccountDropdown", "Common");
            }
        </div>

    </nav>

    @if (Model.DisplayAdminLink)
    {
        <nav class="menubar-group menubar-group--special hidden-lg-down">
            <a class="menubar-link" href="@Url.Content("~/admin")" target="_admin" rel="nofollow">
                <i class="fa fa-cog"></i>
				<span>@T("Account.Administration")</span>  
            </a>
        </nav>
    }
</nav>

@{ Html.RenderWidget("header_menu_after"); }


@*<ul class="list-inline pull-left">
    @{ Html.RenderWidget("header_menu_before"); }

    @if (Model.IsCustomerImpersonated)
    {
        <li class="list-inline-item finish-impersonation">
            <a href="@Url.RouteUrl("Logout")" title="@T("Account.ImpersonatedAs.Finish.Hint")" rel="nofollow">
                <i class="fa fa-sign-out"></i>
                @Model.CustomerEmailUsername
            </a>
        </li>
    }
    @if (Model.AllowPrivateMessages)
    {
        <li class="list-inline-item">
            <a href="@Url.RouteUrl("PrivateMessages", new { tab = "inbox" })" rel="nofollow">
                @T("PrivateMessages.Inbox")
                @if (Model.UnreadPrivateMessages > 0) 
                {
                    <span class="label label-info">@Model.UnreadPrivateMessages</span>
                }
            </a>
        </li>
    }
    @if (Model.RecentlyAddedProductsEnabled)
    {
        <li class="list-inline-item">
            <a href="@Url.RouteUrl("RecentlyAddedProducts")">
                @T("Products.NewProducts")
            </a>
        </li>
    }
    <li class="list-inline-item">
        <a href="@Url.RouteUrl("Search")">@T("Search")</a>
    </li>
	@if (Model.HasContactUsPage)
	{
		<li class="list-inline-item">
			<a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a>
		</li>
	}
    @Html.Widget("header_menu_after")
</ul>

@if (Model.NewsEnabled || Model.BlogEnabled || Model.ForumEnabled || Model.DisplayAdminLink || Model.DisplayLoginLink)
{
    <ul class="list-inline pull-left special">
		@if (Model.NewsEnabled)
		{
			<li class="list-inline-item">
				<a class="special-news" href="@Url.RouteUrl("NewsArchive")">
					<i class="fa fa-rss-square"></i>
					@T("News")
				</a>
			</li>
		}
        @if (Model.BlogEnabled)
        {
            <li class="list-inline-item">
                <a class="special-blog" href="@Url.RouteUrl("Blog")">
                    <i class="fa fa-pencil-square-o"></i>
                    @T("Blog")
                </a>
            </li>
        }
        @if (Model.ForumEnabled)
        {
            <li class="list-inline-item">
                <a class="special-forum" href="@Url.RouteUrl("Boards")">
                    <i class="fa fa-users"></i>
                    @T("Forum.Forums")
                </a>
            </li>
        }
        @if (Model.DisplayAdminLink)
        {
            <li class="list-inline-item">
                <a href="@Url.Content("~/admin")" target="_admin" rel="nofollow">
                    <i class="fa fa-cog"></i> 
                    @T("Account.Administration")
                </a>
            </li>
        }
		else if (Model.DisplayLoginLink)
		{
			<li class="list-inline-item">
				<a href="@Url.RouteUrl("Login", new { ReturnUrl = Request.RawUrl })" rel="nofollow">
					<i class="fa fa-sign-in"></i>
					@T("Account.Login")
				</a>
			</li>
		}
    </ul>
}*@

