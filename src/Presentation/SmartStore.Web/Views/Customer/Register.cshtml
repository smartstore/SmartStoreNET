@using SmartStore.Core;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Core.Infrastructure.DependencyManagement;

@model RegisterModel
@using SmartStore.Web.Models.Customer;
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);
}

@using (Html.BeginForm("Register", "Customer", new { returnUrl = this.Context.Request.QueryString["returnUrl"] }, FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    <div class="page registration-page">
        <div class="page-title">
            <h1>@T("Account.Register")</h1>
        </div>
        <div class="page-body">
            
            @if (!ViewData.ModelState.IsValid)
            {
                @Html.ValidationSummary(true)
            }

            @{ Html.RenderPartial("_ExternalAuthentication.AssociateMessage"); }

            <fieldset class="form-fields">
                <legend>@T("Account.YourPersonalDetails")</legend>
                
                    @if (Model.GenderEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-sm-3 form-control-label">@T("Account.Fields.Gender")</label>
                            <div class="col-sm-9">
                                <div class="radio">
                                    <label>
                                        @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                                        @T("Account.Fields.Gender.Male")
                                    </label>
                                    <label style="margin-left:15px">
                                        @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                                        @T("Account.Fields.Gender.Female")
                                    </label>
                                </div>
                            </div>
                        </div>
                    }
                    
                    @Html.ControlGroupFor(model => model.FirstName, required: true)
                    @Html.ControlGroupFor(model => model.LastName, required: true)
                    
                    @if (Model.DateOfBirthEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-sm-3 form-control-label" for="DateOfBirthDay">@T("Account.Fields.DateOfBirth")</label>
                            <div class="col-sm-9">
                                @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                    Html.FieldNameFor(x => x.DateOfBirthMonth),
                                    Html.FieldNameFor(x => x.DateOfBirthYear),
                                    DateTime.Now.Year - 110,
                                    DateTime.Now.Year,
                                    Model.DateOfBirthDay,
                                    Model.DateOfBirthMonth,
                                    Model.DateOfBirthYear)
                                @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                                @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                                @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                            </div>
                        </div>
                    }
                    
                    @Html.ControlGroupFor(model => model.Email, required: true)

                    @if (Model.UsernamesEnabled)
                    {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.Username, new { @class = "col-sm-3 form-control-label required", @for = "Username" })
                            <div class="col-sm-9">
                                @if (Model.CheckUsernameAvailabilityEnabled)
                                {
                                    <div class="input-append">
                                        @Html.EditorFor(model => model.Username, new { @class = "form-control" })
                                        @{ Html.RenderPartial("_CheckUsernameAvailability"); }
                                    </div>
                                }
                                else
                                {
                                    @Html.EditorFor(model => model.Username, new { @class = "form-control" })
                                }
                                @Html.ValidationMessageFor(model => model.Username)
                            </div>
                        </div>
                    }
                
            </fieldset>

            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                <fieldset class="form-fields">
                    <legend>@T("Account.CompanyDetails")</legend>
                    
                        @if (Model.CompanyEnabled)
                        {
                            @Html.ControlGroupFor(model => model.Company, required: Model.CompanyRequired)
                        }
                        @if (Model.DisplayVatNumber)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.VatNumber, new { @class = "col-sm-3 form-control-label control-label" + (Model.VatRequired ? " required" : ""), @for = "VatNumber" })
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.VatNumber, new { @class = "form-control", placeholder = Model.VatRequired ? "" : "Optional" })
                                    &nbsp;&nbsp;&nbsp;
                                    @Model.VatNumberStatusNote
                                    <span class="help-block text-muted vat-note">@T("Account.Fields.VatNumber.Note")</span>
                                    @Html.ValidationMessageFor(model => model.VatNumber)
                                </div>
                            </div>
                        }
                    
                </fieldset>
            }

            @if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled || Model.CityEnabled || Model.CountryEnabled)
            {
                <fieldset class="form-fields">
                    <legend>@T("Account.YourAddress")</legend>
                
                    @if (Model.StreetAddressEnabled)
                    {
                        @Html.ControlGroupFor(model => model.StreetAddress, required: Model.StreetAddressRequired)
                    }
                    @if (Model.StreetAddress2Enabled)
                    {
                        @Html.ControlGroupFor(model => model.StreetAddress2, required: Model.StreetAddress2Required)
                    }
                    @if (Model.ZipPostalCodeEnabled)
                    {
                        @Html.ControlGroupFor(model => model.ZipPostalCode, required: Model.ZipPostalCodeRequired)
                    }
                    @if (Model.CityEnabled)
                    {
                        @Html.ControlGroupFor(model => model.City, required: Model.CityRequired)
                    }
                    @if (Model.CountryEnabled)
                    {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.CountryId, new { @class = "col-sm-3 form-control-label", @for = "CountryId" })
                            <div class="col-sm-9">
                                @Html.DropDownList("CountryId", Model.AvailableCountries)
                            </div>
                        </div>
                    }
                    @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                    {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.StateProvinceId, new { @class = "col-sm-3 form-control-label", @for = "StateProvinceId" })
                            <div class="col-sm-9">
                                @Html.DropDownList("StateProvinceId", Model.AvailableStates, new { style = "width: 280px" })
                                <span id="states-loading-progress" style="display: none;">
                                    @T("Common.Wait...")
                                    <img src='@Url.Content("~/Content/Images/ajax_loader_small.gif")' alt="@T("Common.Wait...")" />
                                </span>
                            </div>
                        </div>
                    }   
                </fieldset>
            }

            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <fieldset class="form-fields">
                    <legend>@T("Account.YourContactInformation")</legend>
                    
                    @if (Model.PhoneEnabled)
                    {
                        @Html.ControlGroupFor(model => model.Phone, required: Model.PhoneRequired)
                    }
                    @if (Model.FaxEnabled)
                    {
                        @Html.ControlGroupFor(model => model.Fax, required: Model.FaxRequired)
                    }
                    
                </fieldset>
            }

            @if (Model.NewsletterEnabled)
            {
                <fieldset class="form-fields">
                    <legend>@T("Account.Options")</legend>
                    @Html.ControlGroupFor(model => model.Newsletter, editorType: InputEditorType.Checkbox)
                </fieldset>
            }

            @if (Model.AllowCustomersToSetTimeZone)
            {
                <fieldset class="form-fields">
                    <legend>@T("Account.Preferences")</legend>
                    
                    @if (Model.AllowCustomersToSetTimeZone)
                    {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.TimeZoneId, new { @class = "col-sm-3 form-control-label", @for = "TimeZoneId" })
                            <div class="col-sm-9">
                                @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                                @Html.ValidationMessageFor(model => model.TimeZoneId)
                            </div>
                        </div>
                    }
                                        
                </fieldset>
            }

            <fieldset class="form-fields">
                <legend>@T("Account.YourPassword")</legend>
                
                @Html.ControlGroupFor(model => model.Password, editorType: InputEditorType.Password, required: true)    
                @Html.ControlGroupFor(model => model.ConfirmPassword, editorType: InputEditorType.Password, required: true)   
                    
                @if (Model.DisplayCaptcha)
                {
                    <div class="captcha-box">
                        @Html.Raw(Html.GenerateCaptcha())
                    </div>
                }
                
            </fieldset>

            <div class="form-group row">
                <div class="col-sm-offset-3 col-sm-9">
                    <button type="submit" class="btn btn-primary" name="register-button">
                        @T("Account.Register.Button")
                    </button>
                </div>
            </div>

        </div>
    </div>
}

@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
     $(function() {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function(id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        ddlStates.trigger("change");
                        statesProgress.hide();
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}