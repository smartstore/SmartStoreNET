@model ProductDetailsModel
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Core.Domain.Orders;
@using System.Globalization;
@using System.Text.RegularExpressions;

    @if (Model.AddToCart.CustomerEntersPrice)
    {
        <div class="customer-entered-price line">
            @Html.LabelFor(model => Model.AddToCart.CustomerEnteredPrice, new { @class = "enter-price-label" })
            @*round price*@
            @Html.TextBox("CustomerEnteredPrice", Convert.ToInt32(Math.Ceiling(Model.AddToCart.CustomerEnteredPrice)), new { @class = "enter-price-input" })
            <div class="price-range">
                @Model.AddToCart.CustomerEnteredPriceRange
            </div>
        </div>
    }

    @if (!Model.AddToCart.DisableBuyButton || !Model.AddToCart.DisableWishlistButton)
    {
        <div class="price-details price-block line well" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
            @if(!Model.ProductPrice.CallForPrice) 
            {
                <div class="clearfix">

                    <div class="pull-right without-discount-block">
                        @if (!String.IsNullOrWhiteSpace(Model.ProductPrice.OldPrice))
                        {
                            @T("Products.Price.OldPrice")<text>:</text>
                            <span class="old-product-price">@Html.Raw(Model.ProductPrice.OldPrice)</span>
                            <br />
                        }
						
						<span>@Html.Raw(Model.ProductPrice.NoteWithoutDiscount)</span>

                        <span 
                        @if (String.IsNullOrWhiteSpace(Model.ProductPrice.PriceWithDiscount))
                        {
                            <text>class="product-price current text-success"</text>
                        }
                        else
                        {
                            <text>class="line-through"</text>
                        }
                        >
                            <span class="product-price-without-discount" itemprop="price">
                            @if (!String.IsNullOrWhiteSpace(Model.ProductPrice.Price))
                            {
                                @Html.Raw(Model.ProductPrice.Price)
                            }
                            </span>
                        </span>
                    </div>
        
					<div class="pull-left">
						@if (!String.IsNullOrWhiteSpace(Model.ProductPrice.OldPrice))
						{
							<br />
						}
						<span>@Html.Raw(Model.ProductPrice.NoteWithDiscount)</span>

						<span class="product-price with-discount current">
							<span class="product-price-with-discount" itemprop="price">
								@if (!String.IsNullOrWhiteSpace(Model.ProductPrice.PriceWithDiscount))
								{
									@Html.Raw(Model.ProductPrice.PriceWithDiscount)
								}
							</span>
						</span>
					</div>
                    
                </div>
            } 
            else 
            {
                <h4 class="call-for-price">@T("Products.CallForPrice")</h4>
            }

            <!-- base price -->
            <div class="base-price muted @(!Model.IsBasePriceEnabled ? "hide fade" : "")">
                @Model.BasePriceInfo
            </div>

            <!-- delivery time -->			
			@if (Model.DisplayDeliveryTime && Model.IsShipEnabled)
			{
				<div class="delivery-time">
					<span class="delivery-time-label">@T("Products.DeliveryTime")</span>

					@if (Model.DisplayDeliveryTimeAccordingToStock)
					{
                        <span class="delivery-time-color" style="background-color:@(Model.DeliveryTimeHexValue);@(Model.DeliveryTimeHexValue.HasValue() ? "" : "display:none;")" title="@Model.DeliveryTimeName"></span>
                        <span class="delivery-time-value">@Model.DeliveryTimeName</span>
					}
					else
					{
						<span class="delivery-time-color" style="display: none;" title="@Model.StockAvailability"></span>
                        <span class="delivery-time-value">@Model.StockAvailability</span>
					}
				</div>
			}

            @if(Model.ShowLegalInfo)
            {
                <div class="muted legal-info">
                    @Html.Raw(Model.LegalInfo)
                </div>
            }
        
        </div>
        <div class="add-to-cart line">
            <div class="form-inline clearfix" style="text-align:right;@(Model.IsAvailable ? "" : "display:none;")">
                @if (!Model.AddToCart.DisableBuyButton)
                {
                    if (!Model.ProductPrice.CallForPrice) 
                    {                         
                        @Html.LabelFor(model => Model.AddToCart.EnteredQuantity, new { @class = "qty-label" })<text>:</text>
                        if (Model.AddToCart.AllowedQuantities.Count > 0)
                        {
                            @Html.DropDownListFor(model => Model.AddToCart.EnteredQuantity, Model.AddToCart.AllowedQuantities, new { @class = "qty-dropdown" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => Model.AddToCart.EnteredQuantity, new { @class = "qty-input", style="width:25px" })
                        }

                        //if display measure unit
                        <span style="margin-right: 5px;">
                            @Model.QuantityUnitName
                        </span>
                        
                        <a class="btn btn-warning add-to-cart-button ajax-cart-link" 
                            href="#"
					        rel="nofollow"
                            data-href='@Url.Action("AddProduct", "ShoppingCart", new { productId = Model.AddToCart.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })' 
                            data-form-selector="#product-details-form"
                            data-type="cart"
                            data-action="add">
                            @(Model.AddToCart.AvailableForPreOrder ? T("ShoppingCart.PreOrder") : T("ShoppingCart.AddToCart"))
                            <i class="fa fa-cart-plus"></i>
                        </a>
					}
					else
					{
						<a class="btn btn-warning add-to-cart-button" rel="nofollow" href="@Url.Action("AskQuestion", "Product", new { id = Model.Id })">
							<i class="fa fa-envelope"></i>
							@T("Products.CallForPrice.GoToForm")
						</a>
					}
				}
            </div>
        
        </div>
    }
    @Html.Widget("productdetails_add_info")