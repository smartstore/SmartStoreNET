@model IList<ProductDetailsModel.ProductVariantAttributeModel>
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Core;
@using System.Text;
@using System.Globalization;
@using SmartStore.Services.Customers;
@using SmartStore.Services.Security;
@using SmartStore.Web;
@{
    var hidePrices = !EngineContext.Current.Resolve<IPermissionService>().Authorize(StandardPermissionProvider.DisplayPrices);
}
@if (Model.Count > 0)
{
    <div class="attributes">
        <dl>
            @foreach (var attribute in Model)
			{
				string controlId = string.Format("product_attribute_{0}_{1}_{2}_{3}", attribute.ProductId, attribute.BundleItemId, attribute.ProductAttributeId, attribute.Id);
                string textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;
				string disabled = (attribute.IsDisabled ? " disabled=\"disabled\"" : null);
				
                <dt><span class="text-prompt">
                    @textPrompt
                </span>
                    @if (attribute.IsRequired)
                    {
                        <span class="required">*</span>
                    }
                    @if (!string.IsNullOrEmpty(attribute.Description))
                    {
                        <div class="attribute-description">
                            @Html.Raw(attribute.Description)
                        </div>
                    }
                </dt>
                <dd>
                    @switch (attribute.AttributeControlType)
                    {
                        case AttributeControlType.DropdownList:
                            {
                                <select name="@(controlId)" id="@(controlId)" @(Html.Raw(disabled)) data-native-menu="false">
                                    @if (!attribute.IsRequired)
                                    {
                                        <option value="0">@T("Common.Unspecified")</option>
                                    }
                                    else if (attribute.Values.Count > 0 && !attribute.Values.Any(x => x.IsPreSelected))
                                    {
                                        <option value="0">@T("Common.PleaseSelect")</option>
                                    }
                                    @foreach (var pvaValue in attribute.Values)
                                    {
                                        <option selected="@pvaValue.IsPreSelected" value="@pvaValue.Id">@Html.Raw(pvaValue.Name + pvaValue.GetAttributeValueInfo())</option>
                                    }
                                </select>
                            }
                            break;
                        case AttributeControlType.RadioList:
                        case AttributeControlType.ColorSquares:
                            {
                        <ul class="option-list">
                            @foreach (var pvaValue in attribute.Values)
                            {
                                <li>
                                    <input id="@(controlId)_@(pvaValue.Id)" type="radio" name="@(controlId)" value="@pvaValue.Id" checked="@pvaValue.IsPreSelected"@(Html.Raw(disabled)) />
                                    <label for="@(controlId)_@(pvaValue.Id)">@(pvaValue.Name)@(pvaValue.GetAttributeValueInfo())</label>
                                </li>
                            }
                        </ul>
                            }
                            break;
                        case AttributeControlType.Checkboxes:
                            {
                        <ul class="option-list">
                            @foreach (var pvaValue in attribute.Values)
                            {
                                <li>
                                    <input id="@(controlId)_@(pvaValue.Id)" type="checkbox" name="@(controlId)" value="@pvaValue.Id" checked="@pvaValue.IsPreSelected"@(Html.Raw(disabled)) />
                                    <label for="@(controlId)_@(pvaValue.Id)">@(pvaValue.Name)@(pvaValue.GetAttributeValueInfo())</label>
                                </li>
                            }
                        </ul>
                            }
                            break;
                        case AttributeControlType.TextBox:
                            {
                        <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@attribute.TextValue"@(Html.Raw(disabled)) />
                            }
                            break;
                        case AttributeControlType.MultilineTextbox:
                            {
                        <textarea id="@(controlId)" name="@(controlId)"@(Html.Raw(disabled))>@attribute.TextValue</textarea>
                            }
                            break;
                        case AttributeControlType.Datepicker:
                            {
                        @Html.DatePickerDropDowns(controlId + "_day", controlId + "_month", controlId + "_year", DateTime.Now.Year, DateTime.Now.Year + 1, attribute.SelectedDay, attribute.SelectedMonth, attribute.SelectedYear, true, attribute.IsDisabled)
                            }
                            break;
                        case AttributeControlType.FileUpload:
                            {
                        <input type="file" id="@(controlId)" name="@(controlId)"@(Html.Raw(disabled))></input>
                            }
                            break;
                    }
                </dd>
            
            }
        </dl>
    </div>
}