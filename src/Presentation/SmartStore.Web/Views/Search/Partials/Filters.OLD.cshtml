@using SmartStore.Core.Search.Facets
@using SmartStore.Web.Models.Search
@using SmartStore.Services.Search.Extensions;

@model ISearchResultModel

@{
	Layout = "";

	int i = 0;
}

<div class="x-block x-block-bordered mega-search-filter x-card m-b-1">
	<div class="card-header hidden-xs-up">
		FACET TEST
	</div>
	<div class="x-block-body x-listbox faceted-search-container">
		<nav class="nav-filter" id="faceted-search">
			@foreach (var group in Model.SearchResult.Facets.OrderBy(x => x.Value.DisplayOrder))
			{
				i++;
				var hasSelection = group.Value.Facets.Any(x => x.Value.IsSelected);
				var scrollable = group.Value.Kind != FacetGroupKind.Price && group.Value.Kind != FacetGroupKind.Rating;

				<div class="facet-group" data-key="@group.Key">
					<a class="facet-toggle@(i > 3 && !hasSelection ? " collapsed" : "")" data-toggle="collapse" href="#facet-body-@(group.Key)" aria-expanded="true" aria-controls="facet-body-@(group.Key)">
						@(group.Value.Label ?? group.Key)
					</a>
					<div id="facet-body-@(group.Key)" class="facet-body collapse@(i <= 3 || hasSelection ? " in" : "")" aria-expanded="true">
						<div class="facet-body-inner@(scrollable ? " scrollable" : "")">
							@foreach (var facet in group.Value.Facets)
							{
								if (group.Key == "categoryid" || group.Key == "notfeaturedcategoryid")
								{
									@CategoryFacet(facet, 0)
								}
								else if (group.Value.IsMultiSelect)
								{
									@FacetCheckbox(facet)
								}
								else
								{
									@FacetRadio(facet)
								}
							}
							@if (group.Key == "price")
							{
								@*<div class="radio">
									<label>
										<input type="radio" name="optradio" id="PriceRangeFilter" @Html.Attr("checked", "checked", Model.IndividualPriceFrom.HasValue() || Model.IndividualPriceTo.HasValue())>
										<input type="number" maxlength="5" class="input-mini" id="PriceRangeFilterFrom" placeholder="@T("Search.PriceRange.From")" value="@Model.IndividualPriceFrom" />
										-
										<input type="number" maxlength="5" class="input-mini" id="PriceRangeFilterTo" placeholder="@T("Search.PriceRange.To")" value="@Model.IndividualPriceTo" />
										<button type="button" class="btn btn-small" id="PriceRangeFilterButton">
											<i class="fa fa-play-circle-o"></i> Go
										</button>
									</label>
								</div>*@
							}
						</div>
					</div>
				</div>
			}
		</nav>
	</div>
</div>

@helper FacetCheckbox(Facet facet)
{
	<div class="facet-check" data-href="@Url.FacetToggle(facet)">
		@if (facet.IsChoice)
		{
			<label>
				<input class="facet-control-native search-filter" type="checkbox" value="@facet.Value.ToString()" data-parentid="@facet.Value.ParentId" @Html.Attr("checked", "checked", facet.Value.IsSelected)>
				<span class="facet-control-ui"></span>
				@FacetLabel(facet)
			</label>
		}
		else
		{
			<div>
				@FacetLabel(facet)
			</div>
		}
	</div>
}

@helper FacetRadio(Facet facet) {{
	if (facet.FacetGroup.Kind == FacetGroupKind.Price && facet.Key == "custom")
	{
		string value = facet.Value.Value != null ? facet.Value.Value.ToString() : "";
		string upperValue = facet.Value.UpperValue != null ? facet.Value.UpperValue.ToString() : "";

		<div class="d-flex flex-nowrap m-b-1">
			<div class="flex-grow-1 p-r-05">
				<input type="text" class="form-control form-control-sm" value="@value" placeholder="@T("Search.PriceRange.From")" />
			</div>
			<div class="flex-grow-0 fw-700">
				<span style="line-height: 37px; vertical-align: middle">-</span>
			</div>
			<div class="flex-grow-1 p-l-05">
				<input type="text" class="form-control form-control-sm" value="@upperValue" placeholder="@T("Search.PriceRange.To")" />
			</div>
			<div class="flex-grow-0 p-l-1">
				<button type="button" class="btn btn-primary btn-sm btn-icon">
					<i class="fa fa-chevron-right"></i>
				</button>
			</div>
		</div>
	}

	if (facet.HitCount > 0 || !facet.IsChoice)
	{
		<div class="facet-radio" data-href="@Url.FacetToggle(facet)">
			<label>
				<input class="facet-control-native search-filter" type="radio" name="optradio" value="@facet.Value.ToString()" data-parentid="@facet.Value.ParentId" @Html.Attr("checked", "checked", facet.Value.IsSelected)>
				<span class="facet-control-ui"></span>
				@FacetLabel(facet)
			</label>
		</div>
	}
}}

@helper CategoryFacet(Facet facet, int margin)
{
	@FacetCheckbox(facet)
	if (facet.Children.Any())
	{
		<div style="margin-left: @(margin + 20)px;">
			@foreach (var child in facet.Children)
			{
				@CategoryFacet(child, margin)
			}
		</div>
	}
}

@helper FacetLabel(Facet facet)
{
	<span class="facet-label has-count" @Html.Attr("data-count", facet.HitCount.ToString("N0"), facet.HitCount > 0)>@(facet.Value.Label ?? facet.Value.ToString())</span>
}

<script type="text/javascript">
	jQuery(document).ready(function () {

		// quick & dirty for testing
		$(':input.search-filter').change(function () {
			var href = $(this).closest('[data-href]').data('href');
			if (href) {
				setLocation(href);
				return;
			}

			var val = $(this).val(),
				key = $(this).closest('.facet-group').data('key'),
				queryParams = getQueryParams();

			if (key === 'manufacturerid') {
				queryParams['m'] = update(queryParams['m'], val, $(this).is(':checked')).join();
			}
			else if (key === 'deliveryid') {
				queryParams['d'] = update(queryParams['d'], val, $(this).is(':checked')).join();
			}
			else if (key === 'categoryid' || key === 'notfeaturedcategoryid') {
				queryParams['c'] = update(queryParams['c'], val, $(this).is(':checked')).join();
			}
			else if (key.startsWith('attrid')) {
				var attrKey = 'attr' + $(this).data('parentid');
				queryParams[attrKey] = update(queryParams[attrKey], 'opt' + val, $(this).is(':checked')).join();
			}
			else if (key.startsWith('variantid')) {
				var variKey = 'vari' + $(this).data('parentid');
				queryParams[variKey] = update(queryParams[variKey], 'opt' + val, $(this).is(':checked')).join();
			}
			else if (key === 'rate') {
				queryParams['r'] = val;
			}
			else if (key.startsWith('price')) {
				queryParams['pt'] = val;
			}

			location.search = $.param(queryParams);
		});

		// individual price filter
		$('#PriceRangeFilterButton').click(function () {
			var pfVal = $('#PriceRangeFilterFrom').val(),
				ptVal = $('#PriceRangeFilterTo').val(),
				queryParams = getQueryParams();

			queryParams['pf'] = pfVal.replace(/[^\d\.\-]/g, '');
			queryParams['pt'] = ptVal.replace(/[^\d\.\-]/g, '');

			location.search = $.param(queryParams);
		});

		function getQueryParams() {
			var queryParams = {},
				queryString = location.search.substring(1),
				re = /([^&=]+)=([^&]*)/g,
				item;

			while (item = re.exec(queryString)) {
				queryParams[decodeURIComponent(item[1])] = decodeURIComponent(item[2]);
			}

			return queryParams;
		}

		function update(str, val, add) {
			var arr = (str ? str.split(',') : new Array()),
				index = $.inArray(val, arr);

			if (add) {
				if (index === -1)
					arr.push(val);
			}
			else {
				if (index !== -1)
					arr.splice(index, 1);
			}

			return arr;
		}

	});
</script>
