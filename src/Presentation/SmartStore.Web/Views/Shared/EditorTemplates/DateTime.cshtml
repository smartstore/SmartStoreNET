@functions{   
    private DateTime? Value
    {
        get
        {
            DateTime? value = null;
            if (ViewData.Model != null)
            {
                value = Convert.ToDateTime(ViewData.Model, System.Globalization.CultureInfo.CurrentCulture);
            }
            return value;
        }
    }
	
	private bool PickTime
	{
		get
		{
			if (ViewData.ContainsKey("pickTime"))
			{
				return ViewData["pickTime"].Convert<bool>();
			}
			else if (ViewData.ContainsKey("pickTimeFieldIds"))
			{
				var ids = ViewData["pickTimeFieldIds"] as List<string>;
				var id = ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty);
				return ids.Contains(id);
			}
			return false;
		}
	}
}

@{
    var id = ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty);
    var name = ViewData.TemplateInfo.GetFullHtmlFieldName(string.Empty);
    var value = String.Empty;
    if (Value.HasValue && Value.Value > DateTime.MinValue)
	{
		value = PickTime ? Value.Value.ToString() : Value.Value.ToShortDateString();
    }
}

<div class="input-append date" id="@id-parent" data-date="@value">
    @Html.TextBox("", value, new { @class = "span2" })<span class="add-on"><i class="fa fa-calendar"></i></span>
</div>

<script>
	$(function () {
		var c = Globalize.culture().calendars.standard;
		var fmt = c.patterns["d"];
		@if (PickTime)
		{
			<text>fmt += " " + c.patterns["T"].toLowerCase();</text>
		}
		$("#@id-parent").datetimepicker({ 
			language: 'glob', 
			format: fmt,
			pickDate: true, 
			pickTime: @PickTime.ToString().ToLower(), 
			pickSeconds: @PickTime.ToString().ToLower(), 
			pick12HourFormat: false,
			maskInput: true, 
			collapse: true });
    });
</script>


