@model AddressModel
@using SmartStore.Web.Models.Common;
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                //show progress
                $.mobile.showPageLoadingMsg();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        //hide progress
                        $.mobile.hidePageLoadingMsg();

                        //jQuery Mobile. If you manipulate a select via JavaScript, you must call the refresh method on it to update the visual styling.
                        ddlStates.selectmenu("refresh");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        //hide progress
                        $.mobile.hidePageLoadingMsg();
                    }
                });
            });
        });
    </script>
}
@Html.HiddenFor(model => model.Id)

@if (Model.CompanyEnabled)
{
    <div>
        @Html.LabelFor(model => model.Company, new { @class = "control-label" + (Model.CompanyRequired ? " required" : ""), @for = "Company" })
        @Html.EditorFor(model => model.Company)
        @Html.ValidationMessageFor(model => model.Company)
    </div>
}
<div>
    @Html.LabelFor(model => model.FirstName, new { @class = "control-label required", @for = "FirstName" })
    @Html.EditorFor(model => model.FirstName)
    @Html.ValidationMessageFor(model => model.FirstName)
</div>
<div>
    @Html.LabelFor(model => model.LastName, new { @class = "control-label required", @for = "LastName" })
    @Html.EditorFor(model => model.LastName)
    @Html.ValidationMessageFor(model => model.LastName)
</div>
<div>
    @Html.LabelFor(model => model.Email, new { @class = "control-label required", @for = "Email" })
    @Html.EditorFor(model => model.Email)
    @Html.ValidationMessageFor(model => model.Email)
</div>

@if (Model.ValidateEmailAddress)
{
    <div>
        @Html.LabelFor(model => model.EmailMatch, new { @class = "control-label required", @for = "EmailMatch" })
        @Html.EditorFor(model => model.EmailMatch)
        @Html.ValidationMessageFor(model => model.EmailMatch)
    </div>
}

@if (Model.StreetAddressEnabled)
{
    <div>
        @Html.LabelFor(model => model.Address1, new { @class = "control-label" + (Model.StreetAddressRequired ? " required" : ""), @for = "Address1" })
        @Html.EditorFor(model => model.Address1)
        @Html.ValidationMessageFor(model => model.Address1)
    </div>
}
@if (Model.StreetAddress2Enabled)
{
    <div>
        @Html.LabelFor(model => model.Address2, new { @class = "control-label" + (Model.StreetAddress2Required ? " required" : ""), @for = "Address2" })
        @Html.EditorFor(model => model.Address2)
        @Html.ValidationMessageFor(model => model.Address2)
    </div>
}
@if (Model.ZipPostalCodeEnabled)
{
    <div>
        @Html.LabelFor(model => model.ZipPostalCode, new { @class = "control-label" + (Model.ZipPostalCodeRequired ? " required" : ""), @for = "ZipPostalCode" })
        @Html.EditorFor(model => model.ZipPostalCode)
        @Html.ValidationMessageFor(model => model.ZipPostalCode)
    </div>
}
@if (Model.CityEnabled)
{
    <div>
        @Html.LabelFor(model => model.City, new { @class = "control-label" + (Model.CityRequired ? " required" : ""), @for = "City" })
        @Html.EditorFor(model => model.City)
        @Html.ValidationMessageFor(model => model.City)
    </div>
}
@if (Model.CountryEnabled)
{
    <div>
        @Html.LabelFor(model => model.CountryId, new { @class = "control-label required", @for = "CountryId" })
        @Html.DropDownListFor(model => model.CountryId, Model.AvailableCountries, new { data_native_menu = "false" })
        @Html.ValidationMessageFor(model => model.CountryId)
    </div>
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <div>
        @Html.LabelFor(model => model.StateProvinceId, new { @class = "control-label", @for = "StateProvinceId" })
        @Html.DropDownListFor(model => model.StateProvinceId, Model.AvailableStates, new { data_native_menu = "false" })
        @Html.ValidationMessageFor(model => model.StateProvinceId)
    </div>
}
@if (Model.PhoneEnabled)
{
    <div>
        @Html.LabelFor(model => model.PhoneNumber, new { @class = "control-label" + (Model.PhoneRequired ? " required" : ""), @for = "PhoneNumber" })
        @Html.EditorFor(model => model.PhoneNumber)
        @Html.ValidationMessageFor(model => model.PhoneNumber)
    </div>
}
@if (Model.FaxEnabled)
{
    <div>
        @Html.LabelFor(model => model.FaxNumber, new { @class = "control-label" + (Model.FaxRequired ? " required" : ""), @for = "FaxNumber" })
        @Html.EditorFor(model => model.FaxNumber)
        @Html.ValidationMessageFor(model => model.FaxNumber)
    </div>
}