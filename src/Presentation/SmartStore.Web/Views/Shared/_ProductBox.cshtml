@model ProductOverviewModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Web.Models.Catalog;
@{
    // Perf: we use RouteValueDictionary instead of anonymous objects in this view because it's slightly faster
	// prepare "Add to cart" AJAX link
    string addtocartlink = "";
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
	{
		addtocartlink = Url.Action("AddProductSimple", "ShoppingCart", new RouteValueDictionary { { "productId", Model.Id }, { "forceredirection", Model.ProductPrice.ForceRedirectionAfterAddingToCart } });
    }
    else
	{
		addtocartlink = Url.Action("AddProductSimple", "ShoppingCart", new RouteValueDictionary { { "productId", Model.Id } });
    }

    bool showQuicklinks = !Model.ProductPrice.DisableWishListButton || Model.CompareEnabled;
	var productDetailLink = Url.RouteUrl("Product", new RouteValueDictionary { { "SeName", Model.SeName } });
}

@if (showQuicklinks)
{
    <div class="quicklinks">        
        @if (!Model.ProductPrice.DisableWishListButton)
		{
			<a class="ajax-cart-link"
			   data-href='@Url.Action("AddProduct", "ShoppingCart", new RouteValueDictionary { { "productId", Model.Id }, { "shoppingCartTypeId", (int)ShoppingCartType.Wishlist } })'
			   href="#"
			   rel="nofollow"
			   data-form-selector="#product-details-form"
			   data-type="wishlist"
			   data-action="add">
				<i class="fa fa-heart"></i>
				@T("Categories.Wishlist")
			</a>
		}
        @if (Model.CompareEnabled)
		{
			<a class="ajax-cart-link pull-right"
			   data-href="@Url.Action("AddProductToCompare", "Catalog", new RouteValueDictionary { { "id", Model.Id } })"
			   href="#"
			   rel="nofollow"
			   data-type="compare"
			   data-action="add">
				<i class="fa fa-file-text"></i>
				@T("Categories.Compare")
			</a>
		}
    </div>
}

<figure class="picture" data-equalized-part="picture" data-equalized-valign="true">
	@if (Model.DefaultPictureModel.ImageUrl.HasValue())
	{
		<a href="@productDetailLink" title="@Model.DefaultPictureModel.Title">
			<img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
		</a>
	}
    @if (Model.ColorAttributes.Any())
    {
        <div class="colors">
            @foreach (var clr in Model.ColorAttributes)
            {
                <span style="background-color: @clr.Color" title="@clr.FriendlyName"></span>
            }
        </div>
    }
</figure>

<div class="data">

    @if (Model.ShowReviews)
	{
        int ratingPercent = 0;
        if (Model.TotalReviews != 0)
        {
            ratingPercent = ((Model.RatingSum * 100) / Model.TotalReviews) / 5;
        }

        string reviewTitle = "";
        if (Model.TotalReviews > 0)
        {
            reviewTitle = Model.TotalReviews + (Model.TotalReviews == 1 ? T("Reviews.Overview.Review") : T("Reviews.Overview.Reviews"));
        }
        <div class="reviews" title="@reviewTitle">
            <div class="rating">
                <div style="width: @(ratingPercent)%"></div>
            </div>
        </div>
    }

    @{
        string name = null, nameTitle = null;
        name = Model.Name.Truncate(50, "...");
        if (Model.Name.Length > name.Length)
        {
            nameTitle = Model.Name;
        }
    }
    <h3 class="name" data-equalized-part="name">
        <a href="@productDetailLink" title="@nameTitle">
            @if (Model.IsNew)
            {
                <span class="label label-isnew">@T("Common.New")</span>
            } 
            <span>@name</span>
        </a>
    </h3>
    @{
		string desc = null, descTitle = null;
		if (Model.ShortDescription.HasValue())
		{
			desc = Model.ShortDescription.Truncate(50, "...");
			if (Model.ShortDescription.Length > desc.Length)
			{
				descTitle = Model.ShortDescription;
			}
		}
    }
    <p class="description" title="@descTitle" data-equalized-part="description">
        @Html.Raw(desc)
    </p>
    
    @if (Model.ShowDeliveryTimes)
	{
		<div class="delivery-time@(Model.InvisibleDeliveryTime ? " invisible" : "")" data-equalized-part="delivery-time">
			@if ((!String.IsNullOrEmpty(Model.DeliveryTimeName) && !String.IsNullOrEmpty(Model.DeliveryTimeHexValue)) && Model.IsShipEnabled)
			{
				<span class="delivery-time-label">@T("Products.DeliveryTime")</span>
				if (Model.DisplayDeliveryTimeAccordingToStock)
				{
					<span class="delivery-time-color" style="background-color:@Model.DeliveryTimeHexValue" title="@Model.DeliveryTimeName"></span>
				}
				else
				{
					<span class="delivery-time-color" style="background-color:#9d261d" title="@Model.StockAvailablity"></span>
				}
			}
		</div>
	}

    <div class="prices" data-equalized-part="prices">
        @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
        {
            <p class="old-product-price">
                <span class="price">@Model.ProductPrice.OldPrice</span>
            </p>
        }
        <p class="product-price">
            @if (Model.ProductPrice.ShowDiscountSign && Model.ProductPrice.HasDiscount)
            {
                <span class="label label-important label-discount-sign">%</span>
            }
            <span class="price text-success">@Model.ProductPrice.Price</span>
        </p>

        @if (Model.DisplayBasePrice && !String.IsNullOrEmpty(Model.BasePriceInfo))
        {
        <div class="base-price muted">
            @Model.BasePriceInfo
        </div>
        }

        @if (Model.TransportSurcharge.HasValue())
        {
        <div class="transport-charge muted">
            @Model.TransportSurcharge
        </div>
        }
    </div>

    <div class="buttons">
                
        @if (!Model.ProductPrice.DisableBuyButton && !Model.HideBuyButtonInLists)
        {
            if (!Model.ProductPrice.CallForPrice) { 
                var title = (Model.ProductPrice.AvailableForPreOrder ? T("ShoppingCart.PreOrder") : T("ShoppingCart.AddToCart"));
                <a data-href='@addtocartlink' 
                    href="#"
                    class="btn btn-warning ajax-cart-link"
                    title="@title" 
                    rel="tooltip nofollow"
                    data-type="cart"
                    data-action="add">
                    <i class="fa fa-lg fa-cart-arrow-down"></i>      
                </a>
			}
			else
			{
				<a class="btn btn-primary add-to-cart-button" rel="nofollow"
				   href="@Url.Action("AskQuestion", "Product", new RouteValueDictionary { { "id", Model.Id } })"
				   title="@T("Products.CallForPrice.GoToForm")">
					<i class="fa fa-envelope"></i>
				</a>
			}
		}
        <a href='@Url.RouteUrl("Product", new RouteValueDictionary { { "SeName", Model.SeName } })' class="btn">
            <i class="fa fa-info-circle"></i>
            @T("Products.Details")
        </a>
    </div>

    @Html.Widget("productbox_add_info")
    
</div>
