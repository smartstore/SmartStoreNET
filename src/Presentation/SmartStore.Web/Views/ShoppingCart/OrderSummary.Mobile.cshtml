@model ShoppingCartModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Web.Models.ShoppingCart;

@helper BundleProducts(ShoppingCartModel.ShoppingCartItemModel parentItem)
{
	if (parentItem.ChildItems != null)
	{
		foreach (var item in parentItem.ChildItems.OrderBy(x => x.BundleItem.DisplayOrder))
		{
			<div class="bundle-item">
				<div class="bundle-item-name">
					@if (item.VisibleIndividually)
					{
						<a href="@item.ProductUrl" title="@T("Products.Details")">@item.ProductName</a>
					}
					else
					{
						@item.ProductName
					}
					@if (item.Quantity > 1 && item.BundlePerItemShoppingCart)
					{
						<text>
							&#215;&nbsp;@item.Quantity
						</text>
					}
				</div>
				@if (!String.IsNullOrWhiteSpace(item.BundleItem.PriceWithDiscount))
				{
					<div class="bundle-item-price">
						@Html.Raw(item.BundleItem.PriceWithDiscount)
					</div>
				}
				@if (!String.IsNullOrEmpty(item.AttributeInfo))
				{
					<div class="bundle-item-attribute-info">
						@Html.Raw(item.AttributeInfo)
					</div>
				}
				@if (item.Warnings.Count > 0)
				{
					<div class="message-error">
						<ul>
							@foreach (var warning in item.Warnings)
							{
								<li>@warning</li>
							}
						</ul>
					</div>
				}
			</div>
		}
	}
}

<div class="order-summary-content">
    @Html.Widget("mobile_order_summary_content_before")
    @Html.Partial("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
        <div class="message-error">
            <ul>
                @for (int i = 0; i < Model.Warnings.Count; i++)
                {
                    <li>@Model.Warnings[i]</li>
                }
            </ul>
        </div>
        }
@*set "data-ajax" attribute to "false"*@
@*we add enctype = "multipart/form-data" because "File upload" attribute control type requries it*@
        using (Html.BeginRouteForm("ShoppingCart", FormMethod.Post, new Dictionary<string, Object> { { "data-ajax", "false" }, { "enctype", "multipart/form-data" } }))
        {
        <div class="cart">
            <ul data-role="listview" data-inset="true" data-filter="false" class="list-order-products">
                @foreach (var item in Model.Items)
                {
                    <li>
                        <div class="cart-item-row">
                            <div class="product">
								<a href="@item.ProductUrl" title="@T("Products.Details")">@item.ProductName</a>
                                @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                {
                                    <div class="attributes">
                                        @Html.Raw(item.AttributeInfo)
                                    </div>
                                }
                                @if (!String.IsNullOrEmpty(item.RecurringInfo))
                                {
                                    <div class="recurring-info">
                                        @Html.Raw(item.RecurringInfo)
                                    </div>
                                }
                                @if (item.Warnings.Count > 0)
                                {
                                    <div class="message-error">
                                        <ul>
                                            @for (int i = 0; i < item.Warnings.Count; i++)
                                            {
                                                <li>@item.Warnings[i]</li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                            @if (Model.ShowSku && !String.IsNullOrEmpty(item.Sku))
                            {
                                <div class="sku">
                                    @T("ShoppingCart.SKU"): @item.Sku
                                </div>
                            }
                            <div class="unitprice">
                                @T("ShoppingCart.UnitPrice"): @item.UnitPrice
                            </div>
							
							@if (item.ProductType == ProductType.BundledProduct)
							{
								<div class="product-bundle-items">
									@BundleProducts(item)
								</div>
							}
							
                            <div class="quantity">
                                @T("ShoppingCart.Quantity"):
                                @if (Model.IsEditable)
                                {
                                    if (item.AllowedQuantities.Count > 0)
                                    {
                                    <select name="itemquantity@(item.Id)" class="qty-dropdown"  data-mini="true" data-inline="true">
                                        @foreach (var qty in item.AllowedQuantities)
                                        {
                                            <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                        }
                                    </select>
                                    }
                                    else
                                    {
                                    <input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" />
                                    }
                                }
                                else
                                {
                                    <span>@item.Quantity</span>
                                }
                            </div>
                            <div class="totalprice">
                                @T("ShoppingCart.ItemTotal"): @item.SubTotal
                                @if (!String.IsNullOrEmpty(item.Discount))
                                {
                                    <div class="discount">
                                        @T("ShoppingCart.ItemYouSave"): @item.Discount
                                    </div>
                                }
                            </div>
							@if (!Model.IsEditable && item.IsDownload && item.HasUserAgreement)
							{
								<div class="download-agreement">
									<label>
										<input type="checkbox" name="AgreeUserAgreement@(item.ProductId)">
										@T("DownloadableProducts.UserAgreementConfirmation", item.ProductId)
									</label>
								</div>
							}
							@if (!Model.IsEditable && Model.DisplayEsdRevocationWaiverBox && item.IsEsd)
							{
								<div class="esd-revocation-waiver">
									<label>
										<input type="checkbox" name="AgreeEsdRevocationWaiver@(item.ProductId)">
										@T("Checkout.EsdRevocationWaiverConfirmation")
									</label>
								</div>
							}
                            @if (Model.IsEditable)
                            {
                                <div class="updateitem">
                                    <input type="submit" name="updatecartitem-@(item.Id)" value="@T("ShoppingCart.UpdateCartItem")" />
                                </div>
                                <div class="remove">
                                    <input type="submit" name="removefromcart-@(item.Id)" value="@T("ShoppingCart.Remove")" />
                                </div> 
                            }
                        </div>
                    </li>
                }
            </ul>
        </div>
                if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
                {
        <div class="selected-checkout-attributes">
            @Html.Raw(Model.CheckoutAttributeInfo)
        </div>
                }
        <div>
            @if (Model.IsEditable)
            {
                <div class="common-buttons">
                    <input type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" />
                    <div style="display: none;">
                        <input type="submit" name="startcheckout" value="startcheckout" id="startcheckout" />
                    </div>
                </div>
                @Html.Partial("_CheckoutAttributes", Model.CheckoutAttributes, new ViewDataDictionary())
            }
        </div>
        <div class="cart-footer">
            @if (Model.IsEditable)
            {
                if (!String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                {
                <div>
                    <div class="min-amount-warning">
                        @Model.MinOrderSubtotalWarning
                    </div>
                </div>
                }
            }
            <div class="cart-collaterals">
                @if (Model.IsEditable)
                {
                    <div class="deals">
                        @Html.Partial("_DiscountBox", Model.DiscountBox)
                        @Html.Partial("_GiftCardBox", Model.GiftCardBox)
                        @Html.Widget("mobile_order_summary_content_deals")
                    </div>
                }
            </div>
            <div class="totals">
                @Html.Action("OrderTotals", "ShoppingCart", new { isEditable = Model.IsEditable })

				@Html.Widget("mobile_order_summary_content_totals_bottom")
				@Html.Widget("mobile_order_summary_content_totals_left")

                @if (Model.IsEditable)
                {
                    @*if (Model.TermsOfServiceEnabled)
                    {
                    <div class="terms-of-service">
                        <input id="termsofservice" type="checkbox" name="termsofservice" />
                        <label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
                    </div>
                    }
                    *@
                    <div class="checkout-buttons">
                        @if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            @*
                            <script type="text/javascript">
                                $(document).ready(function () {
                                    $('#checkout').click(function () {
                                        //terms of services
                                        var termOfServiceOk = true;
                                        @if (Model.TermsOfServiceEnabled)
                                        {
                                                <text>
                                        if (!$('#termsofservice').is(':checked')) {
                                            alert('@T("Checkout.TermsOfService.PleaseAccept")');
                                            termOfServiceOk = false;
                                        }
                                        else {
                                            termOfServiceOk = true;
                                        }
                                                </text>
                                        }
                                        if (termOfServiceOk) {
                                            $('#startcheckout').trigger("click");
                                        }
                                    });
                                });
                            </script>*@
                            <input type="submit" name="checkout" value="@T("Checkout.Button")" id="checkout" onclick="$('#startcheckout').trigger('click'); return false;" />
                        }
                    </div>
                }
            </div>
        </div>
        }
        if (Model.IsEditable)
        {
        <div class="addon-buttons">
            @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express, Pay with Amazon)*@
			@foreach(var item in Model.ButtonPaymentMethods.Items)
			{
				@Html.Action(item.ActionName, item.ControllerName, item.RouteValues)
			}
        </div>
        }
    }
    else
    {
        @T("ShoppingCart.CartIsEmpty")
    }

	@if (!Model.IsEditable)
	{
		<div class="order-options">
			@if (Model.NewsLetterSubscription != CheckoutNewsLetterSubscription.None)
			{
				<label>
					<input type="checkbox" name="SubscribeToNewsLetter" @(Model.NewsLetterSubscription == CheckoutNewsLetterSubscription.Activated ? "checked='checked'" : "") />
					@T("Checkout.SubscribeToNewsLetter")
				</label>
			}
			@if (Model.ThirdPartyEmailHandOver != CheckoutThirdPartyEmailHandOver.None)
			{
				<label>
					<input type="checkbox" name="AcceptThirdPartyEmailHandOver" @(Model.ThirdPartyEmailHandOver == CheckoutThirdPartyEmailHandOver.Activated ? "checked='checked'" : "") />
					@Model.ThirdPartyEmailHandOverLabel
				</label>
			}
		</div>
	}

    @Html.Widget("mobile_order_summary_content_after")
</div>

@if (!Model.IsEditable && Model.Items.Any(x => x.IsDownload && x.HasUserAgreement))
{
	<script type="text/javascript">
		$(document).ready(function () {
			$('a.download-user-agreement').click(function () {
				var url = '@(Url.Action("GetUserAgreement", "Download"))?asPlainText=true&productId=' + $(this).attr('data-id');
				$.get(url, function (text) {
					alert(text);
				});
				return false;
			});
		});
	</script>
}