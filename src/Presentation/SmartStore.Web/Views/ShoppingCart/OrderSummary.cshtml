@model ShoppingCartModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Web.Models.ShoppingCart;

@helper SimpleProduct(ShoppingCartModel.ShoppingCartItemModel item)
{
    <tr class="cart-item-row">
		@if (Model.IsEditable)
		{
			<td class="remove text-xs-center">
                <a class="remove ajax-cart-link btn btn-secondary btn-sm"
                   href="#"
                   rel="nofollow"
                   data-href='@Url.Action("DeleteCartItem", "ShoppingCart", new { cartItemId = item.Id })'
                   data-name="@item.ProductName"
                   data-type="cart"
                   data-action="remove"
                   title='@T("Common.Remove")'>
                    <i class="fa fa-trash-o m-r-0"></i>
                </a>

                <script type="text/javascript">
                    //TODO NewAlpha: implement smooth animation and relocate script
                    $(".ajax-cart-link").click(function () {

                        //if there is more then one line
                        if ($(".product-body[style!='display: none;']").length > 1)
                        {
                            var itemLine = $(this).closest(".product-body");
                            //$(itemLine, "td").wrapInner('<div style="display:inline" />').slideUp();
                            itemLine.slideUp();
                        }
                        else 
                        {
                            //reload page
                            location.reload();
                        }
                    });
                </script>

			</td>
		}
		@if (Model.ShowSku)
		{
			<td class="text-nowrap">
				@item.Sku
			</td>
		}
		@if (Model.ShowProductImages)
		{
			<td class="productpicture text-nowrap">
				@if (item.Picture.ImageUrl.HasValue())
				{
					<img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
				}
			</td>
		}
		<td class="product">
			<a href="@item.ProductUrl" title="@T("Products.Details")">@item.ProductName</a>

			@if (Model.DisplayShortDesc && !String.IsNullOrEmpty(item.ShortDesc))
			{
				<div class="short-desc">
					@Html.Raw(item.ShortDesc)
				</div>
			}

            @if (Model.DisplayBasePrice && !String.IsNullOrEmpty(item.BasePrice))
            {
                <div class="base-price text-muted text-smaller">
                    @item.BasePrice
                </div>
            }

			@if (Model.DisplayDeliveryTime && item.IsShipEnabled && (!String.IsNullOrEmpty(item.DeliveryTimeName) && !String.IsNullOrEmpty(item.DeliveryTimeHexValue)))
			{
				<div class="deliverytime-group">
					<span>@T("Products.DeliveryTime")</span>
					<span class="delivery-time" style="color:@item.DeliveryTimeHexValue" title="@item.DeliveryTimeName">
                        <i class="fa fa-circle delivery-time-status"></i>
                        @item.DeliveryTimeName
                    </span>
				</div>
			}

			@if (!String.IsNullOrEmpty(item.AttributeInfo))
			{
				<div class="attributes text-muted text-smaller">
					@Html.Raw(item.AttributeInfo)
				</div>
			}
			@if (!String.IsNullOrEmpty(item.RecurringInfo))
			{
				<div class="recurring-info">
					@Html.Raw(item.RecurringInfo)
				</div>
			}
			@if (!Model.IsEditable && item.IsDownload && item.HasUserAgreement)
			{
				<div class="download-agreement">
					<div class="checkbox">
						<label>
							<input type="checkbox" name="AgreeUserAgreement@(item.ProductId)" />
							@T("DownloadableProducts.UserAgreementConfirmation", item.ProductId)
						</label>
					</div>
				</div>
			}
			@if (!Model.IsEditable && Model.DisplayEsdRevocationWaiverBox && item.IsEsd)
			{
				<div class="esd-revocation-waiver">
					<div class="checkbox">
						<label>
							<input type="checkbox" name="AgreeEsdRevocationWaiver@(item.ProductId)" />
							@T("Checkout.EsdRevocationWaiverConfirmation")
						</label>
					</div>
				</div>
			}
			@if (item.Warnings.Count > 0)
			{
				<div class="alert alert-danger">
					@for (int i = 0; i < item.Warnings.Count; i++)
					{
						<p>@item.Warnings[i]</p>
					}
				</div>
			}
		</td>

        @if (Model.DisplayWeight)
		{
            <td class="weight text-nowrap">
                <span class="product-weight">@((item.Weight * item.EnteredQuantity).ToString("N2")) kg</span>
            </td>
        }

		<td class="unit-price text-nowrap">
			<span class="product-unit-price">@item.UnitPrice</span>
		</td>
		<td class="text-nowrap" style="width:170px">
			@if (Model.IsEditable)
            {
                @Html.EditorFor(x => item, "QtyInput", new { htmlAttributes = new { id = "itemquantity{0}".FormatWith(item.Id), Name = "itemquantity{0}".FormatWith(item.Id) } })
            }
            else
            {
				<span>@item.EnteredQuantity</span>
			}
		</td>
		<td class="text-nowrap omega">
			<span class="product-subtotal">@item.SubTotal</span>
			@if (!String.IsNullOrEmpty(item.Discount))
			{
				<div class="discount">
					@T("ShoppingCart.ItemYouSave"): @item.Discount
				</div>
			}
		</td>
	</tr>
}

@helper BundleProducts(ShoppingCartModel.ShoppingCartItemModel parentItem)
{
	if (parentItem.ChildItems != null)
	{   
        <tr class="product-bundle-row">
            <td colspan="2">&nbsp;</td>
            <td colspan="5" class="bundle-headline">
                @T("Basket.Bundle.BundleIncludes")
            </td>
        </tr>
             
		foreach (var item in parentItem.ChildItems.OrderBy(x => x.BundleItem.DisplayOrder))
		{
			<tr class="product-bundle-row">
				@if (Model.IsEditable)
				{
					<td>&nbsp;</td>
				}
				@if (Model.ShowSku)
				{
					<td>&nbsp;</td>
				}
				@if (Model.ShowProductImages)
				{
					<td>&nbsp;</td>
				}
				<td class="product">
					<div class="bundle-item">
						@if (Model.ShowProductBundleImages)
						{
							<div class="bundle-item-image" style="@("min-width: {0}px; min-height: {0}px;".FormatInvariant(Model.BundleThumbSize + 10))">
								@if (item.Picture.ImageUrl.HasValue() && !item.BundleItem.HideThumbnail)
								{
									<img src="@item.Picture.ImageUrl" alt="@item.Picture.AlternateText" title="@item.Picture.Title" />
								}
							</div>
						}						
						<div class="bundle-item-body">
							<div class="bundle-item-name">
								@if (item.VisibleIndividually)
								{
									<a href="@item.ProductUrl" title="@T("Products.Details")">@item.ProductName</a>
								}
								else
								{
									@item.ProductName
								}
								@if (item.EnteredQuantity > 1 && item.BundlePerItemShoppingCart)
								{
									<text>
										&#215;&nbsp;@item.EnteredQuantity
									</text>
								}
							</div>
							@if (Model.DisplayShortDesc && !String.IsNullOrWhiteSpace(item.ShortDesc))
							{
								<div class="bundle-item-description short-desc">
									@Html.Raw(item.ShortDesc)
								</div>
							}
                            @if (Model.DisplayBasePrice && !String.IsNullOrEmpty(item.BasePrice))
                            {
                                <div class="base-price text-muted">
                                    @item.BasePrice
                                </div>
                            }
							@if (!String.IsNullOrEmpty(item.AttributeInfo))
							{
								<div class="bundle-item-attribute-info text-muted">
									@Html.Raw(item.AttributeInfo)
								</div>
							}
							@if (item.Warnings.Count > 0)
							{
								<div class="alert alert-danger">
									@foreach (var warning in item.Warnings)
									{
										<p>@warning</p>
									}
								</div>
							}
						</div>
					</div>
				</td>
				<td class="unit-price text-nowrap">
					@if (!String.IsNullOrWhiteSpace(item.BundleItem.PriceWithDiscount))
					{
						<span class="text-muted">
							@Html.Raw(item.BundleItem.PriceWithDiscount)
						</span>
					}
					else
					{
						<text>&nbsp;</text>
					}
				</td>
				<td class="text-nowrap">
					&nbsp;
				</td>
				<td class="text-nowrap text-success omega">
					&nbsp;
				</td>
			</tr>
		}	
	}
}

<div class="order-summary-content">
	
    @{ Html.RenderWidget("order_summary_content_before"); }

	@{ Html.RenderPartial("_OrderReviewData", Model.OrderReviewData); }
   
    @if (Model.DisplayCommentBox && !Model.IsEditable)
    {
        Html.RenderPartial("_CommentBox", Model);
    }

	@if (!Model.IsEditable && (Model.NewsLetterSubscription != CheckoutNewsLetterSubscription.None || Model.ThirdPartyEmailHandOver != CheckoutThirdPartyEmailHandOver.None))
	{
		<div class="block block-bordered newsletter-subscription">
			<div class="block-title">
				<h3>@T("Common.Options")</h3>
			</div>
			<div class="block-body">
				@if (Model.NewsLetterSubscription != CheckoutNewsLetterSubscription.None)
				{
					<div class="checkbox">
						<label>
							<input type="checkbox" name="SubscribeToNewsLetter" @(Model.NewsLetterSubscription == CheckoutNewsLetterSubscription.Activated ? "checked='checked'" : "") />
							@T("Checkout.SubscribeToNewsLetter")
						</label>
					</div>
				}
				@if (Model.ThirdPartyEmailHandOver != CheckoutThirdPartyEmailHandOver.None)
				{
					<div class="checkbox">
						<label>
							<input type="checkbox" name="AcceptThirdPartyEmailHandOver" @(Model.ThirdPartyEmailHandOver == CheckoutThirdPartyEmailHandOver.Activated ? "checked='checked'" : "") />
							@Model.ThirdPartyEmailHandOverLabel
						</label>
					</div>
				}
			</div>
		</div>
	}

    @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
    {
        <div class="selected-checkout-attributes card card-block text-xs-left">
            @Html.Raw(Model.CheckoutAttributeInfo)
        </div>
    }

	@if (Model.Items.Count > 0)
	{
		if (Model.Warnings.Count > 0)
		{
			<div class="alert alert-danger">
				@for (int i = 0; i < Model.Warnings.Count; i++)
				{
					<p>@Model.Warnings[i]</p>
				}
			</div>
		}
		@*we add enctype = "multipart/form-data" because "File upload" attribute control type requries it*@
    using (Html.BeginRouteForm("ShoppingCart", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
		<table class="cart table table-order-products">
			<thead>
				<tr class="cart-header-row">
					@if (Model.IsEditable)
                    {
						<th>
							@T("ShoppingCart.Remove")
						</th>
                    }
					@if (Model.ShowSku)
                    {
						<th>
							@T("ShoppingCart.SKU")
						</th>
                    }
					@if (Model.ShowProductImages)
                    {
						<th class="picture"></th>
                    }
					<th>
						@T("ShoppingCart.Product(s)")
					</th>

                    @if (Model.DisplayWeight)
                    {
                    <th>
                        @T("ShoppingCart.Weight")
                    </th>
                    }
					<th class="unit-price">
						@T("ShoppingCart.UnitPrice")
					</th>
					<th>
						@T("ShoppingCart.Quantity")
					</th>
					<th class="omega">
						@T("ShoppingCart.ItemTotal")
					</th>
				</tr>
			</thead>
			@{
                foreach (var item in Model.Items)
                {
                    if (item.ProductType == ProductType.BundledProduct)
                    {
						<tbody class="product-body product-body-bundle">
							@SimpleProduct(item)
							@BundleProducts(item)
						</tbody>
                    }
                    else
                    {
						<tbody class="product-body product-body-simple">
							@SimpleProduct(item)
						</tbody>
                    }
                }
			}
		</table>

        if (Model.IsEditable)
        {
			<div class="common-buttons clearfix">
				<button type="submit" name="updatecart" value="updatecart" class="btn btn-secondary pull-right update-cart-button">
					<i class="fa fa-refresh"></i>&nbsp;@T("ShoppingCart.UpdateCart")
				</button>
                <button type="submit" name="continueshopping" value="continueshopping" class="btn btn-secondary pull-left continue-shopping-button">
                    <i class="fa fa-caret-left"></i>&nbsp;@T("ShoppingCart.ContinueShopping")
                </button>
				<input type="submit" name="startcheckout" value="startcheckout" id="startcheckout" style="display: none;" />
			</div>
        }

		<div class="cart-footer row m-t-3">

			<div class="col-sm-8 order-totals-left">

				@{ Html.RenderWidget("order_summary_content_totals_left"); }

				@if (Model.IsEditable)
                {
                    <div class="row">
                        <!-- Discount Code, Gift Cards, Estimate shipping -->
                        <div class="col-sm-6">
                            @{
                                Html.RenderPartial("_DiscountBox", Model.DiscountBox);
                                Html.RenderPartial("_GiftCardBox", Model.GiftCardBox);
                            }
                            @{ Html.RenderWidget("order_summary_content_deals"); }
                        </div>

                        <!-- Checkout attributes -->
                        <div class="col-sm-6">
                            @{
                                Html.RenderPartial("_CheckoutAttributes", Model.CheckoutAttributes, new ViewDataDictionary());
                                Html.RenderPartial("EstimateShipping", Model.EstimateShipping);
                            }
                        </div>
                    </div>
                                }
			</div>

			<!-- Totals -->
			<div class="col-sm-4">
				@if (Model.IsEditable && !String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                {
					<div class="alert alert-info" style="margin-top: 0">
						@Model.MinOrderSubtotalWarning
					</div>
                }

				@{ Html.RenderAction("OrderTotals", "ShoppingCart", new { isEditable = Model.IsEditable }); }

				@{ Html.RenderWidget("order_summary_content_totals_bottom"); }

				@if (Model.IsEditable)
				{
                    if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
					{
					    <div class="checkout-buttons clearfix">
						
							    <button type="button" 
									    class="btn btn-primary btn-large pull-right checkout-button" 
									    id="checkout" 
									    name="checkout"
									    onclick="$('#startcheckout').trigger('click'); return false;">
								    @T("Checkout.Button")&nbsp;
								    <i class="fa fa-arrow-right" style="font-size: 18px"></i>
							    </button>
						
					    </div>
                    
					    <div class="addon-buttons">
						    @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express, Pay with Amazon)*@
						    @foreach(var item in Model.ButtonPaymentMethods.Items)
                            {
                                Html.RenderAction(item.ActionName, item.ControllerName, item.RouteValues);
                            }
					    </div>
                    }
				}
			</div>
		</div>
		}
        
		Html.RenderWidget("order_summary_content_after");

		if (Model.IsEditable)
		{
			Html.RenderAction("CrossSellProducts", "Product");
		}
	}
	else
	{
		<div class="alert alert-info fade in">
			@T("ShoppingCart.CartIsEmpty")
		</div>
	}
</div>

@if (!Model.IsEditable && Model.Items.Any(x => x.IsDownload && x.HasUserAgreement))
{
	<div id="user-agreement-modal" class="modal modal-large hide fade" tabindex="-1">
		<div class="modal-header">
			<h4 class="caption">@T("DownloadableProducts.UserAgreement")</h4>
		</div>
		<div class="modal-body"></div>
		<div class="modal-footer">
			<button class="btn" data-dismiss="modal">@T("Common.OK")</button>
		</div>
	</div>
	<script type="text/javascript">
		$(document).ready(function () {
			$('a.download-user-agreement').click(function () {
				var url = '@(Url.Action("GetUserAgreement", "Download"))?productId=' + $(this).attr('data-id'),
					dialog = $('#user-agreement-modal');

				dialog.find('.modal-body').empty();

				$.get(url, function (html) {
					dialog.find('.modal-body').html(html);
				});

				dialog.modal('show');
				return false;
			});
		});
	</script>
}