@model ShoppingCartModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Web.Models.ShoppingCart;

@helper SimpleProduct(ShoppingCartModel.ShoppingCartItemModel item)
{
    <tr class="cart-item-row">
		@if (Model.IsEditable)
		{
			<td class="remove">
				<input type="checkbox" name="removefromcart" value="@(item.Id)" />
			</td>
		}
		@if (Model.ShowSku)
		{
			<td class="nobr">
				@item.Sku
			</td>
		}
		@if (Model.ShowProductImages)
		{
			<td class="productpicture nobr">
				<img class="img-polaroid" alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" style="max-width:@(Model.MediaDimensions)px;max-height:@(Model.MediaDimensions)px"/>
			</td>
		}
		<td class="product">
			<a href="@item.ProductUrl" title="@T("Products.Details")">@item.ProductName</a>

			@if (Model.DisplayShortDesc && !String.IsNullOrEmpty(item.ShortDesc))
			{
				<div class="short-desc">
					@item.ShortDesc
				</div>
			}

            @if (Model.DisplayBasePrice && !String.IsNullOrEmpty(item.BasePrice))
            {
                <div class="base-price muted ">
                    @item.BasePrice
                </div>
            }

			@if (Model.DisplayDeliveryTime)
			{
				<div class="delivery-time">
					@if ((!String.IsNullOrEmpty(item.DeliveryTimeName) && !String.IsNullOrEmpty(item.DeliveryTimeHexValue)) && item.IsShipEnabled)
					{
						<span class="delivery-time-label">@T("Products.DeliveryTime")</span>
						<span class="delivery-time-color" style="background-color:@item.DeliveryTimeHexValue" title="@item.DeliveryTimeName"></span>
						<span class="delivery-time-value">@item.DeliveryTimeName</span>
					}
				</div>
			}

			@if (!String.IsNullOrEmpty(item.AttributeInfo))
			{
				<div class="attributes muted">
					@Html.Raw(item.AttributeInfo)
				</div>
			}
			@if (!String.IsNullOrEmpty(item.RecurringInfo))
			{
				<div class="recurring-info">
					@Html.Raw(item.RecurringInfo)
				</div>
			}
			@if (item.Warnings.Count > 0)
			{
				<div class="alert alert-error">
					@for (int i = 0; i < item.Warnings.Count; i++)
					{
						<p>@item.Warnings[i]</p>
					}
				</div>
			}
		</td>

        @if (Model.DisplayWeight)
		{
        <td class="weight nobr">
            <span class="product-weight">@((item.Weight * item.Quantity).ToString("N2")) kg</span>
        </td>
        }
		<td class="unit-price nobr">
			<span class="product-unit-price">@item.UnitPrice</span>
		</td>
		<td class="nobr">
			@if (Model.IsEditable)
			{
				if (item.AllowedQuantities.Count > 0)
				{
				<select name="itemquantity@(item.Id)" class="qty-dropdown noskin">
					@foreach (var qty in item.AllowedQuantities)
					{
						<option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
					}
				</select>
				}
				else
				{
					<input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input hide" />
				}
			}
			else
			{
				<span>@item.Quantity</span>
			}
            <span class="measure-unit">@item.QuantityUnit</span>
		</td>
		<td class="nobr omega">
			<span class="product-subtotal">@item.SubTotal</span>
			@if (!String.IsNullOrEmpty(item.Discount))
			{
				<div class="discount">
					@T("ShoppingCart.ItemYouSave"): @item.Discount
				</div>
			}
		</td>
	</tr>
}

@helper BundleProducts(ShoppingCartModel.ShoppingCartItemModel parentItem)
{
	if (parentItem.ChildItems != null)
	{	
        
        <tr class="product-bundle-row">
            <td colspan="2">&nbsp;</td>
            <td colspan="5" class="bundle-headline">
                @T("Basket.Bundle.BundleIncludes")
            </td>
        </tr>
             
		foreach (var item in parentItem.ChildItems.OrderBy(x => x.BundleItem.DisplayOrder))
		{
			<tr class="product-bundle-row">
				@if (Model.IsEditable)
				{
					<td>&nbsp;</td>
				}
				@if (Model.ShowSku)
				{
					<td>&nbsp;</td>
				}
				@if (Model.ShowProductImages)
				{
					<td>&nbsp;</td>
				}
				<td class="product">
					<div class="bundle-item">
						@if (Model.ShowProductBundleImages)
						{
							<div class="bundle-item-image" style="@("min-width: {0}px; min-height: {0}px;".FormatInvariant(Model.BundleThumbSize + 10))">
								@if (!item.BundleItem.HideThumbnail)
								{
									<img class="img-polaroid" src="@item.Picture.ImageUrl" alt="@item.Picture.AlternateText" title="@item.Picture.Title" />
								}
							</div>
						}						
						<div class="bundle-item-body">
							<div class="bundle-item-name">
								@if (item.VisibleIndividually)
								{
									<a href="@item.ProductUrl" title="@T("Products.Details")">@item.ProductName</a>
								}
								else
								{
									@item.ProductName
								}
								@if (item.Quantity > 1 && item.BundlePerItemShoppingCart)
								{
									<text>
										&#215;&nbsp;@item.Quantity
									</text>
								}
							</div>
							@if (Model.DisplayShortDesc && !String.IsNullOrWhiteSpace(item.ShortDesc))
							{
								<div class="bundle-item-description short-desc">
									@Html.Raw(item.ShortDesc)
								</div>
							}
                            @if (Model.DisplayBasePrice && !String.IsNullOrEmpty(item.BasePrice))
                            {
                                <div class="base-price muted ">
                                    @item.BasePrice
                                </div>
                            }
							@if (!String.IsNullOrEmpty(item.AttributeInfo))
							{
								<div class="bundle-item-attribute-info muted">
									@Html.Raw(item.AttributeInfo)
								</div>
							}
							@if (item.Warnings.Count > 0)
							{
								<div class="alert alert-error">
									@foreach (var warning in item.Warnings)
									{
										<p>@warning</p>
									}
								</div>
							}
						</div>
					</div>
				</td>
				<td class="unit-price nobr">
					@if (!String.IsNullOrWhiteSpace(item.BundleItem.PriceWithDiscount))
					{
						<span class="muted">
							@Html.Raw(item.BundleItem.PriceWithDiscount)
						</span>
					}
					else
					{
						<text>&nbsp;</text>
					}
				</td>
				<td class="nobr">
					&nbsp;
				</td>
				<td class="nobr text-success omega">
					&nbsp;
				</td>
			</tr>
		}	
	}
}

<div class="order-summary-content">
	@Html.Widget("order_summary_content_before")
	@Html.Partial("_OrderReviewData", Model.OrderReviewData)
   
    @if (Model.DisplayCommentBox && !Model.IsEditable)
    {
        @Html.Partial("_CommentBox", Model)
    }

    @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
    {
    <div class="selected-checkout-attributes well well-small" style="text-align: left">
        @Html.Raw(Model.CheckoutAttributeInfo)
    </div>
    }

	@if (Model.Items.Count > 0)
	{
		if (Model.Warnings.Count > 0)
		{
			<div class="alert alert-error">
				@for (int i = 0; i < Model.Warnings.Count; i++)
				{
					<p>@Model.Warnings[i]</p>
				}
			</div>
		}
		@*we add enctype = "multipart/form-data" because "File upload" attribute control type requries it*@
		using (Html.BeginRouteForm("ShoppingCart", FormMethod.Post, new { enctype = "multipart/form-data" }))
		{
		<table class="cart table table-order-products">
			<thead>
				<tr class="cart-header-row">
					@if (Model.IsEditable)
					{
						<th>
							@T("ShoppingCart.Remove")
						</th>
					}
					@if (Model.ShowSku)
					{
						<th>
							@T("ShoppingCart.SKU")
						</th>
					}
					@if (Model.ShowProductImages)
					{
						<th class="picture"></th>
					}
					<th>
						@T("ShoppingCart.Product(s)")
					</th>

                    @if (Model.DisplayWeight)
					{
                    <th>
                        @T("ShoppingCart.Weight")
                    </th>
                    }
					<th class="unit-price">
						@T("ShoppingCart.UnitPrice")
					</th>
					<th>
						@T("ShoppingCart.Quantity")
					</th>
					<th class="omega">
						@T("ShoppingCart.ItemTotal")
					</th>
				</tr>
			</thead>
			@{
				foreach (var item in Model.Items)
				{
					if (item.ProductType == ProductType.BundledProduct)
					{
						<tbody class="product-body product-body-bundle">
							@SimpleProduct(item)
							@BundleProducts(item)
						</tbody>
					}
					else
					{
						<tbody class="product-body product-body-simple">
							@SimpleProduct(item)
						</tbody>
					}
				}
			}
		</table>

		if (Model.IsEditable)
		{
			<div class="common-buttons clearfix">
				<button type="submit" name="updatecart" value="updatecart" class="btn pull-right update-cart-button">
					<i class="fa fa-refresh"></i>&nbsp;@T("ShoppingCart.UpdateCart")
				</button>
                <button type="submit" name="continueshopping" value="continueshopping" class="btn pull-left continue-shopping-button">
                    <i class="fa fa-caret-left"></i>&nbsp;@T("ShoppingCart.ContinueShopping")
                </button>
				<input type="submit" name="startcheckout" value="startcheckout" id="startcheckout" style="display: none;" />
			</div>
		}
        
		<div class="cart-footer row-fluid">

			<div class="span16 order-totals-left">
				@Html.Widget("order_summary_content_totals_left")

				@if (Model.IsEditable)
				{
					<!-- Discount Code, Gift Cards, Estimate shipping -->
					<div class="column">
						@Html.Partial("_DiscountBox", Model.DiscountBox)
						@Html.Partial("_GiftCardBox", Model.GiftCardBox)
						@Html.Widget("order_summary_content_deals")
					</div>

					<!-- Checkout attributes -->
					<div class="column">
						@Html.Partial("_CheckoutAttributes", Model.CheckoutAttributes, new ViewDataDictionary())
						@Html.Partial("EstimateShipping", Model.EstimateShipping)
					</div>
				}
			</div>

			<!-- Totals -->
			<div class="span8">
				@if (Model.IsEditable && !String.IsNullOrEmpty(Model.MinOrderSubtotalWarning)) 
				{
					<div class="alert alert-info" style="margin-top: 0">
						@Model.MinOrderSubtotalWarning
					</div>
				}

				@Html.Action("OrderTotals", "ShoppingCart", new { isEditable = Model.IsEditable })

				@Html.Widget("order_summary_content_totals_bottom")

				@if (Model.IsEditable)
				{
                    if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
					{
					    <div class="checkout-buttons">
						
							    <button type="button" 
									    class="btn btn-primary btn-large pull-right checkout-button" 
									    id="checkout" 
									    name="checkout"
									    onclick="$('#startcheckout').trigger('click'); return false;">
								    @T("Checkout.Button")&nbsp;
								    <i class="fa fa-arrow-right" style="font-size: 18px"></i>
							    </button>
						
					    </div>
                    
					    <div class="addon-buttons">
						    @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express, Pay with Amazon)*@
						    @foreach(var item in Model.ButtonPaymentMethods.Items)
						    {
							    @Html.Action(item.ActionName, item.ControllerName, item.RouteValues)
						    }
					    </div>
                    }
				}
			</div>
		</div>
		}
        
		@Html.Widget("order_summary_content_after")

		if (Model.IsEditable)
		{
			@Html.Action("CrossSellProducts", "Product")
		}
	}
	else
	{
		<div class="alert alert-info fade in">
			@T("ShoppingCart.CartIsEmpty")
		</div>
	}
</div>
